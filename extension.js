/*! For license information please see extension.js.LICENSE.txt */
var __webpack_modules__={5207:()=>{!function(t,e,r){if(t.MutationObserver&&"undefined"!=typeof HTMLElement){var n,i=0,a=(n=HTMLElement.prototype.matches||HTMLElement.prototype.webkitMatchesSelector||HTMLElement.prototype.mozMatchesSelector||HTMLElement.prototype.msMatchesSelector,{matchesSelector:function(t,e){return t instanceof HTMLElement&&n.call(t,e)},addMethod:function(t,e,r){var n=t[e];t[e]=function(){return r.length==arguments.length?r.apply(this,arguments):"function"==typeof n?n.apply(this,arguments):void 0}},callCallbacks:function(t,e){e&&e.options.onceOnly&&1==e.firedElems.length&&(t=[t[0]]);for(var r,n=0;r=t[n];n++)r&&r.callback&&r.callback.call(r.elem,r.elem);e&&e.options.onceOnly&&1==e.firedElems.length&&e.me.unbindEventWithSelectorAndCallback.call(e.target,e.selector,e.callback)},checkChildNodesRecursively:function(t,e,r,n){for(var i,o=0;i=t[o];o++)r(i,e,n)&&n.push({callback:e.callback,elem:i}),i.childNodes.length>0&&a.checkChildNodesRecursively(i.childNodes,e,r,n)},mergeArrays:function(t,e){var r,n={};for(r in t)t.hasOwnProperty(r)&&(n[r]=t[r]);for(r in e)e.hasOwnProperty(r)&&(n[r]=e[r]);return n},toElementsArray:function(e){return void 0===e||"number"==typeof e.length&&e!==t||(e=[e]),e}}),o=function(){var t=function(){this._eventsBucket=[],this._beforeAdding=null,this._beforeRemoving=null};return t.prototype.addEvent=function(t,e,r,n){var i={target:t,selector:e,options:r,callback:n,firedElems:[]};return this._beforeAdding&&this._beforeAdding(i),this._eventsBucket.push(i),i},t.prototype.removeEvent=function(t){for(var e,r=this._eventsBucket.length-1;e=this._eventsBucket[r];r--)if(t(e)){this._beforeRemoving&&this._beforeRemoving(e);var n=this._eventsBucket.splice(r,1);n&&n.length&&(n[0].callback=null)}},t.prototype.beforeAdding=function(t){this._beforeAdding=t},t.prototype.beforeRemoving=function(t){this._beforeRemoving=t},t}(),s=function(e,n){var i=new o,s=this,l={fireOnAttributesModification:!1};return i.beforeAdding((function(r){var i,a=r.target;a!==t.document&&a!==t||(a=document.getElementsByTagName("html")[0]),i=new MutationObserver((function(t){n.call(this,t,r)}));var o=e(r.options);i.observe(a,o),r.observer=i,r.me=s})),i.beforeRemoving((function(t){t.observer.disconnect()})),this.bindEvent=function(t,e,r){e=a.mergeArrays(l,e);for(var n=a.toElementsArray(this),o=0;o<n.length;o++)i.addEvent(n[o],t,e,r)},this.unbindEvent=function(){var t=a.toElementsArray(this);i.removeEvent((function(e){for(var n=0;n<t.length;n++)if(this===r||e.target===t[n])return!0;return!1}))},this.unbindEventWithSelectorOrCallback=function(t){var e,n=a.toElementsArray(this),o=t;e="function"==typeof t?function(t){for(var e=0;e<n.length;e++)if((this===r||t.target===n[e])&&t.callback===o)return!0;return!1}:function(e){for(var i=0;i<n.length;i++)if((this===r||e.target===n[i])&&e.selector===t)return!0;return!1},i.removeEvent(e)},this.unbindEventWithSelectorAndCallback=function(t,e){var n=a.toElementsArray(this);i.removeEvent((function(i){for(var a=0;a<n.length;a++)if((this===r||i.target===n[a])&&i.selector===t&&i.callback===e)return!0;return!1}))},this},l=new function(){var t={fireOnAttributesModification:!1,onceOnly:!1,existing:!1};function e(t,e,n){return!(!a.matchesSelector(t,e.selector)||(t._id===r&&(t._id=i++),-1!=e.firedElems.indexOf(t._id))||(e.firedElems.push(t._id),0))}var n=(l=new s((function(t){var e={attributes:!1,childList:!0,subtree:!0};return t.fireOnAttributesModification&&(e.attributes=!0),e}),(function(t,r){t.forEach((function(t){var n=t.addedNodes,i=t.target,o=[];null!==n&&n.length>0?a.checkChildNodesRecursively(n,r,e,o):"attributes"===t.type&&e(i,r)&&o.push({callback:r.callback,elem:i}),a.callCallbacks(o,r)}))}))).bindEvent;return l.bindEvent=function(e,r,i){void 0===i?(i=r,r=t):r=a.mergeArrays(t,r);var o=a.toElementsArray(this);if(r.existing){for(var s=[],l=0;l<o.length;l++)for(var c=o[l].querySelectorAll(e),u=0;u<c.length;u++)s.push({callback:i,elem:c[u]});if(r.onceOnly&&s.length)return i.call(s[0].elem,s[0].elem);setTimeout(a.callCallbacks,1,s)}n.call(this,e,r,i)},l},c=new function(){var t={};function e(t,e){return a.matchesSelector(t,e.selector)}var r=(c=new s((function(){return{childList:!0,subtree:!0}}),(function(t,r){t.forEach((function(t){var n=t.removedNodes,i=[];null!==n&&n.length>0&&a.checkChildNodesRecursively(n,r,e,i),a.callCallbacks(i,r)}))}))).bindEvent;return c.bindEvent=function(e,n,i){void 0===i?(i=n,n=t):n=a.mergeArrays(t,n),r.call(this,e,n,i)},c};e&&f(e.fn),f(HTMLElement.prototype),f(NodeList.prototype),f(HTMLCollection.prototype),f(HTMLDocument.prototype),f(Window.prototype);var u={};return h(l,u,"unbindAllArrive"),h(c,u,"unbindAllLeave"),u}function h(t,e,r){a.addMethod(e,r,t.unbindEvent),a.addMethod(e,r,t.unbindEventWithSelectorOrCallback),a.addMethod(e,r,t.unbindEventWithSelectorAndCallback)}function f(t){t.arrive=l.bindEvent,h(l,t,"unbindArrive"),t.leave=c.bindEvent,h(c,t,"unbindLeave")}}(window,"undefined"==typeof jQuery?null:jQuery,void 0)},9153:(t,e,r)=>{r.r(e),r.d(e,{default:()=>R,fsrsAlgorithm:()=>B});var n,i=((n=i||{})[n.New=0]="New",n[n.Learning=1]="Learning",n[n.Review=2]="Review",n[n.Relearning=3]="Relearning",n),a=(t=>(t[t.Manual=0]="Manual",t[t.Again=1]="Again",t[t.Hard=2]="Hard",t[t.Good=3]="Good",t[t.Easy=4]="Easy",t))(a||{});class o{static card(t){return{...t,state:o.state(t.state),due:o.time(t.due),last_review:t.last_review?o.time(t.last_review):void 0}}static rating(t){if("string"==typeof t){const e=t.charAt(0).toUpperCase(),r=t.slice(1).toLowerCase(),n=a[`${e}${r}`];if(void 0===n)throw new Error(`Invalid rating:[${t}]`);return n}if("number"==typeof t)return t;throw new Error(`Invalid rating:[${t}]`)}static state(t){if("string"==typeof t){const e=t.charAt(0).toUpperCase(),r=t.slice(1).toLowerCase(),n=i[`${e}${r}`];if(void 0===n)throw new Error(`Invalid state:[${t}]`);return n}if("number"==typeof t)return t;throw new Error(`Invalid state:[${t}]`)}static time(t){if("object"==typeof t&&t instanceof Date)return t;if("string"==typeof t){const e=Date.parse(t);if(isNaN(e))throw new Error(`Invalid date:[${t}]`);return new Date(e)}if("number"==typeof t)return new Date(t);throw new Error(`Invalid date:[${t}]`)}static review_log(t){return{...t,due:o.time(t.due),rating:o.rating(t.rating),state:o.state(t.state),review:o.time(t.review)}}}function s(t,e,r){return new Date(r?o.time(t).getTime()+24*e*60*60*1e3:o.time(t).getTime()+60*e*1e3)}function l(t,e,r){if(!t||!e)throw new Error("Invalid date");const n=o.time(t).getTime()-o.time(e).getTime();let i=0;switch(r){case"days":i=Math.floor(n/864e5);break;case"minutes":i=Math.floor(n/6e4)}return i}function c(t){return t<10?`0${t}`:`${t}`}Date.prototype.scheduler=function(t,e){return s(this,t,e)},Date.prototype.diff=function(t,e){return l(this,t,e)},Date.prototype.format=function(){return function(t){const e=o.time(t),r=e.getFullYear(),n=e.getMonth()+1,i=e.getDate(),a=e.getHours(),s=e.getMinutes(),l=e.getSeconds();return`${r}-${c(n)}-${c(i)} ${c(a)}:${c(s)}:${c(l)}`}(this)},Date.prototype.dueFormat=function(t,e,r){return function(t,e,r,n=h){t=o.time(t),e=o.time(e),n.length!==h.length&&(n=h);let i,a=t.getTime()-e.getTime();for(a/=1e3,i=0;i<u.length&&!(a<u[i]);i++)a/=u[i];return`${Math.floor(a)}${r?n[i]:""}`}(this,t,e,r)};const u=[60,60,24,31,12],h=["second","min","hour","day","month","year"],f=Object.freeze([a.Again,a.Hard,a.Good,a.Easy]),p=[{start:2.5,end:7,factor:.15},{start:7,end:20,factor:.1},{start:20,end:1/0,factor:.05}];function d(t,e,r){return Math.min(Math.max(t,e),r)}const m=Object.freeze(["1m","10m"]),y=Object.freeze(["10m"]),v=.001,g=100,b=Object.freeze([.212,1.2931,2.3065,8.2956,6.4133,.8334,3.0194,.001,1.8722,.1666,.796,1.4835,.0614,.2629,1.6483,.6014,1.8729,.5425,.0912,.0658,.1542]),x=(t,e)=>{let r=2;return Math.max(0,e)>1&&(r=d(+(-(Math.log(t[11])+Math.log(Math.pow(2,t[13])-1)+.3*t[14])/e).toFixed(8),.01,2)),(t=>[[v,g],[v,g],[v,g],[v,g],[1,10],[.001,4],[.001,4],[.001,.75],[0,4.5],[0,.8],[.001,3.5],[.001,5],[.001,.25],[.001,.9],[0,4],[0,1],[1,6],[0,t],[0,t],[0,.8],[.1,.8]])(r).map((([e,r],n)=>d(t[n],e,r)))},w=t=>{if(void 0===t)return[...b];switch(t.length){case 21:return[...t];case 19:return console.debug("[FSRS-6]auto fill w from 19 to 21 length"),[...t,0,.5];case 17:{const e=[...t];return e[4]=+(2*e[5]+e[4]).toFixed(8),e[5]=+(Math.log(3*e[5]+1)/3).toFixed(8),e[6]=+(e[6]+.5).toFixed(8),console.debug("[FSRS-6]auto fill w from 17 to 21 length"),e.concat([0,0,0,.5])}default:return console.warn("[FSRS]Invalid parameters length, using default parameters"),[...b]}},E=t=>{const e=Array.isArray(t?.learning_steps)?t.learning_steps:m,r=Array.isArray(t?.relearning_steps)?t.relearning_steps:y,n=x(w(t?.w),r.length);return{request_retention:t?.request_retention||.9,maximum_interval:t?.maximum_interval||36500,w:n,enable_fuzz:t?.enable_fuzz??!1,enable_short_term:t?.enable_short_term??!0,learning_steps:e,relearning_steps:r}};function k(t,e){const r={due:t?o.time(t):new Date,stability:0,difficulty:0,elapsed_days:0,scheduled_days:0,reps:0,lapses:0,learning_steps:0,state:i.New,last_review:void 0};return e&&"function"==typeof e?e(r):r}class S{c;s0;s1;s2;constructor(t){const e=function(){let t=4022871197;return function(e){e=String(e);for(let r=0;r<e.length;r++){t+=e.charCodeAt(r);let n=.02519603282416938*t;t=n>>>0,n-=t,n*=t,t=n>>>0,n-=t,t+=4294967296*n}return 2.3283064365386963e-10*(t>>>0)}}();this.c=1,this.s0=e(" "),this.s1=e(" "),this.s2=e(" "),null==t&&(t=+new Date),this.s0-=e(t),this.s0<0&&(this.s0+=1),this.s1-=e(t),this.s1<0&&(this.s1+=1),this.s2-=e(t),this.s2<0&&(this.s2+=1)}next(){const t=2091639*this.s0+2.3283064365386963e-10*this.c;return this.s0=this.s1,this.s1=this.s2,this.s2=t-(this.c=0|t),this.s2}set state(t){this.c=t.c,this.s0=t.s0,this.s1=t.s1,this.s2=t.s2}get state(){return{c:this.c,s0:this.s0,s1:this.s1,s2:this.s2}}}const _=t=>{const e="number"==typeof t?-t:-t[20];return{decay:e,factor:+(Math.exp(Math.pow(e,-1)*Math.log(.9))-1).toFixed(8)}};function P(t,e,r){const{decay:n,factor:i}=_(t);return+Math.pow(1+i*e/r,n).toFixed(8)}class C{param;intervalModifier;_seed;constructor(t){this.param=new Proxy(E(t),this.params_handler_proxy()),this.intervalModifier=this.calculate_interval_modifier(this.param.request_retention),this.forgetting_curve=P.bind(this,this.param.w)}get interval_modifier(){return this.intervalModifier}set seed(t){this._seed=t}calculate_interval_modifier(t){if(t<=0||t>1)throw new Error("Requested retention rate should be in the range (0,1]");const{decay:e,factor:r}=_(this.param.w);return+((Math.pow(t,1/e)-1)/r).toFixed(8)}get parameters(){return this.param}set parameters(t){this.update_parameters(t)}params_handler_proxy(){const t=this;return{set:function(e,r,n){return"request_retention"===r&&Number.isFinite(n)?t.intervalModifier=t.calculate_interval_modifier(Number(n)):"w"===r&&(n=x(w(n),e.relearning_steps.length),t.forgetting_curve=P.bind(this,n),t.intervalModifier=t.calculate_interval_modifier(Number(e.request_retention))),Reflect.set(e,r,n),!0}}}update_parameters(t){const e=E(t);for(const t in e)if(t in this.param){const r=t;this.param[r]=e[r]}}init_stability(t){return Math.max(this.param.w[t-1],.1)}init_difficulty(t){return+(this.param.w[4]-Math.exp((t-1)*this.param.w[5])+1).toFixed(8)}apply_fuzz(t,e){if(!this.param.enable_fuzz||t<2.5)return Math.round(t);const r=function(t){const e=new S(t),r=()=>e.next();return r.int32=()=>4294967296*e.next()|0,r.double=()=>r()+11102230246251565e-32*(2097152*r()|0),r.state=()=>e.state,r.importState=t=>(e.state=t,r),r}(this._seed)(),{min_ivl:n,max_ivl:i}=function(t,e,r){let n=1;for(const e of p)n+=e.factor*Math.max(Math.min(t,e.end)-e.start,0);t=Math.min(t,r);let i=Math.max(2,Math.round(t-n));const a=Math.min(Math.round(t+n),r);return t>e&&(i=Math.max(i,e+1)),i=Math.min(i,a),{min_ivl:i,max_ivl:a}}(t,e,this.param.maximum_interval);return Math.floor(r*(i-n+1)+n)}next_interval(t,e){const r=Math.min(Math.max(1,Math.round(t*this.intervalModifier)),this.param.maximum_interval);return this.apply_fuzz(r,e)}linear_damping(t,e){return+(t*(10-e)/9).toFixed(8)}next_difficulty(t,e){const r=-this.param.w[6]*(e-3),n=t+this.linear_damping(r,t);return d(this.mean_reversion(this.init_difficulty(a.Easy),n),1,10)}mean_reversion(t,e){return+(this.param.w[7]*t+(1-this.param.w[7])*e).toFixed(8)}next_recall_stability(t,e,r,n){const i=a.Hard===n?this.param.w[15]:1,o=a.Easy===n?this.param.w[16]:1;return+d(e*(1+Math.exp(this.param.w[8])*(11-t)*Math.pow(e,-this.param.w[9])*(Math.exp((1-r)*this.param.w[10])-1)*i*o),v,36500).toFixed(8)}next_forget_stability(t,e,r){return+d(this.param.w[11]*Math.pow(t,-this.param.w[12])*(Math.pow(e+1,this.param.w[13])-1)*Math.exp((1-r)*this.param.w[14]),v,36500).toFixed(8)}next_short_term_stability(t,e){const r=Math.pow(t,-this.param.w[19])*Math.exp(this.param.w[17]*(e-3+this.param.w[18]));return+d(t*(e>=3?Math.max(r,1):r),v,36500).toFixed(8)}forgetting_curve;next_state(t,e,r){const{difficulty:n,stability:i}=t??{difficulty:0,stability:0};if(e<0)throw new Error(`Invalid delta_t "${e}"`);if(r<0||r>4)throw new Error(`Invalid grade "${r}"`);if(0===n&&0===i)return{difficulty:d(this.init_difficulty(r),1,10),stability:this.init_stability(r)};if(0===r)return{difficulty:n,stability:i};if(n<1||i<v)throw new Error(`Invalid memory state { difficulty: ${n}, stability: ${i} }`);const a=this.forgetting_curve(e,i),o=this.next_recall_stability(n,i,a,r),s=this.next_forget_stability(n,i,a),l=this.next_short_term_stability(i,r);let c=o;if(1===r){let[t,e]=[0,0];this.param.enable_short_term&&(t=this.param.w[17],e=this.param.w[18]),c=d(+(i/Math.exp(t*e)).toFixed(8),v,s)}return 0===e&&this.param.enable_short_term&&(c=l),{difficulty:this.next_difficulty(n,r),stability:c}}}function A(){return`${this.review_time.getTime()}_${this.current.reps}_${this.current.difficulty*this.current.stability}`}const T=t=>{const e=t.slice(-1),r=parseInt(t.slice(0,-1),10);if(isNaN(r)||!Number.isFinite(r)||r<0)throw new Error(`Invalid step value: ${t}`);switch(e){case"m":return r;case"h":return 60*r;case"d":return 1440*r;default:throw new Error(`Invalid step unit: ${t}, expected m/h/d`)}},M=(t,e,r)=>{const n=e===i.Relearning||e===i.Review?t.relearning_steps:t.learning_steps,o=n.length;if(0===o||r>=o)return{};const s=n[0],l=T,c=()=>{if(1===o)return Math.round(1.5*l(s));const t=n[1];return Math.round((l(s)+l(t))/2)},u=t=>t<0||t>=o?null:n[t],h={},f=u(Math.max(0,r));if(e===i.Review)return h[a.Again]={scheduled_minutes:l(f),next_step:0},h;{h[a.Again]={scheduled_minutes:l(s),next_step:0},h[a.Hard]={scheduled_minutes:c(),next_step:r};const t=u(r+1);if(t){const e=(t=>l(t))(t);e&&(h[a.Good]={scheduled_minutes:Math.round(e),next_step:r+1})}}return h};var D=(t=>(t.SCHEDULER="Scheduler",t.LEARNING_STEPS="LearningSteps",t.SEED="Seed",t))(D||{});class L{last;current;review_time;next=new Map;algorithm;strategies;elapsed_days=0;constructor(t,e,r,n){this.algorithm=r,this.last=o.card(t),this.current=o.card(t),this.review_time=o.time(e),this.strategies=n,this.init()}checkGrade(t){if(!Number.isFinite(t)||t<0||t>4)throw new Error(`Invalid grade "${t}",expected 1-4`)}init(){const{state:t,last_review:e}=this.current;let r=0;t!==i.New&&e&&(r=function(t,e){const r=Date.UTC(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),n=Date.UTC(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate());return Math.floor((n-r)/864e5)}(e,this.review_time)),this.current.last_review=this.review_time,this.elapsed_days=r,this.current.elapsed_days=r,this.current.reps+=1;let n=A;if(this.strategies){const t=this.strategies.get(D.SEED);t&&(n=t)}this.algorithm.seed=n.call(this)}preview(){return{[a.Again]:this.review(a.Again),[a.Hard]:this.review(a.Hard),[a.Good]:this.review(a.Good),[a.Easy]:this.review(a.Easy),[Symbol.iterator]:this.previewIterator.bind(this)}}*previewIterator(){for(const t of f)yield this.review(t)}review(t){const{state:e}=this.last;let r;switch(this.checkGrade(t),e){case i.New:r=this.newState(t);break;case i.Learning:case i.Relearning:r=this.learningState(t);break;case i.Review:r=this.reviewState(t)}return r}buildLog(t){const{last_review:e,due:r,elapsed_days:n}=this.last;return{rating:t,state:this.current.state,due:e||r,stability:this.current.stability,difficulty:this.current.difficulty,elapsed_days:this.elapsed_days,last_elapsed_days:n,scheduled_days:this.current.scheduled_days,learning_steps:this.current.learning_steps,review:this.review_time}}}class O extends L{learningStepsStrategy;constructor(t,e,r,n){super(t,e,r,n);let i=M;if(this.strategies){const t=this.strategies.get(D.LEARNING_STEPS);t&&(i=t)}this.learningStepsStrategy=i}getLearningInfo(t,e){const r=this.algorithm.parameters;t.learning_steps=t.learning_steps||0;const n=this.learningStepsStrategy(r,t.state,this.current.state===i.Learning?t.learning_steps+1:t.learning_steps);return{scheduled_minutes:Math.max(0,n[e]?.scheduled_minutes??0),next_steps:Math.max(0,n[e]?.next_step??0)}}applyLearningSteps(t,e,r){const{scheduled_minutes:n,next_steps:a}=this.getLearningInfo(this.current,e);if(n>0&&n<1440)t.learning_steps=a,t.scheduled_days=0,t.state=r,t.due=s(this.review_time,Math.round(n),!1);else if(t.state=i.Review,n>=1440)t.learning_steps=a,t.due=s(this.review_time,Math.round(n),!1),t.scheduled_days=Math.floor(n/1440);else{t.learning_steps=0;const e=this.algorithm.next_interval(t.stability,this.elapsed_days);t.scheduled_days=e,t.due=s(this.review_time,e,!0)}}newState(t){const e=this.next.get(t);if(e)return e;const r=o.card(this.current);r.difficulty=d(this.algorithm.init_difficulty(t),1,10),r.stability=this.algorithm.init_stability(t),this.applyLearningSteps(r,t,i.Learning);const n={card:r,log:this.buildLog(t)};return this.next.set(t,n),n}learningState(t){const e=this.next.get(t);if(e)return e;const{state:r,difficulty:n,stability:i}=this.last,a=o.card(this.current);a.difficulty=this.algorithm.next_difficulty(n,t),a.stability=this.algorithm.next_short_term_stability(i,t),this.applyLearningSteps(a,t,r);const s={card:a,log:this.buildLog(t)};return this.next.set(t,s),s}reviewState(t){const e=this.next.get(t);if(e)return e;const r=this.elapsed_days,{difficulty:n,stability:s}=this.last,l=this.algorithm.forgetting_curve(r,s),c=o.card(this.current),u=o.card(this.current),h=o.card(this.current),f=o.card(this.current);this.next_ds(c,u,h,f,n,s,l),this.next_interval(u,h,f,r),this.next_state(u,h,f),this.applyLearningSteps(c,a.Again,i.Relearning),c.lapses+=1;const p={card:c,log:this.buildLog(a.Again)},d={card:u,log:super.buildLog(a.Hard)},m={card:h,log:super.buildLog(a.Good)},y={card:f,log:super.buildLog(a.Easy)};return this.next.set(a.Again,p),this.next.set(a.Hard,d),this.next.set(a.Good,m),this.next.set(a.Easy,y),this.next.get(t)}next_ds(t,e,r,n,i,o,s){t.difficulty=this.algorithm.next_difficulty(i,a.Again);const l=o/Math.exp(this.algorithm.parameters.w[17]*this.algorithm.parameters.w[18]),c=this.algorithm.next_forget_stability(i,o,s);t.stability=d(+l.toFixed(8),v,c),e.difficulty=this.algorithm.next_difficulty(i,a.Hard),e.stability=this.algorithm.next_recall_stability(i,o,s,a.Hard),r.difficulty=this.algorithm.next_difficulty(i,a.Good),r.stability=this.algorithm.next_recall_stability(i,o,s,a.Good),n.difficulty=this.algorithm.next_difficulty(i,a.Easy),n.stability=this.algorithm.next_recall_stability(i,o,s,a.Easy)}next_interval(t,e,r,n){let i,a;i=this.algorithm.next_interval(t.stability,n),a=this.algorithm.next_interval(e.stability,n),i=Math.min(i,a),a=Math.max(a,i+1);const o=Math.max(this.algorithm.next_interval(r.stability,n),a+1);t.scheduled_days=i,t.due=s(this.review_time,i,!0),e.scheduled_days=a,e.due=s(this.review_time,a,!0),r.scheduled_days=o,r.due=s(this.review_time,o,!0)}next_state(t,e,r){t.state=i.Review,t.learning_steps=0,e.state=i.Review,e.learning_steps=0,r.state=i.Review,r.learning_steps=0}}class F extends L{newState(t){const e=this.next.get(t);if(e)return e;this.current.scheduled_days=0,this.current.elapsed_days=0;const r=o.card(this.current),n=o.card(this.current),i=o.card(this.current),a=o.card(this.current);return this.init_ds(r,n,i,a),this.next_interval(r,n,i,a,0),this.next_state(r,n,i,a),this.update_next(r,n,i,a),this.next.get(t)}init_ds(t,e,r,n){t.difficulty=d(this.algorithm.init_difficulty(a.Again),1,10),t.stability=this.algorithm.init_stability(a.Again),e.difficulty=d(this.algorithm.init_difficulty(a.Hard),1,10),e.stability=this.algorithm.init_stability(a.Hard),r.difficulty=d(this.algorithm.init_difficulty(a.Good),1,10),r.stability=this.algorithm.init_stability(a.Good),n.difficulty=d(this.algorithm.init_difficulty(a.Easy),1,10),n.stability=this.algorithm.init_stability(a.Easy)}learningState(t){return this.reviewState(t)}reviewState(t){const e=this.next.get(t);if(e)return e;const r=this.elapsed_days,{difficulty:n,stability:i}=this.last,a=this.algorithm.forgetting_curve(r,i),s=o.card(this.current),l=o.card(this.current),c=o.card(this.current),u=o.card(this.current);return this.next_ds(s,l,c,u,n,i,a),this.next_interval(s,l,c,u,r),this.next_state(s,l,c,u),s.lapses+=1,this.update_next(s,l,c,u),this.next.get(t)}next_ds(t,e,r,n,i,o,s){t.difficulty=this.algorithm.next_difficulty(i,a.Again);const l=this.algorithm.next_forget_stability(i,o,s);t.stability=d(o,v,l),e.difficulty=this.algorithm.next_difficulty(i,a.Hard),e.stability=this.algorithm.next_recall_stability(i,o,s,a.Hard),r.difficulty=this.algorithm.next_difficulty(i,a.Good),r.stability=this.algorithm.next_recall_stability(i,o,s,a.Good),n.difficulty=this.algorithm.next_difficulty(i,a.Easy),n.stability=this.algorithm.next_recall_stability(i,o,s,a.Easy)}next_interval(t,e,r,n,i){let a,o,l,c;a=this.algorithm.next_interval(t.stability,i),o=this.algorithm.next_interval(e.stability,i),l=this.algorithm.next_interval(r.stability,i),c=this.algorithm.next_interval(n.stability,i),a=Math.min(a,o),o=Math.max(o,a+1),l=Math.max(l,o+1),c=Math.max(c,l+1),t.scheduled_days=a,t.due=s(this.review_time,a,!0),e.scheduled_days=o,e.due=s(this.review_time,o,!0),r.scheduled_days=l,r.due=s(this.review_time,l,!0),n.scheduled_days=c,n.due=s(this.review_time,c,!0)}next_state(t,e,r,n){t.state=i.Review,t.learning_steps=0,e.state=i.Review,e.learning_steps=0,r.state=i.Review,r.learning_steps=0,n.state=i.Review,n.learning_steps=0}update_next(t,e,r,n){const i={card:t,log:this.buildLog(a.Again)},o={card:e,log:super.buildLog(a.Hard)},s={card:r,log:super.buildLog(a.Good)},l={card:n,log:super.buildLog(a.Easy)};this.next.set(a.Again,i),this.next.set(a.Hard,o),this.next.set(a.Good,s),this.next.set(a.Easy,l)}}class I{fsrs;constructor(t){this.fsrs=t}replay(t,e,r){return this.fsrs.next(t,e,r)}handleManualRating(t,e,r,n,o,s,c){if(typeof e>"u")throw new Error("reschedule: state is required for manual rating");let u,h;if(e===i.New)u={rating:a.Manual,state:e,due:c??r,stability:t.stability,difficulty:t.difficulty,elapsed_days:n,last_elapsed_days:t.elapsed_days,scheduled_days:t.scheduled_days,learning_steps:t.learning_steps,review:r},h=k(r),h.last_review=r;else{if(typeof c>"u")throw new Error("reschedule: due is required for manual rating");const i=l(c,r,"days");u={rating:a.Manual,state:t.state,due:t.last_review||t.due,stability:t.stability,difficulty:t.difficulty,elapsed_days:n,last_elapsed_days:t.elapsed_days,scheduled_days:t.scheduled_days,learning_steps:t.learning_steps,review:r},h={...t,state:e,due:c,last_review:r,stability:o||t.stability,difficulty:s||t.difficulty,elapsed_days:n,scheduled_days:i,reps:t.reps+1}}return{card:h,log:u}}reschedule(t,e){const r=[];let n=k(t.due);for(const t of e){let e;if(t.review=o.time(t.review),t.rating===a.Manual){let r=0;n.state!==i.New&&n.last_review&&(r=l(t.review,n.last_review,"days")),e=this.handleManualRating(n,t.state,t.review,r,t.stability,t.difficulty,t.due?o.time(t.due):void 0)}else e=this.replay(n,t.review,t.rating);r.push(e),n=e.card}return r}calculateManualRecord(t,e,r,n){if(!r)return null;const{card:i,log:a}=r,s=o.card(t);return s.due.getTime()===i.due.getTime()?null:(s.scheduled_days=l(i.due,s.due,"days"),this.handleManualRating(s,i.state,o.time(e),a.elapsed_days,n?i.stability:void 0,n?i.difficulty:void 0,i.due))}}class j extends C{strategyHandler=new Map;Scheduler;constructor(t){super(t);const{enable_short_term:e}=this.parameters;this.Scheduler=e?O:F}params_handler_proxy(){const t=this;return{set:function(e,r,n){return"request_retention"===r&&Number.isFinite(n)?t.intervalModifier=t.calculate_interval_modifier(Number(n)):"enable_short_term"===r?t.Scheduler=!0===n?O:F:"w"===r&&(n=x(w(n),e.relearning_steps.length),t.forgetting_curve=P.bind(this,n),t.intervalModifier=t.calculate_interval_modifier(Number(e.request_retention))),Reflect.set(e,r,n),!0}}}useStrategy(t,e){return this.strategyHandler.set(t,e),this}clearStrategy(t){return t?this.strategyHandler.delete(t):this.strategyHandler.clear(),this}getScheduler(t,e){return new(this.strategyHandler.get(D.SCHEDULER)||this.Scheduler)(t,e,this,this.strategyHandler)}repeat(t,e,r){const n=this.getScheduler(t,e).preview();return r&&"function"==typeof r?r(n):n}next(t,e,r,n){const i=this.getScheduler(t,e),s=o.rating(r);if(s===a.Manual)throw new Error("Cannot review a manual rating");const l=i.review(s);return n&&"function"==typeof n?n(l):l}get_retrievability(t,e,r=!0){const n=o.card(t);e=e?o.time(e):new Date;const a=n.state!==i.New?Math.max(l(e,n.last_review,"days"),0):0,s=n.state!==i.New?this.forgetting_curve(a,+n.stability.toFixed(8)):0;return r?`${(100*s).toFixed(2)}%`:s}rollback(t,e,r){const n=o.card(t),s=o.review_log(e);if(s.rating===a.Manual)throw new Error("Cannot rollback a manual rating");let l,c,u;switch(s.state){case i.New:l=s.due,c=void 0,u=0;break;case i.Learning:case i.Relearning:case i.Review:l=s.review,c=s.due,u=n.lapses-(s.rating===a.Again&&s.state===i.Review?1:0)}const h={...n,due:l,stability:s.stability,difficulty:s.difficulty,elapsed_days:s.last_elapsed_days,scheduled_days:s.scheduled_days,reps:Math.max(0,n.reps-1),lapses:Math.max(0,u),learning_steps:s.learning_steps,state:s.state,last_review:c};return r&&"function"==typeof r?r(h):h}forget(t,e,r=!1,n){const s=o.card(t);e=o.time(e);const c=s.state===i.New?0:l(e,s.due,"days"),u={rating:a.Manual,state:s.state,due:s.due,stability:s.stability,difficulty:s.difficulty,elapsed_days:0,last_elapsed_days:s.elapsed_days,scheduled_days:c,learning_steps:s.learning_steps,review:e},h={card:{...s,due:e,stability:0,difficulty:0,elapsed_days:0,scheduled_days:0,reps:r?0:s.reps,lapses:r?0:s.lapses,learning_steps:0,state:i.New,last_review:s.last_review},log:u};return n&&"function"==typeof n?n(h):h}reschedule(t,e=[],r={}){const{recordLogHandler:n,reviewsOrderBy:i,skipManual:s=!0,now:l=new Date,update_memory_state:c=!1}=r;i&&"function"==typeof i&&e.sort(i),s&&(e=e.filter((t=>t.rating!==a.Manual)));const u=new I(this),h=u.reschedule(r.first_card||k(),e),f=h.length,p=o.card(t),d=u.calculateManualRecord(p,l,f?h[f-1]:void 0,c);return n&&"function"==typeof n?{collections:h.map(n),reschedule_item:d?n(d):null}:{collections:h,reschedule_item:d}}}var N=(t=>new j(t||{}))(E()),B=function(t,e){try{var r;if(t.fsrsState)if("string"==typeof t.fsrsState)try{r=JSON.parse(t.fsrsState)}catch(t){console.warn("FSRS状态解析失败，创建新卡片:",t),r=k()}else r=t.fsrsState;else r=k();var n=function(t){switch(t){case 0:case 1:return 1;case 2:return 2;case 3:case 4:default:return 3;case 5:return 4}}(e),i=new Date,a=N.repeat(r,i)[n];if(!a||!a.card||!a.card.due)throw new Error("FSRS调度失败: 无法获取有效的nextCard.card");var o=a.card,s=o.due.getTime()-i.getTime();return{interval:Math.max(0,Math.round(s/864e5)),repetition:o.reps,efactor:o.stability,fsrsState:o}}catch(r){return console.error("FSRS算法执行错误:",r),{interval:e>=3?Math.max(1,2*(t.interval||1)):1,repetition:(t.repetition||0)+1,efactor:t.efactor||2.5}}};const R=B},1614:(t,e,r)=>{r.d(e,{D:()=>i,Z:()=>n});var n=function(t){return t.FixedInterval="FIXED_INTERVAL",t.DefaultSpacedInterval="SPACED_INTERVAL",t}({}),i=function(t){return t.Days="Days",t.Weeks="Weeks",t.Months="Months",t.Years="Years",t}({})},3435:(t,e,r)=>{r.r(e),r.d(e,{bulkSavePracticeData:()=>y,loadPriorityOrder:()=>v,savePracticeData:()=>m,savePriorityOrder:()=>g});var n=r(1828),i=r(8825),a=r(5729),o=["refUid","dataPageTitle","dateCreated"];function s(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=function(t,e){if(t){if("string"==typeof t)return l(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?l(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){s=!0,a=t},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw a}}}}function l(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function c(){c=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function h(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{h({},"")}catch(t){h=function(t,e,r){return t[e]=r}}function f(t,e,r,n){var a=e&&e.prototype instanceof b?e:b,o=Object.create(a.prototype),s=new L(n||[]);return i(o,"_invoke",{value:A(t,r,s)}),o}function p(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=f;var d="suspendedStart",m="suspendedYield",y="executing",v="completed",g={};function b(){}function x(){}function w(){}var E={};h(E,o,(function(){return this}));var k=Object.getPrototypeOf,S=k&&k(k(O([])));S&&S!==r&&n.call(S,o)&&(E=S);var _=w.prototype=b.prototype=Object.create(E);function P(t){["next","throw","return"].forEach((function(e){h(t,e,(function(t){return this._invoke(e,t)}))}))}function C(t,e){function r(i,a,o,s){var l=p(t[i],t,a);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==u(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(h).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function A(e,r,n){var i=d;return function(a,o){if(i===y)throw new Error("Generator is already running");if(i===v){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=T(s,n);if(l){if(l===g)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===d)throw i=v,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=y;var c=p(e,r,n);if("normal"===c.type){if(i=n.done?v:m,c.arg===g)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=v,n.method="throw",n.arg=c.arg)}}}function T(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,T(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),g;var a=p(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,g;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,g):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,g)}function M(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function D(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function L(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(M,this),this.reset(!0)}function O(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(u(e)+" is not iterable")}return x.prototype=w,i(_,"constructor",{value:w,configurable:!0}),i(w,"constructor",{value:x,configurable:!0}),x.displayName=h(w,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===x||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,h(t,l,"GeneratorFunction")),t.prototype=Object.create(_),t},e.awrap=function(t){return{__await:t}},P(C.prototype),h(C.prototype,s,(function(){return this})),e.AsyncIterator=C,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new C(f(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},P(_),h(_,l,"Generator"),h(_,o,(function(){return this})),h(_,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=O,L.prototype={constructor:L,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(D),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,g):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),D(r),g}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;D(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:O(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),g}},e}function u(t){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u(t)}function h(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}function f(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function p(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){f(a,n,i,o,s,"next",t)}function s(t){f(a,n,i,o,s,"throw",t)}o(void 0)}))}}var d=function(t){switch(t){case 5:default:return"🟢";case 4:return"🔵";case 3:case 2:return"🟠";case 0:return"🔴"}},m=function(){var t=p(c().mark((function t(e){var r,s,l,f,p,m,y,v,g,b,x,w,E,k,S;return c().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.refUid,s=e.dataPageTitle,l=e.dateCreated,f=h(e,o),t.next=3,(0,a.j$)(s);case 3:return t.next=5,(0,a.Lv)(s,"data",-1,{open:!1,heading:3});case 5:return p=t.sent,t.next=8,(0,a.$v)(p,"((".concat(r,"))"),0,{open:!1});case 8:return m=t.sent,y=l||new Date,v=n.wF(y),g=d(f.grade),t.next=14,(0,a.Q6)(m,"[[".concat(v,"]] ").concat(g),0,{open:!1});case 14:b=t.sent,x=f.nextDueDate||i.fi(y,f.interval),w=0,E=Object.keys(f);case 17:if(!(w<E.length)){t.next=26;break}return k=E[w],S=f[k],"nextDueDate"===k?S="[[".concat(n.wF(x),"]]"):"fsrsState"===k&&"object"===u(S)&&null!==S&&(S=JSON.stringify(S)),t.next=23,(0,a.Q6)(b,"".concat(k,":: ").concat(S),-1);case 23:w++,t.next=17;break;case 26:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),y=function(){var t=p(c().mark((function t(e){var r,i,o,l,h,f,p,m,y,v,g,b,x,w,E,k,S,_,P,C,A,T,M;return c().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.token,i=e.records,o=e.selectedUids,l=e.dataPageTitle,t.next=3,(0,a.j$)(l);case 3:return t.next=5,(0,a.Lv)(l,"data",-1,{open:!1,heading:3});case 5:h=t.sent,f=window.roamAlphaAPI.graph.name,p={graphName:f,data:{action:"batch-actions",actions:[]}},m=s(o),t.prev=9,m.s();case 11:if((y=m.n()).done){t.next=50;break}v=y.value,(g=(0,a.eo)(h,"((".concat(v,"))")))&&p.data.actions.push({action:"delete-block",block:{uid:g}}),b=window.roamAlphaAPI.util.generateUID(),p.data.actions.push({action:"create-block",location:{"parent-uid":h,order:0},block:{string:"((".concat(v,"))"),uid:b,open:!1}}),x=i[v],w=s(x),t.prev=19,w.s();case 21:if((E=w.n()).done){t.next=40;break}k=E.value,S=n.wF(k.dateCreated),_=d(k.grade),P=window.roamAlphaAPI.util.generateUID(),p.data.actions.push({action:"create-block",location:{"parent-uid":b,order:0},block:{string:"[[".concat(S,"]] ").concat(_),uid:P,open:!1}}),C=0,A=Object.keys(k);case 28:if(!(C<A.length)){t.next=38;break}if(T=A[C],M=k[T],"dateCreated"!==T){t.next=33;break}return t.abrupt("continue",35);case 33:"nextDueDate"===T?M="[[".concat(n.wF(M),"]]"):"fsrsState"===T&&"object"===u(M)&&null!==M&&(M=JSON.stringify(M)),p.data.actions.push({action:"create-block",location:{"parent-uid":P,order:-1},block:{string:"".concat(T,":: ").concat(M),open:!1}});case 35:C++,t.next=28;break;case 38:t.next=21;break;case 40:t.next=45;break;case 42:t.prev=42,t.t0=t.catch(19),w.e(t.t0);case 45:return t.prev=45,w.f(),t.finish(45);case 48:t.next=11;break;case 50:t.next=55;break;case 52:t.prev=52,t.t1=t.catch(9),m.e(t.t1);case 55:return t.prev=55,m.f(),t.finish(55);case 58:return t.prev=59,t.next=62,fetch("".concat("https://roam-memo-server.onrender.com","/save-roam-sr-data"),{method:"POST",body:JSON.stringify(p),headers:{Authorization:"Bearer ".concat(r),"Content-Type":"application/json"}});case 62:t.next=67;break;case 64:t.prev=64,t.t2=t.catch(59),console.error("Error Bulk Saving",t.t2);case 67:case"end":return t.stop()}}),t,null,[[9,52,55,58],[19,42,45,48],[59,64]])})));return function(e){return t.apply(this,arguments)}}(),v=function(){var t=p(c().mark((function t(e){var r,n,i,o,s,l,u;return c().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.dataPageTitle,t.prev=1,t.next=4,(0,a.j$)(r);case 4:return t.next=6,(0,a.Lv)(r,"data",-1,{open:!1,heading:3});case 6:if(n=t.sent,i=(0,a.eo)(n,"Priority Rankings")){t.next=10;break}return t.abrupt("return",[]);case 10:if((o=(0,a.gG)(i))&&0!==o.length){t.next=13;break}return t.abrupt("return",[]);case 13:if(!(s=null==o?void 0:o.find((function(t){return t.string&&t.string.startsWith("priority-order::")})))){t.next=27;break}if(l=s.string.replace("priority-order::","").trim()){t.next=18;break}return t.abrupt("return",[]);case 18:return t.prev=18,u=JSON.parse(l),t.abrupt("return",u);case 23:return t.prev=23,t.t0=t.catch(18),console.error("优先级数据解析失败:",t.t0),t.abrupt("return",[]);case 27:return t.abrupt("return",[]);case 30:return t.prev=30,t.t1=t.catch(1),console.error("优先级系统 - 读取优先级顺序失败:",t.t1),t.abrupt("return",[]);case 34:case"end":return t.stop()}}),t,null,[[1,30],[18,23]])})));return function(e){return t.apply(this,arguments)}}(),g=function(){var t=p(c().mark((function t(e){var r,n,i,o,s,l,u,h;return c().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=e.dataPageTitle,n=e.priorityOrder,t.prev=1,window.roamAlphaAPI){t.next=4;break}throw new Error("Roam Alpha API 不可用");case 4:return window.dispatchEvent(new CustomEvent("memoSavingProgress",{detail:{status:"正在保存 ".concat(n.length.toLocaleString()," 张卡片的优先级..."),progress:10}})),t.next=7,(0,a.j$)(r);case 7:return window.dispatchEvent(new CustomEvent("memoSavingProgress",{detail:{status:"正在准备数据结构...",progress:30}})),t.next=10,(0,a.Lv)(r,"data",-1,{open:!1,heading:3});case 10:return i=t.sent,t.next=13,(0,a.$v)(i,"Priority Rankings",0,{open:!1});case 13:if(o=t.sent,window.dispatchEvent(new CustomEvent("memoSavingProgress",{detail:{status:"正在检查现有数据...",progress:50}})),s=(0,a.gG)(o),l=null==s?void 0:s.find((function(t){return t.string&&t.string.startsWith("priority-order::")})),window.dispatchEvent(new CustomEvent("memoSavingProgress",{detail:{status:"正在写入优先级数据...",progress:80}})),u=JSON.stringify(n),h="priority-order:: ".concat(u),!l){t.next=25;break}return t.next=23,window.roamAlphaAPI.updateBlock({block:{uid:l.uid,string:h}});case 23:t.next=27;break;case 25:return t.next=27,(0,a.Q6)(o,h,-1);case 27:window.dispatchEvent(new CustomEvent("memoSavingProgress",{detail:{status:"保存完成",progress:100}})),t.next=35;break;case 30:throw t.prev=30,t.t0=t.catch(1),console.error("优先级系统 - 保存优先级顺序失败:",t.t0),window.dispatchEvent(new CustomEvent("memoSavingProgress",{detail:{status:"保存失败",progress:0}})),t.t0;case 35:case"end":return t.stop()}}),t,null,[[1,30]])})));return function(e){return t.apply(this,arguments)}}()},5729:(t,e,r)=>{r.d(e,{$v:()=>w,$y:()=>y,Lv:()=>x,Q6:()=>g,YD:()=>h,cb:()=>E,eo:()=>m,gG:()=>v,j$:()=>p});var n=r(1614);function i(t){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i(t)}function a(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function o(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){var n,a,o,s;n=t,a=e,o=r[e],s=function(t,e){if("object"!=i(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a),(a="symbol"==i(s)?s:String(s))in n?Object.defineProperty(n,a,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[a]=o})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function s(){s=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,a=Object.defineProperty||function(t,e,r){t[e]=r.value},o="function"==typeof Symbol?Symbol:{},l=o.iterator||"@@iterator",c=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag";function h(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{h({},"")}catch(t){h=function(t,e,r){return t[e]=r}}function f(t,e,r,n){var i=e&&e.prototype instanceof b?e:b,o=Object.create(i.prototype),s=new L(n||[]);return a(o,"_invoke",{value:A(t,r,s)}),o}function p(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=f;var d="suspendedStart",m="suspendedYield",y="executing",v="completed",g={};function b(){}function x(){}function w(){}var E={};h(E,l,(function(){return this}));var k=Object.getPrototypeOf,S=k&&k(k(O([])));S&&S!==r&&n.call(S,l)&&(E=S);var _=w.prototype=b.prototype=Object.create(E);function P(t){["next","throw","return"].forEach((function(e){h(t,e,(function(t){return this._invoke(e,t)}))}))}function C(t,e){function r(a,o,s,l){var c=p(t[a],t,o);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==i(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,s,l)}),(function(t){r("throw",t,s,l)})):e.resolve(h).then((function(t){u.value=t,s(u)}),(function(t){return r("throw",t,s,l)}))}l(c.arg)}var o;a(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return o=o?o.then(i,i):i()}})}function A(e,r,n){var i=d;return function(a,o){if(i===y)throw new Error("Generator is already running");if(i===v){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=T(s,n);if(l){if(l===g)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===d)throw i=v,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=y;var c=p(e,r,n);if("normal"===c.type){if(i=n.done?v:m,c.arg===g)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=v,n.method="throw",n.arg=c.arg)}}}function T(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,T(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),g;var a=p(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,g;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,g):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,g)}function M(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function D(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function L(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(M,this),this.reset(!0)}function O(e){if(e||""===e){var r=e[l];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var a=-1,o=function r(){for(;++a<e.length;)if(n.call(e,a))return r.value=e[a],r.done=!1,r;return r.value=t,r.done=!0,r};return o.next=o}}throw new TypeError(i(e)+" is not iterable")}return x.prototype=w,a(_,"constructor",{value:w,configurable:!0}),a(w,"constructor",{value:x,configurable:!0}),x.displayName=h(w,u,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===x||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,h(t,u,"GeneratorFunction")),t.prototype=Object.create(_),t},e.awrap=function(t){return{__await:t}},P(C.prototype),h(C.prototype,c,(function(){return this})),e.AsyncIterator=C,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new C(f(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},P(_),h(_,u,"Generator"),h(_,l,(function(){return this})),h(_,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=O,L.prototype={constructor:L,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(D),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,g):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),D(r),g}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;D(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:O(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),g}},e}function l(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function c(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){l(a,n,i,o,s,"next",t)}function s(t){l(a,n,i,o,s,"throw",t)}o(void 0)}))}}var u=function(){var t=c(s().mark((function t(e){var r,n;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.refUid,t.next=3,window.roamAlphaAPI.q("[\n  :find (pull ?parentIds [\n    :node/title\n    :block/string\n    :block/uid])\n  :in $ ?refId\n  :where\n    [?block :block/uid ?refId]\n    [?block :block/parents ?parentIds]\n  ]",r);case 3:return n=t.sent,t.abrupt("return",n.map((function(t){return t[0]})));case 5:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),h=function(){var t=c(s().mark((function t(e){var r,n,i,a,o;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,window.roamAlphaAPI.q("[\n  :find (pull ?block [\n    :block/string\n    :block/children\n    {:block/children [:block/uid :block/string :block/order]}])\n  :in $ ?refId\n  :where\n    [?block :block/uid ?refId]\n  ]",e);case 3:if((n=t.sent)&&n[0]&&n[0][0]){t.next=6;break}return t.abrupt("return",null);case 6:return i=n[0][0],t.next=9,u({refUid:e});case 9:return a=t.sent,o=null===(r=i.children)||void 0===r?void 0:r.sort((function(t,e){return t.order-e.order})),t.abrupt("return",{string:i.string,children:null==o?void 0:o.map((function(t){return t.string})),childrenUids:null==o?void 0:o.map((function(t){return t.uid})),breadcrumbs:a,refUid:e});case 14:return t.prev=14,t.t0=t.catch(0),console.warn("获取块信息失败 ".concat(e,":"),t.t0),t.abrupt("return",null);case 18:case"end":return t.stop()}}),t,null,[[0,14]])})));return function(e){return t.apply(this,arguments)}}(),f=function(t){var e=window.roamAlphaAPI.q("[\n  :find ?uid :in $ ?title\n  :where\n    [?page :node/title ?title]\n    [?page :block/uid ?uid]\n]",t);if(e.length)return e[0][0]},p=function(){var t=c(s().mark((function t(e){var r,n;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(r=f(e))){t.next=3;break}return t.abrupt("return",r);case 3:return n=window.roamAlphaAPI.util.generateUID(),t.next=6,window.roamAlphaAPI.data.page.create({page:{title:e,uid:n}});case 6:return t.abrupt("return",f(e));case 7:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),d=function(t,e){var r=window.roamAlphaAPI.q("\n    [:find ?block_uid\n     :in $ ?page_title ?block_string\n     :where\n     [?page :node/title ?page_title]\n     [?page :block/uid ?page_uid]\n     [?block :block/parents ?page]\n     [?block :block/string ?block_string]\n     [?block :block/uid ?block_uid]\n    ]",t,e);if(r.length)return r[0][0]},m=function(t,e){var r=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{exactMatch:!0}).exactMatch?"\n    [:find ?block_uid\n    :in $ ?parent_uid ?block_string\n    :where\n      [?parent :block/uid ?parent_uid]\n      [?block :block/parents ?parent]\n      [?block :block/string ?block_string]\n      [?block :block/uid ?block_uid]\n    ]\n  ":"\n    [:find ?block_uid\n      :in $ ?parent_uid ?block_sub_string\n      :where\n        [?parent :block/uid ?parent_uid]\n        [?block :block/parents ?parent]\n        [?block :block/string ?block_string]\n        [(clojure.string/starts-with? ?block_string ?block_sub_string)]\n        [?block :block/uid ?block_uid]\n    ]\n  ",n=window.roamAlphaAPI.q(r,t,e);if(n.length)return n[0][0]},y=function(t){var e=window.roamAlphaAPI.q("[\n  :find (pull ?tagPage [\n    :block/uid\n    :block/string\n    :block/children\n    {:block/children ...}])\n  :in $ ?tag\n  :where\n    [?tagPage :node/title ?tag]\n    [?tagPage :block/children ?tagPageChildren]\n  ]",t);return e.length?e:[]},v=function(t){try{var e=window.roamAlphaAPI.q("[\n  :find (pull ?child [\n    :block/uid\n    :block/string\n    :block/order])\n  :in $ ?parent_uid\n  :where\n    [?parent :block/uid ?parent_uid]\n    [?parent :block/children ?child]\n  ]",t);return e.length?e.map((function(t){return t[0]})).sort((function(t,e){return t.order-e.order})):[]}catch(t){return console.error("getChildBlocksByUid 失败:",t),[]}},g=function(){var t=c(s().mark((function t(e,r,n){var i,a,l=arguments;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=l.length>3&&void 0!==l[3]?l[3]:{},n||(n=0),a=window.roamAlphaAPI.util.generateUID(),t.next=5,window.roamAlphaAPI.createBlock({location:{"parent-uid":e,order:n},block:o({string:r,uid:a},i)});case 5:return t.abrupt("return",a);case 6:case"end":return t.stop()}}),t)})));return function(e,r,n){return t.apply(this,arguments)}}(),b=function(){var t=c(s().mark((function t(e,r,n,i){var a;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return a=f(e),t.abrupt("return",g(a,r,n,i));case 2:case"end":return t.stop()}}),t)})));return function(e,r,n,i){return t.apply(this,arguments)}}(),x=function(){var t=c(s().mark((function t(e,r,n,i){var a;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(a=d(e,r))){t.next=3;break}return t.abrupt("return",a);case 3:return t.abrupt("return",b(e,r,n,i));case 4:case"end":return t.stop()}}),t)})));return function(e,r,n,i){return t.apply(this,arguments)}}(),w=function(){var t=c(s().mark((function t(e,r,n,i){var a;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(a=m(e,r))){t.next=3;break}return t.abrupt("return",a);case 3:return t.abrupt("return",g(e,r,n,i));case 4:case"end":return t.stop()}}),t)})));return function(e,r,n,i){return t.apply(this,arguments)}}(),E=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.reviewMode,r=void 0===e?n.Z.FixedInterval:e,i=t.dateCreated,a=void 0===i?void 0:i,o=t.isNew,s=void 0===o||o;return r===n.Z.DefaultSpacedInterval?{dateCreated:a||new Date,eFactor:2.5,interval:0,repetitions:0,isNew:s,reviewMode:r}:{dateCreated:a||new Date,intervalMultiplier:3,intervalMultiplierType:n.D.Days,isNew:s,reviewMode:r}}},8825:(t,e,r)=>{r.d(e,{$P:()=>p,YM:()=>u,fi:()=>c,kM:()=>h,ro:()=>f});var n=r(4353),i=r.n(n),a=r(6279),o=r.n(a),s=r(8720),l=r.n(s);i().extend(o()),i().extend(l());var c=function(t,e){var r=new Date(t);return r.setDate(r.getDate()+e),r},u=function(t,e){var r=t,n=e;return Math.floor(Math.abs((r-n)/864e5))},h=function(t){var e=u(new Date,t);return e>-7&&e<7?i()(t).calendar(null,{sameDay:"[Today]",nextDay:"[Tomorrow]",nextWeek:"dddd",lastDay:"[Yesterday]",lastWeek:"[Last] dddd"}):function(t){return i()(t).fromNow()}(t)},f=function(t,e){return!(!p(t)||!p(e))&&t.toDateString()===e.toDateString()},p=function(t){return t&&"[object Date]"===Object.prototype.toString.call(t)&&!isNaN(t)}},8667:(t,e,r)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,o(n.key),n)}}function a(t,e,r){return(e=o(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t){var e=function(t,e){if("object"!=n(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var i=r.call(t,"string");if("object"!=n(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==n(e)?e:String(e)}r.r(e),r.d(e,{default:()=>c,roamFocusManager:()=>l});var s=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),a(this,"blurEventHandler",null),a(this,"isActive",!1),a(this,"initCheckInterval",null),a(this,"ROAM_EDITABLE_SELECTOR",'input, textarea, [contenteditable="true"], .rm-block__input.roam-block')}var e,r,n;return e=t,n=[{key:"getInstance",value:function(){return t.instance||(t.instance=new t),t.instance}}],(r=[{key:"activateFocusProtection",value:function(){var t=this;this.isActive||(this.blurEventHandler=function(e){var r=e.target;r&&r.matches&&r.matches(t.ROAM_EDITABLE_SELECTOR)&&(e.preventDefault(),e.stopPropagation())},document.addEventListener("blur",this.blurEventHandler,!0),this.isActive=!0,this.waitForRoamInitialization())}},{key:"deactivateFocusProtection",value:function(){this.isActive&&(this.blurEventHandler&&(document.removeEventListener("blur",this.blurEventHandler,!0),this.blurEventHandler=null),this.initCheckInterval&&(clearInterval(this.initCheckInterval),this.initCheckInterval=null),this.isActive=!1)}},{key:"isFocusProtectionActive",value:function(){return this.isActive}},{key:"toggleFocusProtection",value:function(){this.isActive?this.deactivateFocusProtection():this.activateFocusProtection()}},{key:"waitForRoamInitialization",value:function(){var t=this;this.initCheckInterval=window.setInterval((function(){var e=document.querySelector(".roam-app"),r=document.querySelector(".roam-main");e&&r&&t.initCheckInterval&&(clearInterval(t.initCheckInterval),t.initCheckInterval=null)}),500)}},{key:"forceCleanup",value:function(){this.deactivateFocusProtection(),this.blurEventHandler&&(document.removeEventListener("blur",this.blurEventHandler,!0),document.removeEventListener("blur",this.blurEventHandler,!1),this.blurEventHandler=null)}}])&&i(e.prototype,r),n&&i(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),l=s.getInstance();const c=s},1419:(t,e,r)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,o(n.key),n)}}function a(t,e,r){return(e=o(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t){var e=function(t,e){if("object"!=n(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var i=r.call(t,"string");if("object"!=n(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==n(e)?e:String(e)}r.r(e),r.d(e,{default:()=>c,roamZIndexManager:()=>l});var s=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),a(this,"styleElement",null),a(this,"STYLE_ID","roam-memo-zindex-fix")}var e,r,n;return e=t,n=[{key:"getInstance",value:function(){return t.instance||(t.instance=new t),t.instance}}],(r=[{key:"injectZIndexFix",value:function(){this.styleElement||(this.styleElement=document.createElement("style"),this.styleElement.id=this.STYLE_ID,this.styleElement.type="text/css",this.styleElement.textContent="\n      /*\n       * Roam Research 图片悬浮窗口的层级提升\n       * 解决被 Memo 插件遮挡的问题\n       */\n      \n      /* 提升 Roam 图片浮层的 Z-index */\n      #rm-modal-portal {\n        z-index: 1002 !important; /* Roam 图片浮层整体的 z-index，最高 */\n      }\n      \n      #rm-modal-portal > div > div > div.bp3-dialog-container.bp3-overlay-content > div {\n        z-index: 1001 !important; /* 确保图片实际内容也高 */\n      }\n      \n      /* 提升 Roam 双链弹出菜单的 Z-index */\n      .rm-autocomplete__results {\n        z-index: 1000 !important; /* 使用一个非常高的值，确保显示在所有其他元素之上 */\n        width: auto !important; /* 调整为自适应宽度 */\n        max-width: unset !important; /* 取消最大宽度限制 */\n        min-width: 150px !important; /* 设置最小宽度，防止过窄 */\n      }\n      \n             /* 提升其他可能被遮挡的 Roam UI 元素 */\n       .bp3-popover {\n         z-index: 999 !important;\n       }\n       \n       .bp3-tooltip {\n         z-index: 998 !important;\n       }\n    ",document.head.appendChild(this.styleElement))}},{key:"removeZIndexFix",value:function(){this.styleElement&&(document.head.removeChild(this.styleElement),this.styleElement=null)}},{key:"isFixActive",value:function(){return null!==this.styleElement}},{key:"toggleZIndexFix",value:function(){this.isFixActive()?this.removeZIndexFix():this.injectZIndexFix()}}])&&i(e.prototype,r),n&&i(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),l=s.getInstance();const c=s},1828:(t,e,r)=>{r.d(e,{CO:()=>i,fU:()=>o,kf:()=>l,m7:()=>n,td:()=>s,wF:()=>a});var n=function(t,e,r){return t.substring(t.indexOf(e)+e.length,t.lastIndexOf(r))},i=function(t){return window.roamAlphaAPI.util.pageTitleToDate(t.trim())},a=function(t){return window.roamAlphaAPI.util.dateToPageTitle(t)},o=function(t){return t.split("::").map((function(t){return t.trim()}))},s=function(t,e,r){return 1===t?e:r},l=function(t){return"string"==typeof t&&!isNaN(t)&&!isNaN(parseFloat(t))}},3193:(t,e,r)=>{t.exports={default:r(4734),__esModule:!0}},1156:(t,e,r)=>{t.exports={default:r(8271),__esModule:!0}},9829:(t,e,r)=>{t.exports={default:r(2696),__esModule:!0}},6007:(t,e,r)=>{t.exports={default:r(2160),__esModule:!0}},5971:(t,e,r)=>{t.exports={default:r(1724),__esModule:!0}},5522:(t,e,r)=>{t.exports={default:r(6560),__esModule:!0}},6327:(t,e,r)=>{t.exports={default:r(4220),__esModule:!0}},9506:(t,e)=>{e.__esModule=!0,e.default=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},7588:(t,e,r)=>{e.__esModule=!0;var n,i=(n=r(9829))&&n.__esModule?n:{default:n};e.default=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),(0,i.default)(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}()},5505:(t,e,r)=>{e.__esModule=!0;var n,i=(n=r(3193))&&n.__esModule?n:{default:n};e.default=i.default||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t}},7714:(t,e,r)=>{e.__esModule=!0;var n=o(r(5971)),i=o(r(1156)),a=o(r(7479));function o(t){return t&&t.__esModule?t:{default:t}}e.default=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+(void 0===e?"undefined":(0,a.default)(e)));t.prototype=(0,i.default)(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(n.default?(0,n.default)(t,e):t.__proto__=e)}},539:(t,e,r)=>{e.__esModule=!0;var n,i=(n=r(7479))&&n.__esModule?n:{default:n};e.default=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!==(void 0===e?"undefined":(0,i.default)(e))&&"function"!=typeof e?t:e}},7479:(t,e,r)=>{e.__esModule=!0;var n=o(r(6327)),i=o(r(5522)),a="function"==typeof i.default&&"symbol"==typeof n.default?function(t){return typeof t}:function(t){return t&&"function"==typeof i.default&&t.constructor===i.default&&t!==i.default.prototype?"symbol":typeof t};function o(t){return t&&t.__esModule?t:{default:t}}e.default="function"==typeof i.default&&"symbol"===a(n.default)?function(t){return void 0===t?"undefined":a(t)}:function(t){return t&&"function"==typeof i.default&&t.constructor===i.default&&t!==i.default.prototype?"symbol":void 0===t?"undefined":a(t)}},4734:(t,e,r)=>{r(3758),t.exports=r(6438).Object.assign},8271:(t,e,r)=>{r(1951);var n=r(6438).Object;t.exports=function(t,e){return n.create(t,e)}},2696:(t,e,r)=>{r(4712);var n=r(6438).Object;t.exports=function(t,e,r){return n.defineProperty(t,e,r)}},2160:(t,e,r)=>{r(8128),t.exports=r(6438).Object.getPrototypeOf},1724:(t,e,r)=>{r(4284),t.exports=r(6438).Object.setPrototypeOf},6560:(t,e,r)=>{r(9626),r(8978),r(2860),r(716),t.exports=r(6438).Symbol},4220:(t,e,r)=>{r(7863),r(7914),t.exports=r(4336).f("iterator")},5219:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},2560:t=>{t.exports=function(){}},812:(t,e,r)=>{var n=r(4401);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},4448:(t,e,r)=>{var n=r(5133),i=r(181),a=r(2917);t.exports=function(t){return function(e,r,o){var s,l=n(e),c=i(l.length),u=a(o,c);if(t&&r!=r){for(;c>u;)if((s=l[u++])!=s)return!0}else for(;c>u;u++)if((t||u in l)&&l[u]===r)return t||u||0;return!t&&-1}}},3417:t=>{var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},6438:t=>{var e=t.exports={version:"2.6.12"};"number"==typeof __e&&(__e=e)},8852:(t,e,r)=>{var n=r(5219);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,i){return t.call(e,r,n,i)}}return function(){return t.apply(e,arguments)}}},7608:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},8219:(t,e,r)=>{t.exports=!r(1984)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},3802:(t,e,r)=>{var n=r(4401),i=r(6670).document,a=n(i)&&n(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},7956:t=>{t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},6473:(t,e,r)=>{var n=r(4311),i=r(9820),a=r(6569);t.exports=function(t){var e=n(t),r=i.f;if(r)for(var o,s=r(t),l=a.f,c=0;s.length>c;)l.call(t,o=s[c++])&&e.push(o);return e}},8535:(t,e,r)=>{var n=r(6670),i=r(6438),a=r(8852),o=r(2677),s=r(5509),l="prototype",c=function(t,e,r){var u,h,f,p=t&c.F,d=t&c.G,m=t&c.S,y=t&c.P,v=t&c.B,g=t&c.W,b=d?i:i[e]||(i[e]={}),x=b[l],w=d?n:m?n[e]:(n[e]||{})[l];for(u in d&&(r=e),r)(h=!p&&w&&void 0!==w[u])&&s(b,u)||(f=h?w[u]:r[u],b[u]=d&&"function"!=typeof w[u]?r[u]:v&&h?a(f,n):g&&w[u]==f?function(t){var e=function(e,r,n){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,r)}return new t(e,r,n)}return t.apply(this,arguments)};return e[l]=t[l],e}(f):y&&"function"==typeof f?a(Function.call,f):f,y&&((b.virtual||(b.virtual={}))[u]=f,t&c.R&&x&&!x[u]&&o(x,u,f)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},1984:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},6670:t=>{var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},5509:t=>{var e={}.hasOwnProperty;t.exports=function(t,r){return e.call(t,r)}},2677:(t,e,r)=>{var n=r(8423),i=r(6260);t.exports=r(8219)?function(t,e,r){return n.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},3879:(t,e,r)=>{var n=r(6670).document;t.exports=n&&n.documentElement},2484:(t,e,r)=>{t.exports=!r(8219)&&!r(1984)((function(){return 7!=Object.defineProperty(r(3802)("div"),"a",{get:function(){return 7}}).a}))},7001:(t,e,r)=>{var n=r(3417);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},5461:(t,e,r)=>{var n=r(3417);t.exports=Array.isArray||function(t){return"Array"==n(t)}},4401:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},8248:(t,e,r)=>{var n=r(2087),i=r(6260),a=r(1356),o={};r(2677)(o,r(254)("iterator"),(function(){return this})),t.exports=function(t,e,r){t.prototype=n(o,{next:i(1,r)}),a(t,e+" Iterator")}},8839:(t,e,r)=>{var n=r(4742),i=r(8535),a=r(1331),o=r(2677),s=r(210),l=r(8248),c=r(1356),u=r(6123),h=r(254)("iterator"),f=!([].keys&&"next"in[].keys()),p="keys",d="values",m=function(){return this};t.exports=function(t,e,r,y,v,g,b){l(r,e,y);var x,w,E,k=function(t){if(!f&&t in C)return C[t];switch(t){case p:case d:return function(){return new r(this,t)}}return function(){return new r(this,t)}},S=e+" Iterator",_=v==d,P=!1,C=t.prototype,A=C[h]||C["@@iterator"]||v&&C[v],T=A||k(v),M=v?_?k("entries"):T:void 0,D="Array"==e&&C.entries||A;if(D&&(E=u(D.call(new t)))!==Object.prototype&&E.next&&(c(E,S,!0),n||"function"==typeof E[h]||o(E,h,m)),_&&A&&A.name!==d&&(P=!0,T=function(){return A.call(this)}),n&&!b||!f&&!P&&C[h]||o(C,h,T),s[e]=T,s[S]=m,v)if(x={values:_?T:k(d),keys:g?T:k(p),entries:M},b)for(w in x)w in C||a(C,w,x[w]);else i(i.P+i.F*(f||P),e,x);return x}},322:t=>{t.exports=function(t,e){return{value:e,done:!!t}}},210:t=>{t.exports={}},4742:t=>{t.exports=!0},5172:(t,e,r)=>{var n=r(9191)("meta"),i=r(4401),a=r(5509),o=r(8423).f,s=0,l=Object.isExtensible||function(){return!0},c=!r(1984)((function(){return l(Object.preventExtensions({}))})),u=function(t){o(t,n,{value:{i:"O"+ ++s,w:{}}})},h=t.exports={KEY:n,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!a(t,n)){if(!l(t))return"F";if(!e)return"E";u(t)}return t[n].i},getWeak:function(t,e){if(!a(t,n)){if(!l(t))return!0;if(!e)return!1;u(t)}return t[n].w},onFreeze:function(t){return c&&h.NEED&&l(t)&&!a(t,n)&&u(t),t}}},6854:(t,e,r)=>{var n=r(8219),i=r(4311),a=r(9820),o=r(6569),s=r(6310),l=r(7001),c=Object.assign;t.exports=!c||r(1984)((function(){var t={},e={},r=Symbol(),n="abcdefghijklmnopqrst";return t[r]=7,n.split("").forEach((function(t){e[t]=t})),7!=c({},t)[r]||Object.keys(c({},e)).join("")!=n}))?function(t,e){for(var r=s(t),c=arguments.length,u=1,h=a.f,f=o.f;c>u;)for(var p,d=l(arguments[u++]),m=h?i(d).concat(h(d)):i(d),y=m.length,v=0;y>v;)p=m[v++],n&&!f.call(d,p)||(r[p]=d[p]);return r}:c},2087:(t,e,r)=>{var n=r(812),i=r(82),a=r(7956),o=r(4566)("IE_PROTO"),s=function(){},l="prototype",c=function(){var t,e=r(3802)("iframe"),n=a.length;for(e.style.display="none",r(3879).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;n--;)delete c[l][a[n]];return c()};t.exports=Object.create||function(t,e){var r;return null!==t?(s[l]=n(t),r=new s,s[l]=null,r[o]=t):r=c(),void 0===e?r:i(r,e)}},8423:(t,e,r)=>{var n=r(812),i=r(2484),a=r(752),o=Object.defineProperty;e.f=r(8219)?Object.defineProperty:function(t,e,r){if(n(t),e=a(e,!0),n(r),i)try{return o(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[e]=r.value),t}},82:(t,e,r)=>{var n=r(8423),i=r(812),a=r(4311);t.exports=r(8219)?Object.defineProperties:function(t,e){i(t);for(var r,o=a(e),s=o.length,l=0;s>l;)n.f(t,r=o[l++],e[r]);return t}},1033:(t,e,r)=>{var n=r(6569),i=r(6260),a=r(5133),o=r(752),s=r(5509),l=r(2484),c=Object.getOwnPropertyDescriptor;e.f=r(8219)?c:function(t,e){if(t=a(t),e=o(e,!0),l)try{return c(t,e)}catch(t){}if(s(t,e))return i(!n.f.call(t,e),t[e])}},6309:(t,e,r)=>{var n=r(5133),i=r(1743).f,a={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return o&&"[object Window]"==a.call(t)?function(t){try{return i(t)}catch(t){return o.slice()}}(t):i(n(t))}},1743:(t,e,r)=>{var n=r(5081),i=r(7956).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,i)}},9820:(t,e)=>{e.f=Object.getOwnPropertySymbols},6123:(t,e,r)=>{var n=r(5509),i=r(6310),a=r(4566)("IE_PROTO"),o=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),n(t,a)?t[a]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?o:null}},5081:(t,e,r)=>{var n=r(5509),i=r(5133),a=r(4448)(!1),o=r(4566)("IE_PROTO");t.exports=function(t,e){var r,s=i(t),l=0,c=[];for(r in s)r!=o&&n(s,r)&&c.push(r);for(;e.length>l;)n(s,r=e[l++])&&(~a(c,r)||c.push(r));return c}},4311:(t,e,r)=>{var n=r(5081),i=r(7956);t.exports=Object.keys||function(t){return n(t,i)}},6569:(t,e)=>{e.f={}.propertyIsEnumerable},7331:(t,e,r)=>{var n=r(8535),i=r(6438),a=r(1984);t.exports=function(t,e){var r=(i.Object||{})[t]||Object[t],o={};o[t]=e(r),n(n.S+n.F*a((function(){r(1)})),"Object",o)}},6260:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},1331:(t,e,r)=>{t.exports=r(2677)},2074:(t,e,r)=>{var n=r(4401),i=r(812),a=function(t,e){if(i(t),!n(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,n){try{(n=r(8852)(Function.call,r(1033).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,r){return a(t,r),e?t.__proto__=r:n(t,r),t}}({},!1):void 0),check:a}},1356:(t,e,r)=>{var n=r(8423).f,i=r(5509),a=r(254)("toStringTag");t.exports=function(t,e,r){t&&!i(t=r?t:t.prototype,a)&&n(t,a,{configurable:!0,value:e})}},4566:(t,e,r)=>{var n=r(6308)("keys"),i=r(9191);t.exports=function(t){return n[t]||(n[t]=i(t))}},6308:(t,e,r)=>{var n=r(6438),i=r(6670),a="__core-js_shared__",o=i[a]||(i[a]={});(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:n.version,mode:r(4742)?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},3172:(t,e,r)=>{var n=r(9383),i=r(7608);t.exports=function(t){return function(e,r){var a,o,s=String(i(e)),l=n(r),c=s.length;return l<0||l>=c?t?"":void 0:(a=s.charCodeAt(l))<55296||a>56319||l+1===c||(o=s.charCodeAt(l+1))<56320||o>57343?t?s.charAt(l):a:t?s.slice(l,l+2):o-56320+(a-55296<<10)+65536}}},2917:(t,e,r)=>{var n=r(9383),i=Math.max,a=Math.min;t.exports=function(t,e){return(t=n(t))<0?i(t+e,0):a(t,e)}},9383:t=>{var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},5133:(t,e,r)=>{var n=r(7001),i=r(7608);t.exports=function(t){return n(i(t))}},181:(t,e,r)=>{var n=r(9383),i=Math.min;t.exports=function(t){return t>0?i(n(t),9007199254740991):0}},6310:(t,e,r)=>{var n=r(7608);t.exports=function(t){return Object(n(t))}},752:(t,e,r)=>{var n=r(4401);t.exports=function(t,e){if(!n(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!n(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},9191:t=>{var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},7816:(t,e,r)=>{var n=r(6670),i=r(6438),a=r(4742),o=r(4336),s=r(8423).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=a?{}:n.Symbol||{});"_"==t.charAt(0)||t in e||s(e,t,{value:o.f(t)})}},4336:(t,e,r)=>{e.f=r(254)},254:(t,e,r)=>{var n=r(6308)("wks"),i=r(9191),a=r(6670).Symbol,o="function"==typeof a;(t.exports=function(t){return n[t]||(n[t]=o&&a[t]||(o?a:i)("Symbol."+t))}).store=n},2293:(t,e,r)=>{var n=r(2560),i=r(322),a=r(210),o=r(5133);t.exports=r(8839)(Array,"Array",(function(t,e){this._t=o(t),this._i=0,this._k=e}),(function(){var t=this._t,e=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?r:"values"==e?t[r]:[r,t[r]])}),"values"),a.Arguments=a.Array,n("keys"),n("values"),n("entries")},3758:(t,e,r)=>{var n=r(8535);n(n.S+n.F,"Object",{assign:r(6854)})},1951:(t,e,r)=>{var n=r(8535);n(n.S,"Object",{create:r(2087)})},4712:(t,e,r)=>{var n=r(8535);n(n.S+n.F*!r(8219),"Object",{defineProperty:r(8423).f})},8128:(t,e,r)=>{var n=r(6310),i=r(6123);r(7331)("getPrototypeOf",(function(){return function(t){return i(n(t))}}))},4284:(t,e,r)=>{var n=r(8535);n(n.S,"Object",{setPrototypeOf:r(2074).set})},8978:()=>{},7863:(t,e,r)=>{var n=r(3172)(!0);r(8839)(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,e=this._t,r=this._i;return r>=e.length?{value:void 0,done:!0}:(t=n(e,r),this._i+=t.length,{value:t,done:!1})}))},9626:(t,e,r)=>{var n=r(6670),i=r(5509),a=r(8219),o=r(8535),s=r(1331),l=r(5172).KEY,c=r(1984),u=r(6308),h=r(1356),f=r(9191),p=r(254),d=r(4336),m=r(7816),y=r(6473),v=r(5461),g=r(812),b=r(4401),x=r(6310),w=r(5133),E=r(752),k=r(6260),S=r(2087),_=r(6309),P=r(1033),C=r(9820),A=r(8423),T=r(4311),M=P.f,D=A.f,L=_.f,O=n.Symbol,F=n.JSON,I=F&&F.stringify,j="prototype",N=p("_hidden"),B=p("toPrimitive"),R={}.propertyIsEnumerable,G=u("symbol-registry"),V=u("symbols"),z=u("op-symbols"),H=Object[j],$="function"==typeof O&&!!C.f,U=n.QObject,q=!U||!U[j]||!U[j].findChild,W=a&&c((function(){return 7!=S(D({},"a",{get:function(){return D(this,"a",{value:7}).a}})).a}))?function(t,e,r){var n=M(H,e);n&&delete H[e],D(t,e,r),n&&t!==H&&D(H,e,n)}:D,Y=function(t){var e=V[t]=S(O[j]);return e._k=t,e},X=$&&"symbol"==typeof O.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof O},Z=function(t,e,r){return t===H&&Z(z,e,r),g(t),e=E(e,!0),g(r),i(V,e)?(r.enumerable?(i(t,N)&&t[N][e]&&(t[N][e]=!1),r=S(r,{enumerable:k(0,!1)})):(i(t,N)||D(t,N,k(1,{})),t[N][e]=!0),W(t,e,r)):D(t,e,r)},J=function(t,e){g(t);for(var r,n=y(e=w(e)),i=0,a=n.length;a>i;)Z(t,r=n[i++],e[r]);return t},K=function(t){var e=R.call(this,t=E(t,!0));return!(this===H&&i(V,t)&&!i(z,t))&&(!(e||!i(this,t)||!i(V,t)||i(this,N)&&this[N][t])||e)},Q=function(t,e){if(t=w(t),e=E(e,!0),t!==H||!i(V,e)||i(z,e)){var r=M(t,e);return!r||!i(V,e)||i(t,N)&&t[N][e]||(r.enumerable=!0),r}},tt=function(t){for(var e,r=L(w(t)),n=[],a=0;r.length>a;)i(V,e=r[a++])||e==N||e==l||n.push(e);return n},et=function(t){for(var e,r=t===H,n=L(r?z:w(t)),a=[],o=0;n.length>o;)!i(V,e=n[o++])||r&&!i(H,e)||a.push(V[e]);return a};$||(s((O=function(){if(this instanceof O)throw TypeError("Symbol is not a constructor!");var t=f(arguments.length>0?arguments[0]:void 0),e=function(r){this===H&&e.call(z,r),i(this,N)&&i(this[N],t)&&(this[N][t]=!1),W(this,t,k(1,r))};return a&&q&&W(H,t,{configurable:!0,set:e}),Y(t)})[j],"toString",(function(){return this._k})),P.f=Q,A.f=Z,r(1743).f=_.f=tt,r(6569).f=K,C.f=et,a&&!r(4742)&&s(H,"propertyIsEnumerable",K,!0),d.f=function(t){return Y(p(t))}),o(o.G+o.W+o.F*!$,{Symbol:O});for(var rt="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),nt=0;rt.length>nt;)p(rt[nt++]);for(var it=T(p.store),at=0;it.length>at;)m(it[at++]);o(o.S+o.F*!$,"Symbol",{for:function(t){return i(G,t+="")?G[t]:G[t]=O(t)},keyFor:function(t){if(!X(t))throw TypeError(t+" is not a symbol!");for(var e in G)if(G[e]===t)return e},useSetter:function(){q=!0},useSimple:function(){q=!1}}),o(o.S+o.F*!$,"Object",{create:function(t,e){return void 0===e?S(t):J(S(t),e)},defineProperty:Z,defineProperties:J,getOwnPropertyDescriptor:Q,getOwnPropertyNames:tt,getOwnPropertySymbols:et});var ot=c((function(){C.f(1)}));o(o.S+o.F*ot,"Object",{getOwnPropertySymbols:function(t){return C.f(x(t))}}),F&&o(o.S+o.F*(!$||c((function(){var t=O();return"[null]"!=I([t])||"{}"!=I({a:t})||"{}"!=I(Object(t))}))),"JSON",{stringify:function(t){for(var e,r,n=[t],i=1;arguments.length>i;)n.push(arguments[i++]);if(r=e=n[1],(b(e)||void 0!==t)&&!X(t))return v(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!X(e))return e}),n[1]=e,I.apply(F,n)}}),O[j][B]||r(2677)(O[j],B,O[j].valueOf),h(O,"Symbol"),h(Math,"Math",!0),h(n.JSON,"JSON",!0)},2860:(t,e,r)=>{r(7816)("asyncIterator")},716:(t,e,r)=>{r(7816)("observable")},7914:(t,e,r)=>{r(2293);for(var n=r(6670),i=r(2677),a=r(210),o=r(254)("toStringTag"),s="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),l=0;l<s.length;l++){var c=s[l],u=n[c],h=u&&u.prototype;h&&!h[o]&&i(h,o,c),a[c]=a.Array}},4353:function(t){t.exports=function(){var t=6e4,e=36e5,r="millisecond",n="second",i="minute",a="hour",o="day",s="week",l="month",c="quarter",u="year",h="date",f="Invalid Date",p=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,d=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,m={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(t){var e=["th","st","nd","rd"],r=t%100;return"["+t+(e[(r-20)%10]||e[r]||e[0])+"]"}},y=function(t,e,r){var n=String(t);return!n||n.length>=e?t:""+Array(e+1-n.length).join(r)+t},v={s:y,z:function(t){var e=-t.utcOffset(),r=Math.abs(e),n=Math.floor(r/60),i=r%60;return(e<=0?"+":"-")+y(n,2,"0")+":"+y(i,2,"0")},m:function t(e,r){if(e.date()<r.date())return-t(r,e);var n=12*(r.year()-e.year())+(r.month()-e.month()),i=e.clone().add(n,l),a=r-i<0,o=e.clone().add(n+(a?-1:1),l);return+(-(n+(r-i)/(a?i-o:o-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:l,y:u,w:s,d:o,D:h,h:a,m:i,s:n,ms:r,Q:c}[t]||String(t||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},g="en",b={};b[g]=m;var x="$isDayjsObject",w=function(t){return t instanceof _||!(!t||!t[x])},E=function t(e,r,n){var i;if(!e)return g;if("string"==typeof e){var a=e.toLowerCase();b[a]&&(i=a),r&&(b[a]=r,i=a);var o=e.split("-");if(!i&&o.length>1)return t(o[0])}else{var s=e.name;b[s]=e,i=s}return!n&&i&&(g=i),i||!n&&g},k=function(t,e){if(w(t))return t.clone();var r="object"==typeof e?e:{};return r.date=t,r.args=arguments,new _(r)},S=v;S.l=E,S.i=w,S.w=function(t,e){return k(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function m(t){this.$L=E(t.locale,null,!0),this.parse(t),this.$x=this.$x||t.x||{},this[x]=!0}var y=m.prototype;return y.parse=function(t){this.$d=function(t){var e=t.date,r=t.utc;if(null===e)return new Date(NaN);if(S.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var n=e.match(p);if(n){var i=n[2]-1||0,a=(n[7]||"0").substring(0,3);return r?new Date(Date.UTC(n[1],i,n[3]||1,n[4]||0,n[5]||0,n[6]||0,a)):new Date(n[1],i,n[3]||1,n[4]||0,n[5]||0,n[6]||0,a)}}return new Date(e)}(t),this.init()},y.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},y.$utils=function(){return S},y.isValid=function(){return!(this.$d.toString()===f)},y.isSame=function(t,e){var r=k(t);return this.startOf(e)<=r&&r<=this.endOf(e)},y.isAfter=function(t,e){return k(t)<this.startOf(e)},y.isBefore=function(t,e){return this.endOf(e)<k(t)},y.$g=function(t,e,r){return S.u(t)?this[e]:this.set(r,t)},y.unix=function(){return Math.floor(this.valueOf()/1e3)},y.valueOf=function(){return this.$d.getTime()},y.startOf=function(t,e){var r=this,c=!!S.u(e)||e,f=S.p(t),p=function(t,e){var n=S.w(r.$u?Date.UTC(r.$y,e,t):new Date(r.$y,e,t),r);return c?n:n.endOf(o)},d=function(t,e){return S.w(r.toDate()[t].apply(r.toDate("s"),(c?[0,0,0,0]:[23,59,59,999]).slice(e)),r)},m=this.$W,y=this.$M,v=this.$D,g="set"+(this.$u?"UTC":"");switch(f){case u:return c?p(1,0):p(31,11);case l:return c?p(1,y):p(0,y+1);case s:var b=this.$locale().weekStart||0,x=(m<b?m+7:m)-b;return p(c?v-x:v+(6-x),y);case o:case h:return d(g+"Hours",0);case a:return d(g+"Minutes",1);case i:return d(g+"Seconds",2);case n:return d(g+"Milliseconds",3);default:return this.clone()}},y.endOf=function(t){return this.startOf(t,!1)},y.$set=function(t,e){var s,c=S.p(t),f="set"+(this.$u?"UTC":""),p=(s={},s[o]=f+"Date",s[h]=f+"Date",s[l]=f+"Month",s[u]=f+"FullYear",s[a]=f+"Hours",s[i]=f+"Minutes",s[n]=f+"Seconds",s[r]=f+"Milliseconds",s)[c],d=c===o?this.$D+(e-this.$W):e;if(c===l||c===u){var m=this.clone().set(h,1);m.$d[p](d),m.init(),this.$d=m.set(h,Math.min(this.$D,m.daysInMonth())).$d}else p&&this.$d[p](d);return this.init(),this},y.set=function(t,e){return this.clone().$set(t,e)},y.get=function(t){return this[S.p(t)]()},y.add=function(r,c){var h,f=this;r=Number(r);var p=S.p(c),d=function(t){var e=k(f);return S.w(e.date(e.date()+Math.round(t*r)),f)};if(p===l)return this.set(l,this.$M+r);if(p===u)return this.set(u,this.$y+r);if(p===o)return d(1);if(p===s)return d(7);var m=(h={},h[i]=t,h[a]=e,h[n]=1e3,h)[p]||1,y=this.$d.getTime()+r*m;return S.w(y,this)},y.subtract=function(t,e){return this.add(-1*t,e)},y.format=function(t){var e=this,r=this.$locale();if(!this.isValid())return r.invalidDate||f;var n=t||"YYYY-MM-DDTHH:mm:ssZ",i=S.z(this),a=this.$H,o=this.$m,s=this.$M,l=r.weekdays,c=r.months,u=r.meridiem,h=function(t,r,i,a){return t&&(t[r]||t(e,n))||i[r].slice(0,a)},p=function(t){return S.s(a%12||12,t,"0")},m=u||function(t,e,r){var n=t<12?"AM":"PM";return r?n.toLowerCase():n};return n.replace(d,(function(t,n){return n||function(t){switch(t){case"YY":return String(e.$y).slice(-2);case"YYYY":return S.s(e.$y,4,"0");case"M":return s+1;case"MM":return S.s(s+1,2,"0");case"MMM":return h(r.monthsShort,s,c,3);case"MMMM":return h(c,s);case"D":return e.$D;case"DD":return S.s(e.$D,2,"0");case"d":return String(e.$W);case"dd":return h(r.weekdaysMin,e.$W,l,2);case"ddd":return h(r.weekdaysShort,e.$W,l,3);case"dddd":return l[e.$W];case"H":return String(a);case"HH":return S.s(a,2,"0");case"h":return p(1);case"hh":return p(2);case"a":return m(a,o,!0);case"A":return m(a,o,!1);case"m":return String(o);case"mm":return S.s(o,2,"0");case"s":return String(e.$s);case"ss":return S.s(e.$s,2,"0");case"SSS":return S.s(e.$ms,3,"0");case"Z":return i}return null}(t)||i.replace(":","")}))},y.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},y.diff=function(r,h,f){var p,d=this,m=S.p(h),y=k(r),v=(y.utcOffset()-this.utcOffset())*t,g=this-y,b=function(){return S.m(d,y)};switch(m){case u:p=b()/12;break;case l:p=b();break;case c:p=b()/3;break;case s:p=(g-v)/6048e5;break;case o:p=(g-v)/864e5;break;case a:p=g/e;break;case i:p=g/t;break;case n:p=g/1e3;break;default:p=g}return f?p:S.a(p)},y.daysInMonth=function(){return this.endOf(l).$D},y.$locale=function(){return b[this.$L]},y.locale=function(t,e){if(!t)return this.$L;var r=this.clone(),n=E(t,e,!0);return n&&(r.$L=n),r},y.clone=function(){return S.w(this.$d,this)},y.toDate=function(){return new Date(this.valueOf())},y.toJSON=function(){return this.isValid()?this.toISOString():null},y.toISOString=function(){return this.$d.toISOString()},y.toString=function(){return this.$d.toUTCString()},m}(),P=_.prototype;return k.prototype=P,[["$ms",r],["$s",n],["$m",i],["$H",a],["$W",o],["$M",l],["$y",u],["$D",h]].forEach((function(t){P[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),k.extend=function(t,e){return t.$i||(t(e,_,k),t.$i=!0),k},k.locale=E,k.isDayjs=w,k.unix=function(t){return k(1e3*t)},k.en=b[g],k.Ls=b,k.p={},k}()},8720:function(t){t.exports=function(t,e,r){var n="h:mm A",i={lastDay:"[Yesterday at] "+n,sameDay:"[Today at] "+n,nextDay:"[Tomorrow at] "+n,nextWeek:"dddd [at] "+n,lastWeek:"[Last] dddd [at] "+n,sameElse:"MM/DD/YYYY"};e.prototype.calendar=function(t,e){var n=e||this.$locale().calendar||i,a=r(t||void 0).startOf("d"),o=this.diff(a,"d",!0),s="sameElse",l=o<-6?s:o<-1?"lastWeek":o<0?"lastDay":o<1?"sameDay":o<2?"nextDay":o<7?"nextWeek":s,c=n[l]||i[l];return"function"==typeof c?c.call(this,r()):this.format(c)}}},6279:function(t){t.exports=function(t,e,r){t=t||{};var n=e.prototype,i={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"};function a(t,e,r,i){return n.fromToBase(t,e,r,i)}r.en.relativeTime=i,n.fromToBase=function(e,n,a,o,s){for(var l,c,u,h=a.$locale().relativeTime||i,f=t.thresholds||[{l:"s",r:44,d:"second"},{l:"m",r:89},{l:"mm",r:44,d:"minute"},{l:"h",r:89},{l:"hh",r:21,d:"hour"},{l:"d",r:35},{l:"dd",r:25,d:"day"},{l:"M",r:45},{l:"MM",r:10,d:"month"},{l:"y",r:17},{l:"yy",d:"year"}],p=f.length,d=0;d<p;d+=1){var m=f[d];m.d&&(l=o?r(e).diff(a,m.d,!0):a.diff(e,m.d,!0));var y=(t.rounding||Math.round)(Math.abs(l));if(u=l>0,y<=m.r||!m.r){y<=1&&d>0&&(m=f[d-1]);var v=h[m.l];s&&(y=s(""+y)),c="string"==typeof v?v.replace("%d",y):v(y,n,m.l,u);break}}if(n)return c;var g=u?h.future:h.past;return"function"==typeof g?g(c):g.replace("%s",c)},n.to=function(t,e){return a(t,e,this,!0)},n.from=function(t,e){return a(t,e,this)};var o=function(t){return t.$u?r.utc():r()};n.toNow=function(t){return this.to(o(this),t)},n.fromNow=function(t){return this.from(o(this),t)}}},9891:function(module,exports,__webpack_require__){var factory;"undefined"!=typeof navigator&&(factory=function(){var svgNS="http://www.w3.org/2000/svg",locationHref="",_useWebWorker=!1,initialDefaultFrame=-999999,setWebWorker=function(t){_useWebWorker=!!t},getWebWorker=function(){return _useWebWorker},setLocationHref=function(t){locationHref=t},getLocationHref=function(){return locationHref};function createTag(t){return document.createElement(t)}function extendPrototype(t,e){var r,n,i=t.length;for(r=0;r<i;r+=1)for(var a in n=t[r].prototype)Object.prototype.hasOwnProperty.call(n,a)&&(e.prototype[a]=n[a])}function getDescriptor(t,e){return Object.getOwnPropertyDescriptor(t,e)}function createProxyFunction(t){function e(){}return e.prototype=t,e}var audioControllerFactory=function(){function t(t){this.audios=[],this.audioFactory=t,this._volume=1,this._isMuted=!1}return t.prototype={addAudio:function(t){this.audios.push(t)},pause:function(){var t,e=this.audios.length;for(t=0;t<e;t+=1)this.audios[t].pause()},resume:function(){var t,e=this.audios.length;for(t=0;t<e;t+=1)this.audios[t].resume()},setRate:function(t){var e,r=this.audios.length;for(e=0;e<r;e+=1)this.audios[e].setRate(t)},createAudio:function(t){return this.audioFactory?this.audioFactory(t):window.Howl?new window.Howl({src:[t]}):{isPlaying:!1,play:function(){this.isPlaying=!0},seek:function(){this.isPlaying=!1},playing:function(){},rate:function(){},setVolume:function(){}}},setAudioFactory:function(t){this.audioFactory=t},setVolume:function(t){this._volume=t,this._updateVolume()},mute:function(){this._isMuted=!0,this._updateVolume()},unmute:function(){this._isMuted=!1,this._updateVolume()},getVolume:function(){return this._volume},_updateVolume:function(){var t,e=this.audios.length;for(t=0;t<e;t+=1)this.audios[t].volume(this._volume*(this._isMuted?0:1))}},function(){return new t}}(),createTypedArray=function(){function t(t,e){var r,n=0,i=[];switch(t){case"int16":case"uint8c":r=1;break;default:r=1.1}for(n=0;n<e;n+=1)i.push(r);return i}return"function"==typeof Uint8ClampedArray&&"function"==typeof Float32Array?function(e,r){return"float32"===e?new Float32Array(r):"int16"===e?new Int16Array(r):"uint8c"===e?new Uint8ClampedArray(r):t(e,r)}:t}();function createSizedArray(t){return Array.apply(null,{length:t})}function _typeof$6(t){return _typeof$6="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$6(t)}var subframeEnabled=!0,expressionsPlugin=null,expressionsInterfaces=null,idPrefix$1="",isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),_shouldRoundValues=!1,bmPow=Math.pow,bmSqrt=Math.sqrt,bmFloor=Math.floor,bmMax=Math.max,bmMin=Math.min,BMMath={};function ProjectInterface$1(){return{}}!function(){var t,e=["abs","acos","acosh","asin","asinh","atan","atanh","atan2","ceil","cbrt","expm1","clz32","cos","cosh","exp","floor","fround","hypot","imul","log","log1p","log2","log10","max","min","pow","random","round","sign","sin","sinh","sqrt","tan","tanh","trunc","E","LN10","LN2","LOG10E","LOG2E","PI","SQRT1_2","SQRT2"],r=e.length;for(t=0;t<r;t+=1)BMMath[e[t]]=Math[e[t]]}(),BMMath.random=Math.random,BMMath.abs=function(t){if("object"===_typeof$6(t)&&t.length){var e,r=createSizedArray(t.length),n=t.length;for(e=0;e<n;e+=1)r[e]=Math.abs(t[e]);return r}return Math.abs(t)};var defaultCurveSegments=150,degToRads=Math.PI/180,roundCorner=.5519;function roundValues(t){_shouldRoundValues=!!t}function bmRnd(t){return _shouldRoundValues?Math.round(t):t}function styleDiv(t){t.style.position="absolute",t.style.top=0,t.style.left=0,t.style.display="block",t.style.transformOrigin="0 0",t.style.webkitTransformOrigin="0 0",t.style.backfaceVisibility="visible",t.style.webkitBackfaceVisibility="visible",t.style.transformStyle="preserve-3d",t.style.webkitTransformStyle="preserve-3d",t.style.mozTransformStyle="preserve-3d"}function BMEnterFrameEvent(t,e,r,n){this.type=t,this.currentTime=e,this.totalTime=r,this.direction=n<0?-1:1}function BMCompleteEvent(t,e){this.type=t,this.direction=e<0?-1:1}function BMCompleteLoopEvent(t,e,r,n){this.type=t,this.currentLoop=r,this.totalLoops=e,this.direction=n<0?-1:1}function BMSegmentStartEvent(t,e,r){this.type=t,this.firstFrame=e,this.totalFrames=r}function BMDestroyEvent(t,e){this.type=t,this.target=e}function BMRenderFrameErrorEvent(t,e){this.type="renderFrameError",this.nativeError=t,this.currentTime=e}function BMConfigErrorEvent(t){this.type="configError",this.nativeError=t}function BMAnimationConfigErrorEvent(t,e){this.type=t,this.nativeError=e}var createElementID=(_count=0,function(){return idPrefix$1+"__lottie_element_"+(_count+=1)}),_count;function HSVtoRGB(t,e,r){var n,i,a,o,s,l,c,u;switch(l=r*(1-e),c=r*(1-(s=6*t-(o=Math.floor(6*t)))*e),u=r*(1-(1-s)*e),o%6){case 0:n=r,i=u,a=l;break;case 1:n=c,i=r,a=l;break;case 2:n=l,i=r,a=u;break;case 3:n=l,i=c,a=r;break;case 4:n=u,i=l,a=r;break;case 5:n=r,i=l,a=c}return[n,i,a]}function RGBtoHSV(t,e,r){var n,i=Math.max(t,e,r),a=Math.min(t,e,r),o=i-a,s=0===i?0:o/i,l=i/255;switch(i){case a:n=0;break;case t:n=e-r+o*(e<r?6:0),n/=6*o;break;case e:n=r-t+2*o,n/=6*o;break;case r:n=t-e+4*o,n/=6*o}return[n,s,l]}function addSaturationToRGB(t,e){var r=RGBtoHSV(255*t[0],255*t[1],255*t[2]);return r[1]+=e,r[1]>1?r[1]=1:r[1]<=0&&(r[1]=0),HSVtoRGB(r[0],r[1],r[2])}function addBrightnessToRGB(t,e){var r=RGBtoHSV(255*t[0],255*t[1],255*t[2]);return r[2]+=e,r[2]>1?r[2]=1:r[2]<0&&(r[2]=0),HSVtoRGB(r[0],r[1],r[2])}function addHueToRGB(t,e){var r=RGBtoHSV(255*t[0],255*t[1],255*t[2]);return r[0]+=e/360,r[0]>1?r[0]-=1:r[0]<0&&(r[0]+=1),HSVtoRGB(r[0],r[1],r[2])}var rgbToHex=function(){var t,e,r=[];for(t=0;t<256;t+=1)e=t.toString(16),r[t]=1===e.length?"0"+e:e;return function(t,e,n){return t<0&&(t=0),e<0&&(e=0),n<0&&(n=0),"#"+r[t]+r[e]+r[n]}}(),setSubframeEnabled=function(t){subframeEnabled=!!t},getSubframeEnabled=function(){return subframeEnabled},setExpressionsPlugin=function(t){expressionsPlugin=t},getExpressionsPlugin=function(){return expressionsPlugin},setExpressionInterfaces=function(t){expressionsInterfaces=t},getExpressionInterfaces=function(){return expressionsInterfaces},setDefaultCurveSegments=function(t){defaultCurveSegments=t},getDefaultCurveSegments=function(){return defaultCurveSegments},setIdPrefix=function(t){idPrefix$1=t},getIdPrefix=function(){return idPrefix$1};function createNS(t){return document.createElementNS(svgNS,t)}function _typeof$5(t){return _typeof$5="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$5(t)}var dataManager=function(){var t,e,r=1,n=[],i={onmessage:function(){},postMessage:function(e){t({data:e})}},a={postMessage:function(t){i.onmessage({data:t})}};function o(){e||(e=function(e){if(window.Worker&&window.Blob&&getWebWorker()){var r=new Blob(["var _workerSelf = self; self.onmessage = ",e.toString()],{type:"text/javascript"}),n=URL.createObjectURL(r);return new Worker(n)}return t=e,i}((function(t){if(a.dataManager||(a.dataManager=function(){function t(i,a){var o,s,l,c,u,h,f,p=i.length;for(s=0;s<p;s+=1)if("ks"in(o=i[s])&&!o.completed){if(o.completed=!0,o.hasMask){var d=o.masksProperties;for(c=d.length,l=0;l<c;l+=1)if(d[l].pt.k.i)n(d[l].pt.k);else for(h=d[l].pt.k.length,u=0;u<h;u+=1)d[l].pt.k[u].s&&n(d[l].pt.k[u].s[0]),d[l].pt.k[u].e&&n(d[l].pt.k[u].e[0])}0===o.ty?(o.layers=e(o.refId,a),t(o.layers,a)):4===o.ty?r(o.shapes):5===o.ty&&(0===(f=o).t.a.length&&f.t.p)}}function e(t,e){var r=function(t,e){for(var r=0,n=e.length;r<n;){if(e[r].id===t)return e[r];r+=1}return null}(t,e);return r?r.layers.__used?JSON.parse(JSON.stringify(r.layers)):(r.layers.__used=!0,r.layers):null}function r(t){var e,i,a;for(e=t.length-1;e>=0;e-=1)if("sh"===t[e].ty)if(t[e].ks.k.i)n(t[e].ks.k);else for(a=t[e].ks.k.length,i=0;i<a;i+=1)t[e].ks.k[i].s&&n(t[e].ks.k[i].s[0]),t[e].ks.k[i].e&&n(t[e].ks.k[i].e[0]);else"gr"===t[e].ty&&r(t[e].it)}function n(t){var e,r=t.i.length;for(e=0;e<r;e+=1)t.i[e][0]+=t.v[e][0],t.i[e][1]+=t.v[e][1],t.o[e][0]+=t.v[e][0],t.o[e][1]+=t.v[e][1]}function i(t,e){var r=e?e.split("."):[100,100,100];return t[0]>r[0]||!(r[0]>t[0])&&(t[1]>r[1]||!(r[1]>t[1])&&(t[2]>r[2]||!(r[2]>t[2])&&null))}var a,o=function(){var t=[4,4,14];function e(t){var e,r,n,i=t.length;for(e=0;e<i;e+=1)5===t[e].ty&&(void 0,n=(r=t[e]).t.d,r.t.d={k:[{s:n,t:0}]})}return function(r){if(i(t,r.v)&&(e(r.layers),r.assets)){var n,a=r.assets.length;for(n=0;n<a;n+=1)r.assets[n].layers&&e(r.assets[n].layers)}}}(),s=(a=[4,7,99],function(t){if(t.chars&&!i(a,t.v)){var e,n=t.chars.length;for(e=0;e<n;e+=1){var o=t.chars[e];o.data&&o.data.shapes&&(r(o.data.shapes),o.data.ip=0,o.data.op=99999,o.data.st=0,o.data.sr=1,o.data.ks={p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0}},t.chars[e].t||(o.data.shapes.push({ty:"no"}),o.data.shapes[0].it.push({p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0},sk:{k:0,a:0},sa:{k:0,a:0},ty:"tr"})))}}}),l=function(){var t=[5,7,15];function e(t){var e,r,n=t.length;for(e=0;e<n;e+=1)5===t[e].ty&&(r=void 0,"number"==typeof(r=t[e].t.p).a&&(r.a={a:0,k:r.a}),"number"==typeof r.p&&(r.p={a:0,k:r.p}),"number"==typeof r.r&&(r.r={a:0,k:r.r}))}return function(r){if(i(t,r.v)&&(e(r.layers),r.assets)){var n,a=r.assets.length;for(n=0;n<a;n+=1)r.assets[n].layers&&e(r.assets[n].layers)}}}(),c=function(){var t=[4,1,9];function e(t){var r,n,i,a=t.length;for(r=0;r<a;r+=1)if("gr"===t[r].ty)e(t[r].it);else if("fl"===t[r].ty||"st"===t[r].ty)if(t[r].c.k&&t[r].c.k[0].i)for(i=t[r].c.k.length,n=0;n<i;n+=1)t[r].c.k[n].s&&(t[r].c.k[n].s[0]/=255,t[r].c.k[n].s[1]/=255,t[r].c.k[n].s[2]/=255,t[r].c.k[n].s[3]/=255),t[r].c.k[n].e&&(t[r].c.k[n].e[0]/=255,t[r].c.k[n].e[1]/=255,t[r].c.k[n].e[2]/=255,t[r].c.k[n].e[3]/=255);else t[r].c.k[0]/=255,t[r].c.k[1]/=255,t[r].c.k[2]/=255,t[r].c.k[3]/=255}function r(t){var r,n=t.length;for(r=0;r<n;r+=1)4===t[r].ty&&e(t[r].shapes)}return function(e){if(i(t,e.v)&&(r(e.layers),e.assets)){var n,a=e.assets.length;for(n=0;n<a;n+=1)e.assets[n].layers&&r(e.assets[n].layers)}}}(),u=function(){var t=[4,4,18];function e(t){var r,n,i;for(r=t.length-1;r>=0;r-=1)if("sh"===t[r].ty)if(t[r].ks.k.i)t[r].ks.k.c=t[r].closed;else for(i=t[r].ks.k.length,n=0;n<i;n+=1)t[r].ks.k[n].s&&(t[r].ks.k[n].s[0].c=t[r].closed),t[r].ks.k[n].e&&(t[r].ks.k[n].e[0].c=t[r].closed);else"gr"===t[r].ty&&e(t[r].it)}function r(t){var r,n,i,a,o,s,l=t.length;for(n=0;n<l;n+=1){if((r=t[n]).hasMask){var c=r.masksProperties;for(a=c.length,i=0;i<a;i+=1)if(c[i].pt.k.i)c[i].pt.k.c=c[i].cl;else for(s=c[i].pt.k.length,o=0;o<s;o+=1)c[i].pt.k[o].s&&(c[i].pt.k[o].s[0].c=c[i].cl),c[i].pt.k[o].e&&(c[i].pt.k[o].e[0].c=c[i].cl)}4===r.ty&&e(r.shapes)}}return function(e){if(i(t,e.v)&&(r(e.layers),e.assets)){var n,a=e.assets.length;for(n=0;n<a;n+=1)e.assets[n].layers&&r(e.assets[n].layers)}}}();var h={completeData:function(r){r.__complete||(c(r),o(r),s(r),l(r),u(r),t(r.layers,r.assets),function(r,n){if(r){var i=0,a=r.length;for(i=0;i<a;i+=1)1===r[i].t&&(r[i].data.layers=e(r[i].data.refId,n),t(r[i].data.layers,n))}}(r.chars,r.assets),r.__complete=!0)}};return h.checkColors=c,h.checkChars=s,h.checkPathProperties=l,h.checkShapes=u,h.completeLayers=t,h}()),a.assetLoader||(a.assetLoader=function(){function t(t){var e=t.getResponseHeader("content-type");return e&&"json"===t.responseType&&-1!==e.indexOf("json")||t.response&&"object"===_typeof$5(t.response)?t.response:t.response&&"string"==typeof t.response?JSON.parse(t.response):t.responseText?JSON.parse(t.responseText):null}return{load:function(e,r,n,i){var a,o=new XMLHttpRequest;try{o.responseType="json"}catch(t){}o.onreadystatechange=function(){if(4===o.readyState)if(200===o.status)a=t(o),n(a);else try{a=t(o),n(a)}catch(t){i&&i(t)}};try{o.open(["G","E","T"].join(""),e,!0)}catch(t){o.open(["G","E","T"].join(""),r+"/"+e,!0)}o.send()}}}()),"loadAnimation"===t.data.type)a.assetLoader.load(t.data.path,t.data.fullPath,(function(e){a.dataManager.completeData(e),a.postMessage({id:t.data.id,payload:e,status:"success"})}),(function(){a.postMessage({id:t.data.id,status:"error"})}));else if("complete"===t.data.type){var e=t.data.animation;a.dataManager.completeData(e),a.postMessage({id:t.data.id,payload:e,status:"success"})}else"loadData"===t.data.type&&a.assetLoader.load(t.data.path,t.data.fullPath,(function(e){a.postMessage({id:t.data.id,payload:e,status:"success"})}),(function(){a.postMessage({id:t.data.id,status:"error"})}))})),e.onmessage=function(t){var e=t.data,r=e.id,i=n[r];n[r]=null,"success"===e.status?i.onComplete(e.payload):i.onError&&i.onError()})}function s(t,e){var i="processId_"+(r+=1);return n[i]={onComplete:t,onError:e},i}return{loadAnimation:function(t,r,n){o();var i=s(r,n);e.postMessage({type:"loadAnimation",path:t,fullPath:window.location.origin+window.location.pathname,id:i})},loadData:function(t,r,n){o();var i=s(r,n);e.postMessage({type:"loadData",path:t,fullPath:window.location.origin+window.location.pathname,id:i})},completeAnimation:function(t,r,n){o();var i=s(r,n);e.postMessage({type:"complete",animation:t,id:i})}}}(),ImagePreloader=function(){var t=function(){var t=createTag("canvas");t.width=1,t.height=1;var e=t.getContext("2d");return e.fillStyle="rgba(0,0,0,0)",e.fillRect(0,0,1,1),t}();function e(){this.loadedAssets+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function r(){this.loadedFootagesCount+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function n(t,e,r){var n="";if(t.e)n=t.p;else if(e){var i=t.p;-1!==i.indexOf("images/")&&(i=i.split("/")[1]),n=e+i}else n=r,n+=t.u?t.u:"",n+=t.p;return n}function i(t){var e=0,r=setInterval(function(){(t.getBBox().width||e>500)&&(this._imageLoaded(),clearInterval(r)),e+=1}.bind(this),50)}function a(t){var e={assetData:t},r=n(t,this.assetsPath,this.path);return dataManager.loadData(r,function(t){e.img=t,this._footageLoaded()}.bind(this),function(){e.img={},this._footageLoaded()}.bind(this)),e}function o(){this._imageLoaded=e.bind(this),this._footageLoaded=r.bind(this),this.testImageLoaded=i.bind(this),this.createFootageData=a.bind(this),this.assetsPath="",this.path="",this.totalImages=0,this.totalFootages=0,this.loadedAssets=0,this.loadedFootagesCount=0,this.imagesLoadedCb=null,this.images=[]}return o.prototype={loadAssets:function(t,e){var r;this.imagesLoadedCb=e;var n=t.length;for(r=0;r<n;r+=1)t[r].layers||(t[r].t&&"seq"!==t[r].t?3===t[r].t&&(this.totalFootages+=1,this.images.push(this.createFootageData(t[r]))):(this.totalImages+=1,this.images.push(this._createImageData(t[r]))))},setAssetsPath:function(t){this.assetsPath=t||""},setPath:function(t){this.path=t||""},loadedImages:function(){return this.totalImages===this.loadedAssets},loadedFootages:function(){return this.totalFootages===this.loadedFootagesCount},destroy:function(){this.imagesLoadedCb=null,this.images.length=0},getAsset:function(t){for(var e=0,r=this.images.length;e<r;){if(this.images[e].assetData===t)return this.images[e].img;e+=1}return null},createImgData:function(e){var r=n(e,this.assetsPath,this.path),i=createTag("img");i.crossOrigin="anonymous",i.addEventListener("load",this._imageLoaded,!1),i.addEventListener("error",function(){a.img=t,this._imageLoaded()}.bind(this),!1),i.src=r;var a={img:i,assetData:e};return a},createImageData:function(e){var r=n(e,this.assetsPath,this.path),i=createNS("image");isSafari?this.testImageLoaded(i):i.addEventListener("load",this._imageLoaded,!1),i.addEventListener("error",function(){a.img=t,this._imageLoaded()}.bind(this),!1),i.setAttributeNS("http://www.w3.org/1999/xlink","href",r),this._elementHelper.append?this._elementHelper.append(i):this._elementHelper.appendChild(i);var a={img:i,assetData:e};return a},imageLoaded:e,footageLoaded:r,setCacheType:function(t,e){"svg"===t?(this._elementHelper=e,this._createImageData=this.createImageData.bind(this)):this._createImageData=this.createImgData.bind(this)}},o}();function BaseEvent(){}BaseEvent.prototype={triggerEvent:function(t,e){if(this._cbs[t])for(var r=this._cbs[t],n=0;n<r.length;n+=1)r[n](e)},addEventListener:function(t,e){return this._cbs[t]||(this._cbs[t]=[]),this._cbs[t].push(e),function(){this.removeEventListener(t,e)}.bind(this)},removeEventListener:function(t,e){if(e){if(this._cbs[t]){for(var r=0,n=this._cbs[t].length;r<n;)this._cbs[t][r]===e&&(this._cbs[t].splice(r,1),r-=1,n-=1),r+=1;this._cbs[t].length||(this._cbs[t]=null)}}else this._cbs[t]=null}};var markerParser=function(){function t(t){for(var e,r=t.split("\r\n"),n={},i=0,a=0;a<r.length;a+=1)2===(e=r[a].split(":")).length&&(n[e[0]]=e[1].trim(),i+=1);if(0===i)throw new Error;return n}return function(e){for(var r=[],n=0;n<e.length;n+=1){var i=e[n],a={time:i.tm,duration:i.dr};try{a.payload=JSON.parse(e[n].cm)}catch(r){try{a.payload=t(e[n].cm)}catch(t){a.payload={name:e[n].cm}}}r.push(a)}return r}}(),ProjectInterface=function(){function t(t){this.compositions.push(t)}return function(){function e(t){for(var e=0,r=this.compositions.length;e<r;){if(this.compositions[e].data&&this.compositions[e].data.nm===t)return this.compositions[e].prepareFrame&&this.compositions[e].data.xt&&this.compositions[e].prepareFrame(this.currentFrame),this.compositions[e].compInterface;e+=1}return null}return e.compositions=[],e.currentFrame=0,e.registerComposition=t,e}}(),renderers={},registerRenderer=function(t,e){renderers[t]=e};function getRenderer(t){return renderers[t]}function getRegisteredRenderer(){if(renderers.canvas)return"canvas";for(var t in renderers)if(renderers[t])return t;return""}function _typeof$4(t){return _typeof$4="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$4(t)}var AnimationItem=function(){this._cbs=[],this.name="",this.path="",this.isLoaded=!1,this.currentFrame=0,this.currentRawFrame=0,this.firstFrame=0,this.totalFrames=0,this.frameRate=0,this.frameMult=0,this.playSpeed=1,this.playDirection=1,this.playCount=0,this.animationData={},this.assets=[],this.isPaused=!0,this.autoplay=!1,this.loop=!0,this.renderer=null,this.animationID=createElementID(),this.assetsPath="",this.timeCompleted=0,this.segmentPos=0,this.isSubframeEnabled=getSubframeEnabled(),this.segments=[],this._idle=!0,this._completedLoop=!1,this.projectInterface=ProjectInterface(),this.imagePreloader=new ImagePreloader,this.audioController=audioControllerFactory(),this.markers=[],this.configAnimation=this.configAnimation.bind(this),this.onSetupError=this.onSetupError.bind(this),this.onSegmentComplete=this.onSegmentComplete.bind(this),this.drawnFrameEvent=new BMEnterFrameEvent("drawnFrame",0,0,0),this.expressionsPlugin=getExpressionsPlugin()};extendPrototype([BaseEvent],AnimationItem),AnimationItem.prototype.setParams=function(t){(t.wrapper||t.container)&&(this.wrapper=t.wrapper||t.container);var e="svg";t.animType?e=t.animType:t.renderer&&(e=t.renderer);var r=getRenderer(e);this.renderer=new r(this,t.rendererSettings),this.imagePreloader.setCacheType(e,this.renderer.globalData.defs),this.renderer.setProjectInterface(this.projectInterface),this.animType=e,""===t.loop||null===t.loop||void 0===t.loop||!0===t.loop?this.loop=!0:!1===t.loop?this.loop=!1:this.loop=parseInt(t.loop,10),this.autoplay=!("autoplay"in t)||t.autoplay,this.name=t.name?t.name:"",this.autoloadSegments=!Object.prototype.hasOwnProperty.call(t,"autoloadSegments")||t.autoloadSegments,this.assetsPath=t.assetsPath,this.initialSegment=t.initialSegment,t.audioFactory&&this.audioController.setAudioFactory(t.audioFactory),t.animationData?this.setupAnimation(t.animationData):t.path&&(-1!==t.path.lastIndexOf("\\")?this.path=t.path.substr(0,t.path.lastIndexOf("\\")+1):this.path=t.path.substr(0,t.path.lastIndexOf("/")+1),this.fileName=t.path.substr(t.path.lastIndexOf("/")+1),this.fileName=this.fileName.substr(0,this.fileName.lastIndexOf(".json")),dataManager.loadAnimation(t.path,this.configAnimation,this.onSetupError))},AnimationItem.prototype.onSetupError=function(){this.trigger("data_failed")},AnimationItem.prototype.setupAnimation=function(t){dataManager.completeAnimation(t,this.configAnimation)},AnimationItem.prototype.setData=function(t,e){e&&"object"!==_typeof$4(e)&&(e=JSON.parse(e));var r={wrapper:t,animationData:e},n=t.attributes;r.path=n.getNamedItem("data-animation-path")?n.getNamedItem("data-animation-path").value:n.getNamedItem("data-bm-path")?n.getNamedItem("data-bm-path").value:n.getNamedItem("bm-path")?n.getNamedItem("bm-path").value:"",r.animType=n.getNamedItem("data-anim-type")?n.getNamedItem("data-anim-type").value:n.getNamedItem("data-bm-type")?n.getNamedItem("data-bm-type").value:n.getNamedItem("bm-type")?n.getNamedItem("bm-type").value:n.getNamedItem("data-bm-renderer")?n.getNamedItem("data-bm-renderer").value:n.getNamedItem("bm-renderer")?n.getNamedItem("bm-renderer").value:getRegisteredRenderer()||"canvas";var i=n.getNamedItem("data-anim-loop")?n.getNamedItem("data-anim-loop").value:n.getNamedItem("data-bm-loop")?n.getNamedItem("data-bm-loop").value:n.getNamedItem("bm-loop")?n.getNamedItem("bm-loop").value:"";"false"===i?r.loop=!1:"true"===i?r.loop=!0:""!==i&&(r.loop=parseInt(i,10));var a=n.getNamedItem("data-anim-autoplay")?n.getNamedItem("data-anim-autoplay").value:n.getNamedItem("data-bm-autoplay")?n.getNamedItem("data-bm-autoplay").value:!n.getNamedItem("bm-autoplay")||n.getNamedItem("bm-autoplay").value;r.autoplay="false"!==a,r.name=n.getNamedItem("data-name")?n.getNamedItem("data-name").value:n.getNamedItem("data-bm-name")?n.getNamedItem("data-bm-name").value:n.getNamedItem("bm-name")?n.getNamedItem("bm-name").value:"","false"===(n.getNamedItem("data-anim-prerender")?n.getNamedItem("data-anim-prerender").value:n.getNamedItem("data-bm-prerender")?n.getNamedItem("data-bm-prerender").value:n.getNamedItem("bm-prerender")?n.getNamedItem("bm-prerender").value:"")&&(r.prerender=!1),r.path?this.setParams(r):this.trigger("destroy")},AnimationItem.prototype.includeLayers=function(t){t.op>this.animationData.op&&(this.animationData.op=t.op,this.totalFrames=Math.floor(t.op-this.animationData.ip));var e,r,n=this.animationData.layers,i=n.length,a=t.layers,o=a.length;for(r=0;r<o;r+=1)for(e=0;e<i;){if(n[e].id===a[r].id){n[e]=a[r];break}e+=1}if((t.chars||t.fonts)&&(this.renderer.globalData.fontManager.addChars(t.chars),this.renderer.globalData.fontManager.addFonts(t.fonts,this.renderer.globalData.defs)),t.assets)for(i=t.assets.length,e=0;e<i;e+=1)this.animationData.assets.push(t.assets[e]);this.animationData.__complete=!1,dataManager.completeAnimation(this.animationData,this.onSegmentComplete)},AnimationItem.prototype.onSegmentComplete=function(t){this.animationData=t;var e=getExpressionsPlugin();e&&e.initExpressions(this),this.loadNextSegment()},AnimationItem.prototype.loadNextSegment=function(){var t=this.animationData.segments;if(!t||0===t.length||!this.autoloadSegments)return this.trigger("data_ready"),void(this.timeCompleted=this.totalFrames);var e=t.shift();this.timeCompleted=e.time*this.frameRate;var r=this.path+this.fileName+"_"+this.segmentPos+".json";this.segmentPos+=1,dataManager.loadData(r,this.includeLayers.bind(this),function(){this.trigger("data_failed")}.bind(this))},AnimationItem.prototype.loadSegments=function(){this.animationData.segments||(this.timeCompleted=this.totalFrames),this.loadNextSegment()},AnimationItem.prototype.imagesLoaded=function(){this.trigger("loaded_images"),this.checkLoaded()},AnimationItem.prototype.preloadImages=function(){this.imagePreloader.setAssetsPath(this.assetsPath),this.imagePreloader.setPath(this.path),this.imagePreloader.loadAssets(this.animationData.assets,this.imagesLoaded.bind(this))},AnimationItem.prototype.configAnimation=function(t){if(this.renderer)try{this.animationData=t,this.initialSegment?(this.totalFrames=Math.floor(this.initialSegment[1]-this.initialSegment[0]),this.firstFrame=Math.round(this.initialSegment[0])):(this.totalFrames=Math.floor(this.animationData.op-this.animationData.ip),this.firstFrame=Math.round(this.animationData.ip)),this.renderer.configAnimation(t),t.assets||(t.assets=[]),this.assets=this.animationData.assets,this.frameRate=this.animationData.fr,this.frameMult=this.animationData.fr/1e3,this.renderer.searchExtraCompositions(t.assets),this.markers=markerParser(t.markers||[]),this.trigger("config_ready"),this.preloadImages(),this.loadSegments(),this.updaFrameModifier(),this.waitForFontsLoaded(),this.isPaused&&this.audioController.pause()}catch(t){this.triggerConfigError(t)}},AnimationItem.prototype.waitForFontsLoaded=function(){this.renderer&&(this.renderer.globalData.fontManager.isLoaded?this.checkLoaded():setTimeout(this.waitForFontsLoaded.bind(this),20))},AnimationItem.prototype.checkLoaded=function(){if(!this.isLoaded&&this.renderer.globalData.fontManager.isLoaded&&(this.imagePreloader.loadedImages()||"canvas"!==this.renderer.rendererType)&&this.imagePreloader.loadedFootages()){this.isLoaded=!0;var t=getExpressionsPlugin();t&&t.initExpressions(this),this.renderer.initItems(),setTimeout(function(){this.trigger("DOMLoaded")}.bind(this),0),this.gotoFrame(),this.autoplay&&this.play()}},AnimationItem.prototype.resize=function(t,e){var r="number"==typeof t?t:void 0,n="number"==typeof e?e:void 0;this.renderer.updateContainerSize(r,n)},AnimationItem.prototype.setSubframe=function(t){this.isSubframeEnabled=!!t},AnimationItem.prototype.gotoFrame=function(){this.currentFrame=this.isSubframeEnabled?this.currentRawFrame:~~this.currentRawFrame,this.timeCompleted!==this.totalFrames&&this.currentFrame>this.timeCompleted&&(this.currentFrame=this.timeCompleted),this.trigger("enterFrame"),this.renderFrame(),this.trigger("drawnFrame")},AnimationItem.prototype.renderFrame=function(){if(!1!==this.isLoaded&&this.renderer)try{this.expressionsPlugin&&this.expressionsPlugin.resetFrame(),this.renderer.renderFrame(this.currentFrame+this.firstFrame)}catch(t){this.triggerRenderFrameError(t)}},AnimationItem.prototype.play=function(t){t&&this.name!==t||!0===this.isPaused&&(this.isPaused=!1,this.trigger("_play"),this.audioController.resume(),this._idle&&(this._idle=!1,this.trigger("_active")))},AnimationItem.prototype.pause=function(t){t&&this.name!==t||!1===this.isPaused&&(this.isPaused=!0,this.trigger("_pause"),this._idle=!0,this.trigger("_idle"),this.audioController.pause())},AnimationItem.prototype.togglePause=function(t){t&&this.name!==t||(!0===this.isPaused?this.play():this.pause())},AnimationItem.prototype.stop=function(t){t&&this.name!==t||(this.pause(),this.playCount=0,this._completedLoop=!1,this.setCurrentRawFrameValue(0))},AnimationItem.prototype.getMarkerData=function(t){for(var e,r=0;r<this.markers.length;r+=1)if((e=this.markers[r]).payload&&e.payload.name===t)return e;return null},AnimationItem.prototype.goToAndStop=function(t,e,r){if(!r||this.name===r){var n=Number(t);if(isNaN(n)){var i=this.getMarkerData(t);i&&this.goToAndStop(i.time,!0)}else e?this.setCurrentRawFrameValue(t):this.setCurrentRawFrameValue(t*this.frameModifier);this.pause()}},AnimationItem.prototype.goToAndPlay=function(t,e,r){if(!r||this.name===r){var n=Number(t);if(isNaN(n)){var i=this.getMarkerData(t);i&&(i.duration?this.playSegments([i.time,i.time+i.duration],!0):this.goToAndStop(i.time,!0))}else this.goToAndStop(n,e,r);this.play()}},AnimationItem.prototype.advanceTime=function(t){if(!0!==this.isPaused&&!1!==this.isLoaded){var e=this.currentRawFrame+t*this.frameModifier,r=!1;e>=this.totalFrames-1&&this.frameModifier>0?this.loop&&this.playCount!==this.loop?e>=this.totalFrames?(this.playCount+=1,this.checkSegments(e%this.totalFrames)||(this.setCurrentRawFrameValue(e%this.totalFrames),this._completedLoop=!0,this.trigger("loopComplete"))):this.setCurrentRawFrameValue(e):this.checkSegments(e>this.totalFrames?e%this.totalFrames:0)||(r=!0,e=this.totalFrames-1):e<0?this.checkSegments(e%this.totalFrames)||(!this.loop||this.playCount--<=0&&!0!==this.loop?(r=!0,e=0):(this.setCurrentRawFrameValue(this.totalFrames+e%this.totalFrames),this._completedLoop?this.trigger("loopComplete"):this._completedLoop=!0)):this.setCurrentRawFrameValue(e),r&&(this.setCurrentRawFrameValue(e),this.pause(),this.trigger("complete"))}},AnimationItem.prototype.adjustSegment=function(t,e){this.playCount=0,t[1]<t[0]?(this.frameModifier>0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(-1)),this.totalFrames=t[0]-t[1],this.timeCompleted=this.totalFrames,this.firstFrame=t[1],this.setCurrentRawFrameValue(this.totalFrames-.001-e)):t[1]>t[0]&&(this.frameModifier<0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(1)),this.totalFrames=t[1]-t[0],this.timeCompleted=this.totalFrames,this.firstFrame=t[0],this.setCurrentRawFrameValue(.001+e)),this.trigger("segmentStart")},AnimationItem.prototype.setSegment=function(t,e){var r=-1;this.isPaused&&(this.currentRawFrame+this.firstFrame<t?r=t:this.currentRawFrame+this.firstFrame>e&&(r=e-t)),this.firstFrame=t,this.totalFrames=e-t,this.timeCompleted=this.totalFrames,-1!==r&&this.goToAndStop(r,!0)},AnimationItem.prototype.playSegments=function(t,e){if(e&&(this.segments.length=0),"object"===_typeof$4(t[0])){var r,n=t.length;for(r=0;r<n;r+=1)this.segments.push(t[r])}else this.segments.push(t);this.segments.length&&e&&this.adjustSegment(this.segments.shift(),0),this.isPaused&&this.play()},AnimationItem.prototype.resetSegments=function(t){this.segments.length=0,this.segments.push([this.animationData.ip,this.animationData.op]),t&&this.checkSegments(0)},AnimationItem.prototype.checkSegments=function(t){return!!this.segments.length&&(this.adjustSegment(this.segments.shift(),t),!0)},AnimationItem.prototype.destroy=function(t){t&&this.name!==t||!this.renderer||(this.renderer.destroy(),this.imagePreloader.destroy(),this.trigger("destroy"),this._cbs=null,this.onEnterFrame=null,this.onLoopComplete=null,this.onComplete=null,this.onSegmentStart=null,this.onDestroy=null,this.renderer=null,this.expressionsPlugin=null,this.imagePreloader=null,this.projectInterface=null)},AnimationItem.prototype.setCurrentRawFrameValue=function(t){this.currentRawFrame=t,this.gotoFrame()},AnimationItem.prototype.setSpeed=function(t){this.playSpeed=t,this.updaFrameModifier()},AnimationItem.prototype.setDirection=function(t){this.playDirection=t<0?-1:1,this.updaFrameModifier()},AnimationItem.prototype.setLoop=function(t){this.loop=t},AnimationItem.prototype.setVolume=function(t,e){e&&this.name!==e||this.audioController.setVolume(t)},AnimationItem.prototype.getVolume=function(){return this.audioController.getVolume()},AnimationItem.prototype.mute=function(t){t&&this.name!==t||this.audioController.mute()},AnimationItem.prototype.unmute=function(t){t&&this.name!==t||this.audioController.unmute()},AnimationItem.prototype.updaFrameModifier=function(){this.frameModifier=this.frameMult*this.playSpeed*this.playDirection,this.audioController.setRate(this.playSpeed*this.playDirection)},AnimationItem.prototype.getPath=function(){return this.path},AnimationItem.prototype.getAssetsPath=function(t){var e="";if(t.e)e=t.p;else if(this.assetsPath){var r=t.p;-1!==r.indexOf("images/")&&(r=r.split("/")[1]),e=this.assetsPath+r}else e=this.path,e+=t.u?t.u:"",e+=t.p;return e},AnimationItem.prototype.getAssetData=function(t){for(var e=0,r=this.assets.length;e<r;){if(t===this.assets[e].id)return this.assets[e];e+=1}return null},AnimationItem.prototype.hide=function(){this.renderer.hide()},AnimationItem.prototype.show=function(){this.renderer.show()},AnimationItem.prototype.getDuration=function(t){return t?this.totalFrames:this.totalFrames/this.frameRate},AnimationItem.prototype.updateDocumentData=function(t,e,r){try{this.renderer.getElementByPath(t).updateDocumentData(e,r)}catch(t){}},AnimationItem.prototype.trigger=function(t){if(this._cbs&&this._cbs[t])switch(t){case"enterFrame":this.triggerEvent(t,new BMEnterFrameEvent(t,this.currentFrame,this.totalFrames,this.frameModifier));break;case"drawnFrame":this.drawnFrameEvent.currentTime=this.currentFrame,this.drawnFrameEvent.totalTime=this.totalFrames,this.drawnFrameEvent.direction=this.frameModifier,this.triggerEvent(t,this.drawnFrameEvent);break;case"loopComplete":this.triggerEvent(t,new BMCompleteLoopEvent(t,this.loop,this.playCount,this.frameMult));break;case"complete":this.triggerEvent(t,new BMCompleteEvent(t,this.frameMult));break;case"segmentStart":this.triggerEvent(t,new BMSegmentStartEvent(t,this.firstFrame,this.totalFrames));break;case"destroy":this.triggerEvent(t,new BMDestroyEvent(t,this));break;default:this.triggerEvent(t)}"enterFrame"===t&&this.onEnterFrame&&this.onEnterFrame.call(this,new BMEnterFrameEvent(t,this.currentFrame,this.totalFrames,this.frameMult)),"loopComplete"===t&&this.onLoopComplete&&this.onLoopComplete.call(this,new BMCompleteLoopEvent(t,this.loop,this.playCount,this.frameMult)),"complete"===t&&this.onComplete&&this.onComplete.call(this,new BMCompleteEvent(t,this.frameMult)),"segmentStart"===t&&this.onSegmentStart&&this.onSegmentStart.call(this,new BMSegmentStartEvent(t,this.firstFrame,this.totalFrames)),"destroy"===t&&this.onDestroy&&this.onDestroy.call(this,new BMDestroyEvent(t,this))},AnimationItem.prototype.triggerRenderFrameError=function(t){var e=new BMRenderFrameErrorEvent(t,this.currentFrame);this.triggerEvent("error",e),this.onError&&this.onError.call(this,e)},AnimationItem.prototype.triggerConfigError=function(t){var e=new BMConfigErrorEvent(t,this.currentFrame);this.triggerEvent("error",e),this.onError&&this.onError.call(this,e)};var animationManager=function(){var t={},e=[],r=0,n=0,i=0,a=!0,o=!1;function s(t){for(var r=0,i=t.target;r<n;)e[r].animation===i&&(e.splice(r,1),r-=1,n-=1,i.isPaused||u()),r+=1}function l(t,r){if(!t)return null;for(var i=0;i<n;){if(e[i].elem===t&&null!==e[i].elem)return e[i].animation;i+=1}var a=new AnimationItem;return h(a,t),a.setData(t,r),a}function c(){i+=1,d()}function u(){i-=1}function h(t,r){t.addEventListener("destroy",s),t.addEventListener("_active",c),t.addEventListener("_idle",u),e.push({elem:r,animation:t}),n+=1}function f(t){var s,l=t-r;for(s=0;s<n;s+=1)e[s].animation.advanceTime(l);r=t,i&&!o?window.requestAnimationFrame(f):a=!0}function p(t){r=t,window.requestAnimationFrame(f)}function d(){!o&&i&&a&&(window.requestAnimationFrame(p),a=!1)}return t.registerAnimation=l,t.loadAnimation=function(t){var e=new AnimationItem;return h(e,null),e.setParams(t),e},t.setSpeed=function(t,r){var i;for(i=0;i<n;i+=1)e[i].animation.setSpeed(t,r)},t.setDirection=function(t,r){var i;for(i=0;i<n;i+=1)e[i].animation.setDirection(t,r)},t.play=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.play(t)},t.pause=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.pause(t)},t.stop=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.stop(t)},t.togglePause=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.togglePause(t)},t.searchAnimations=function(t,e,r){var n,i=[].concat([].slice.call(document.getElementsByClassName("lottie")),[].slice.call(document.getElementsByClassName("bodymovin"))),a=i.length;for(n=0;n<a;n+=1)r&&i[n].setAttribute("data-bm-type",r),l(i[n],t);if(e&&0===a){r||(r="svg");var o=document.getElementsByTagName("body")[0];o.innerText="";var s=createTag("div");s.style.width="100%",s.style.height="100%",s.setAttribute("data-bm-type",r),o.appendChild(s),l(s,t)}},t.resize=function(){var t;for(t=0;t<n;t+=1)e[t].animation.resize()},t.goToAndStop=function(t,r,i){var a;for(a=0;a<n;a+=1)e[a].animation.goToAndStop(t,r,i)},t.destroy=function(t){var r;for(r=n-1;r>=0;r-=1)e[r].animation.destroy(t)},t.freeze=function(){o=!0},t.unfreeze=function(){o=!1,d()},t.setVolume=function(t,r){var i;for(i=0;i<n;i+=1)e[i].animation.setVolume(t,r)},t.mute=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.mute(t)},t.unmute=function(t){var r;for(r=0;r<n;r+=1)e[r].animation.unmute(t)},t.getRegisteredAnimations=function(){var t,r=e.length,n=[];for(t=0;t<r;t+=1)n.push(e[t].animation);return n},t}(),BezierFactory=function(){var t={getBezierEasing:function(t,r,n,i,a){var o=a||("bez_"+t+"_"+r+"_"+n+"_"+i).replace(/\./g,"p");if(e[o])return e[o];var s=new u([t,r,n,i]);return e[o]=s,s}},e={},r=11,n=1/(r-1),i="function"==typeof Float32Array;function a(t,e){return 1-3*e+3*t}function o(t,e){return 3*e-6*t}function s(t){return 3*t}function l(t,e,r){return((a(e,r)*t+o(e,r))*t+s(e))*t}function c(t,e,r){return 3*a(e,r)*t*t+2*o(e,r)*t+s(e)}function u(t){this._p=t,this._mSampleValues=i?new Float32Array(r):new Array(r),this._precomputed=!1,this.get=this.get.bind(this)}return u.prototype={get:function(t){var e=this._p[0],r=this._p[1],n=this._p[2],i=this._p[3];return this._precomputed||this._precompute(),e===r&&n===i?t:0===t?0:1===t?1:l(this._getTForX(t),r,i)},_precompute:function(){var t=this._p[0],e=this._p[1],r=this._p[2],n=this._p[3];this._precomputed=!0,t===e&&r===n||this._calcSampleValues()},_calcSampleValues:function(){for(var t=this._p[0],e=this._p[2],i=0;i<r;++i)this._mSampleValues[i]=l(i*n,t,e)},_getTForX:function(t){for(var e=this._p[0],i=this._p[2],a=this._mSampleValues,o=0,s=1,u=r-1;s!==u&&a[s]<=t;++s)o+=n;var h=o+(t-a[--s])/(a[s+1]-a[s])*n,f=c(h,e,i);return f>=.001?function(t,e,r,n){for(var i=0;i<4;++i){var a=c(e,r,n);if(0===a)return e;e-=(l(e,r,n)-t)/a}return e}(t,h,e,i):0===f?h:function(t,e,r,n,i){var a,o,s=0;do{(a=l(o=e+(r-e)/2,n,i)-t)>0?r=o:e=o}while(Math.abs(a)>1e-7&&++s<10);return o}(t,o,o+n,e,i)}},t}(),pooling={double:function(t){return t.concat(createSizedArray(t.length))}},poolFactory=function(t,e,r){var n=0,i=t,a=createSizedArray(i);return{newElement:function(){return n?a[n-=1]:e()},release:function(t){n===i&&(a=pooling.double(a),i*=2),r&&r(t),a[n]=t,n+=1}}},bezierLengthPool=poolFactory(8,(function(){return{addedLength:0,percents:createTypedArray("float32",getDefaultCurveSegments()),lengths:createTypedArray("float32",getDefaultCurveSegments())}})),segmentsLengthPool=poolFactory(8,(function(){return{lengths:[],totalLength:0}}),(function(t){var e,r=t.lengths.length;for(e=0;e<r;e+=1)bezierLengthPool.release(t.lengths[e]);t.lengths.length=0}));function bezFunction(){var t=Math;function e(t,e,r,n,i,a){var o=t*n+e*i+r*a-i*n-a*t-r*e;return o>-.001&&o<.001}var r=function(t,e,r,n){var i,a,o,s,l,c,u=getDefaultCurveSegments(),h=0,f=[],p=[],d=bezierLengthPool.newElement();for(o=r.length,i=0;i<u;i+=1){for(l=i/(u-1),c=0,a=0;a<o;a+=1)s=bmPow(1-l,3)*t[a]+3*bmPow(1-l,2)*l*r[a]+3*(1-l)*bmPow(l,2)*n[a]+bmPow(l,3)*e[a],f[a]=s,null!==p[a]&&(c+=bmPow(f[a]-p[a],2)),p[a]=f[a];c&&(h+=c=bmSqrt(c)),d.percents[i]=l,d.lengths[i]=h}return d.addedLength=h,d};function n(t){this.segmentLength=0,this.points=new Array(t)}function i(t,e){this.partialLength=t,this.point=e}var a,o=(a={},function(t,r,o,s){var l=(t[0]+"_"+t[1]+"_"+r[0]+"_"+r[1]+"_"+o[0]+"_"+o[1]+"_"+s[0]+"_"+s[1]).replace(/\./g,"p");if(!a[l]){var c,u,h,f,p,d,m,y=getDefaultCurveSegments(),v=0,g=null;2===t.length&&(t[0]!==r[0]||t[1]!==r[1])&&e(t[0],t[1],r[0],r[1],t[0]+o[0],t[1]+o[1])&&e(t[0],t[1],r[0],r[1],r[0]+s[0],r[1]+s[1])&&(y=2);var b=new n(y);for(h=o.length,c=0;c<y;c+=1){for(m=createSizedArray(h),p=c/(y-1),d=0,u=0;u<h;u+=1)f=bmPow(1-p,3)*t[u]+3*bmPow(1-p,2)*p*(t[u]+o[u])+3*(1-p)*bmPow(p,2)*(r[u]+s[u])+bmPow(p,3)*r[u],m[u]=f,null!==g&&(d+=bmPow(m[u]-g[u],2));v+=d=bmSqrt(d),b.points[c]=new i(d,m),g=m}b.segmentLength=v,a[l]=b}return a[l]});function s(t,e){var r=e.percents,n=e.lengths,i=r.length,a=bmFloor((i-1)*t),o=t*e.addedLength,s=0;if(a===i-1||0===a||o===n[a])return r[a];for(var l=n[a]>o?-1:1,c=!0;c;)if(n[a]<=o&&n[a+1]>o?(s=(o-n[a])/(n[a+1]-n[a]),c=!1):a+=l,a<0||a>=i-1){if(a===i-1)return r[a];c=!1}return r[a]+(r[a+1]-r[a])*s}var l=createTypedArray("float32",8);return{getSegmentsLength:function(t){var e,n=segmentsLengthPool.newElement(),i=t.c,a=t.v,o=t.o,s=t.i,l=t._length,c=n.lengths,u=0;for(e=0;e<l-1;e+=1)c[e]=r(a[e],a[e+1],o[e],s[e+1]),u+=c[e].addedLength;return i&&l&&(c[e]=r(a[e],a[0],o[e],s[0]),u+=c[e].addedLength),n.totalLength=u,n},getNewSegment:function(e,r,n,i,a,o,c){a<0?a=0:a>1&&(a=1);var u,h=s(a,c),f=s(o=o>1?1:o,c),p=e.length,d=1-h,m=1-f,y=d*d*d,v=h*d*d*3,g=h*h*d*3,b=h*h*h,x=d*d*m,w=h*d*m+d*h*m+d*d*f,E=h*h*m+d*h*f+h*d*f,k=h*h*f,S=d*m*m,_=h*m*m+d*f*m+d*m*f,P=h*f*m+d*f*f+h*m*f,C=h*f*f,A=m*m*m,T=f*m*m+m*f*m+m*m*f,M=f*f*m+m*f*f+f*m*f,D=f*f*f;for(u=0;u<p;u+=1)l[4*u]=t.round(1e3*(y*e[u]+v*n[u]+g*i[u]+b*r[u]))/1e3,l[4*u+1]=t.round(1e3*(x*e[u]+w*n[u]+E*i[u]+k*r[u]))/1e3,l[4*u+2]=t.round(1e3*(S*e[u]+_*n[u]+P*i[u]+C*r[u]))/1e3,l[4*u+3]=t.round(1e3*(A*e[u]+T*n[u]+M*i[u]+D*r[u]))/1e3;return l},getPointInSegment:function(e,r,n,i,a,o){var l=s(a,o),c=1-l;return[t.round(1e3*(c*c*c*e[0]+(l*c*c+c*l*c+c*c*l)*n[0]+(l*l*c+c*l*l+l*c*l)*i[0]+l*l*l*r[0]))/1e3,t.round(1e3*(c*c*c*e[1]+(l*c*c+c*l*c+c*c*l)*n[1]+(l*l*c+c*l*l+l*c*l)*i[1]+l*l*l*r[1]))/1e3]},buildBezierData:o,pointOnLine2D:e,pointOnLine3D:function(r,n,i,a,o,s,l,c,u){if(0===i&&0===s&&0===u)return e(r,n,a,o,l,c);var h,f=t.sqrt(t.pow(a-r,2)+t.pow(o-n,2)+t.pow(s-i,2)),p=t.sqrt(t.pow(l-r,2)+t.pow(c-n,2)+t.pow(u-i,2)),d=t.sqrt(t.pow(l-a,2)+t.pow(c-o,2)+t.pow(u-s,2));return(h=f>p?f>d?f-p-d:d-p-f:d>p?d-p-f:p-f-d)>-1e-4&&h<1e-4}}}var bez=bezFunction(),initFrame=initialDefaultFrame,mathAbs=Math.abs;function interpolateValue(t,e){var r,n=this.offsetTime;"multidimensional"===this.propType&&(r=createTypedArray("float32",this.pv.length));for(var i,a,o,s,l,c,u,h,f,p=e.lastIndex,d=p,m=this.keyframes.length-1,y=!0;y;){if(i=this.keyframes[d],a=this.keyframes[d+1],d===m-1&&t>=a.t-n){i.h&&(i=a),p=0;break}if(a.t-n>t){p=d;break}d<m-1?d+=1:(p=0,y=!1)}o=this.keyframesMetadata[d]||{};var v,g=a.t-n,b=i.t-n;if(i.to){o.bezierData||(o.bezierData=bez.buildBezierData(i.s,a.s||i.e,i.to,i.ti));var x=o.bezierData;if(t>=g||t<b){var w=t>=g?x.points.length-1:0;for(l=x.points[w].point.length,s=0;s<l;s+=1)r[s]=x.points[w].point[s]}else{o.__fnct?f=o.__fnct:(f=BezierFactory.getBezierEasing(i.o.x,i.o.y,i.i.x,i.i.y,i.n).get,o.__fnct=f),c=f((t-b)/(g-b));var E,k=x.segmentLength*c,S=e.lastFrame<t&&e._lastKeyframeIndex===d?e._lastAddedLength:0;for(h=e.lastFrame<t&&e._lastKeyframeIndex===d?e._lastPoint:0,y=!0,u=x.points.length;y;){if(S+=x.points[h].partialLength,0===k||0===c||h===x.points.length-1){for(l=x.points[h].point.length,s=0;s<l;s+=1)r[s]=x.points[h].point[s];break}if(k>=S&&k<S+x.points[h+1].partialLength){for(E=(k-S)/x.points[h+1].partialLength,l=x.points[h].point.length,s=0;s<l;s+=1)r[s]=x.points[h].point[s]+(x.points[h+1].point[s]-x.points[h].point[s])*E;break}h<u-1?h+=1:y=!1}e._lastPoint=h,e._lastAddedLength=S-x.points[h].partialLength,e._lastKeyframeIndex=d}}else{var _,P,C,A,T;if(m=i.s.length,v=a.s||i.e,this.sh&&1!==i.h)t>=g?(r[0]=v[0],r[1]=v[1],r[2]=v[2]):t<=b?(r[0]=i.s[0],r[1]=i.s[1],r[2]=i.s[2]):quaternionToEuler(r,slerp(createQuaternion(i.s),createQuaternion(v),(t-b)/(g-b)));else for(d=0;d<m;d+=1)1!==i.h&&(t>=g?c=1:t<b?c=0:(i.o.x.constructor===Array?(o.__fnct||(o.__fnct=[]),o.__fnct[d]?f=o.__fnct[d]:(_=void 0===i.o.x[d]?i.o.x[0]:i.o.x[d],P=void 0===i.o.y[d]?i.o.y[0]:i.o.y[d],C=void 0===i.i.x[d]?i.i.x[0]:i.i.x[d],A=void 0===i.i.y[d]?i.i.y[0]:i.i.y[d],f=BezierFactory.getBezierEasing(_,P,C,A).get,o.__fnct[d]=f)):o.__fnct?f=o.__fnct:(_=i.o.x,P=i.o.y,C=i.i.x,A=i.i.y,f=BezierFactory.getBezierEasing(_,P,C,A).get,i.keyframeMetadata=f),c=f((t-b)/(g-b)))),v=a.s||i.e,T=1===i.h?i.s[d]:i.s[d]+(v[d]-i.s[d])*c,"multidimensional"===this.propType?r[d]=T:r=T}return e.lastIndex=p,r}function slerp(t,e,r){var n,i,a,o,s,l=[],c=t[0],u=t[1],h=t[2],f=t[3],p=e[0],d=e[1],m=e[2],y=e[3];return(i=c*p+u*d+h*m+f*y)<0&&(i=-i,p=-p,d=-d,m=-m,y=-y),1-i>1e-6?(n=Math.acos(i),a=Math.sin(n),o=Math.sin((1-r)*n)/a,s=Math.sin(r*n)/a):(o=1-r,s=r),l[0]=o*c+s*p,l[1]=o*u+s*d,l[2]=o*h+s*m,l[3]=o*f+s*y,l}function quaternionToEuler(t,e){var r=e[0],n=e[1],i=e[2],a=e[3],o=Math.atan2(2*n*a-2*r*i,1-2*n*n-2*i*i),s=Math.asin(2*r*n+2*i*a),l=Math.atan2(2*r*a-2*n*i,1-2*r*r-2*i*i);t[0]=o/degToRads,t[1]=s/degToRads,t[2]=l/degToRads}function createQuaternion(t){var e=t[0]*degToRads,r=t[1]*degToRads,n=t[2]*degToRads,i=Math.cos(e/2),a=Math.cos(r/2),o=Math.cos(n/2),s=Math.sin(e/2),l=Math.sin(r/2),c=Math.sin(n/2);return[s*l*o+i*a*c,s*a*o+i*l*c,i*l*o-s*a*c,i*a*o-s*l*c]}function getValueAtCurrentTime(){var t=this.comp.renderedFrame-this.offsetTime,e=this.keyframes[0].t-this.offsetTime,r=this.keyframes[this.keyframes.length-1].t-this.offsetTime;if(!(t===this._caching.lastFrame||this._caching.lastFrame!==initFrame&&(this._caching.lastFrame>=r&&t>=r||this._caching.lastFrame<e&&t<e))){this._caching.lastFrame>=t&&(this._caching._lastKeyframeIndex=-1,this._caching.lastIndex=0);var n=this.interpolateValue(t,this._caching);this.pv=n}return this._caching.lastFrame=t,this.pv}function setVValue(t){var e;if("unidimensional"===this.propType)e=t*this.mult,mathAbs(this.v-e)>1e-5&&(this.v=e,this._mdf=!0);else for(var r=0,n=this.v.length;r<n;)e=t[r]*this.mult,mathAbs(this.v[r]-e)>1e-5&&(this.v[r]=e,this._mdf=!0),r+=1}function processEffectsSequence(){if(this.elem.globalData.frameId!==this.frameId&&this.effectsSequence.length)if(this.lock)this.setVValue(this.pv);else{var t;this.lock=!0,this._mdf=this._isFirstFrame;var e=this.effectsSequence.length,r=this.kf?this.pv:this.data.k;for(t=0;t<e;t+=1)r=this.effectsSequence[t](r);this.setVValue(r),this._isFirstFrame=!1,this.lock=!1,this.frameId=this.elem.globalData.frameId}}function addEffect(t){this.effectsSequence.push(t),this.container.addDynamicProperty(this)}function ValueProperty(t,e,r,n){this.propType="unidimensional",this.mult=r||1,this.data=e,this.v=r?e.k*r:e.k,this.pv=e.k,this._mdf=!1,this.elem=t,this.container=n,this.comp=t.comp,this.k=!1,this.kf=!1,this.vel=0,this.effectsSequence=[],this._isFirstFrame=!0,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.addEffect=addEffect}function MultiDimensionalProperty(t,e,r,n){var i;this.propType="multidimensional",this.mult=r||1,this.data=e,this._mdf=!1,this.elem=t,this.container=n,this.comp=t.comp,this.k=!1,this.kf=!1,this.frameId=-1;var a=e.k.length;for(this.v=createTypedArray("float32",a),this.pv=createTypedArray("float32",a),this.vel=createTypedArray("float32",a),i=0;i<a;i+=1)this.v[i]=e.k[i]*this.mult,this.pv[i]=e.k[i];this._isFirstFrame=!0,this.effectsSequence=[],this.getValue=processEffectsSequence,this.setVValue=setVValue,this.addEffect=addEffect}function KeyframedValueProperty(t,e,r,n){this.propType="unidimensional",this.keyframes=e.k,this.keyframesMetadata=[],this.offsetTime=t.data.st,this.frameId=-1,this._caching={lastFrame:initFrame,lastIndex:0,value:0,_lastKeyframeIndex:-1},this.k=!0,this.kf=!0,this.data=e,this.mult=r||1,this.elem=t,this.container=n,this.comp=t.comp,this.v=initFrame,this.pv=initFrame,this._isFirstFrame=!0,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.interpolateValue=interpolateValue,this.effectsSequence=[getValueAtCurrentTime.bind(this)],this.addEffect=addEffect}function KeyframedMultidimensionalProperty(t,e,r,n){var i;this.propType="multidimensional";var a,o,s,l,c=e.k.length;for(i=0;i<c-1;i+=1)e.k[i].to&&e.k[i].s&&e.k[i+1]&&e.k[i+1].s&&(a=e.k[i].s,o=e.k[i+1].s,s=e.k[i].to,l=e.k[i].ti,(2===a.length&&(a[0]!==o[0]||a[1]!==o[1])&&bez.pointOnLine2D(a[0],a[1],o[0],o[1],a[0]+s[0],a[1]+s[1])&&bez.pointOnLine2D(a[0],a[1],o[0],o[1],o[0]+l[0],o[1]+l[1])||3===a.length&&(a[0]!==o[0]||a[1]!==o[1]||a[2]!==o[2])&&bez.pointOnLine3D(a[0],a[1],a[2],o[0],o[1],o[2],a[0]+s[0],a[1]+s[1],a[2]+s[2])&&bez.pointOnLine3D(a[0],a[1],a[2],o[0],o[1],o[2],o[0]+l[0],o[1]+l[1],o[2]+l[2]))&&(e.k[i].to=null,e.k[i].ti=null),a[0]===o[0]&&a[1]===o[1]&&0===s[0]&&0===s[1]&&0===l[0]&&0===l[1]&&(2===a.length||a[2]===o[2]&&0===s[2]&&0===l[2])&&(e.k[i].to=null,e.k[i].ti=null));this.effectsSequence=[getValueAtCurrentTime.bind(this)],this.data=e,this.keyframes=e.k,this.keyframesMetadata=[],this.offsetTime=t.data.st,this.k=!0,this.kf=!0,this._isFirstFrame=!0,this.mult=r||1,this.elem=t,this.container=n,this.comp=t.comp,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.interpolateValue=interpolateValue,this.frameId=-1;var u=e.k[0].s.length;for(this.v=createTypedArray("float32",u),this.pv=createTypedArray("float32",u),i=0;i<u;i+=1)this.v[i]=initFrame,this.pv[i]=initFrame;this._caching={lastFrame:initFrame,lastIndex:0,value:createTypedArray("float32",u)},this.addEffect=addEffect}var PropertyFactory={getProp:function(t,e,r,n,i){var a;if(e.sid&&(e=t.globalData.slotManager.getProp(e)),e.k.length)if("number"==typeof e.k[0])a=new MultiDimensionalProperty(t,e,n,i);else switch(r){case 0:a=new KeyframedValueProperty(t,e,n,i);break;case 1:a=new KeyframedMultidimensionalProperty(t,e,n,i)}else a=new ValueProperty(t,e,n,i);return a.effectsSequence.length&&i.addDynamicProperty(a),a}};function DynamicPropertyContainer(){}DynamicPropertyContainer.prototype={addDynamicProperty:function(t){-1===this.dynamicProperties.indexOf(t)&&(this.dynamicProperties.push(t),this.container.addDynamicProperty(this),this._isAnimated=!0)},iterateDynamicProperties:function(){var t;this._mdf=!1;var e=this.dynamicProperties.length;for(t=0;t<e;t+=1)this.dynamicProperties[t].getValue(),this.dynamicProperties[t]._mdf&&(this._mdf=!0)},initDynamicPropertyContainer:function(t){this.container=t,this.dynamicProperties=[],this._mdf=!1,this._isAnimated=!1}};var pointPool=poolFactory(8,(function(){return createTypedArray("float32",2)}));function ShapePath(){this.c=!1,this._length=0,this._maxLength=8,this.v=createSizedArray(this._maxLength),this.o=createSizedArray(this._maxLength),this.i=createSizedArray(this._maxLength)}ShapePath.prototype.setPathData=function(t,e){this.c=t,this.setLength(e);for(var r=0;r<e;)this.v[r]=pointPool.newElement(),this.o[r]=pointPool.newElement(),this.i[r]=pointPool.newElement(),r+=1},ShapePath.prototype.setLength=function(t){for(;this._maxLength<t;)this.doubleArrayLength();this._length=t},ShapePath.prototype.doubleArrayLength=function(){this.v=this.v.concat(createSizedArray(this._maxLength)),this.i=this.i.concat(createSizedArray(this._maxLength)),this.o=this.o.concat(createSizedArray(this._maxLength)),this._maxLength*=2},ShapePath.prototype.setXYAt=function(t,e,r,n,i){var a;switch(this._length=Math.max(this._length,n+1),this._length>=this._maxLength&&this.doubleArrayLength(),r){case"v":a=this.v;break;case"i":a=this.i;break;case"o":a=this.o;break;default:a=[]}(!a[n]||a[n]&&!i)&&(a[n]=pointPool.newElement()),a[n][0]=t,a[n][1]=e},ShapePath.prototype.setTripleAt=function(t,e,r,n,i,a,o,s){this.setXYAt(t,e,"v",o,s),this.setXYAt(r,n,"o",o,s),this.setXYAt(i,a,"i",o,s)},ShapePath.prototype.reverse=function(){var t=new ShapePath;t.setPathData(this.c,this._length);var e=this.v,r=this.o,n=this.i,i=0;this.c&&(t.setTripleAt(e[0][0],e[0][1],n[0][0],n[0][1],r[0][0],r[0][1],0,!1),i=1);var a,o=this._length-1,s=this._length;for(a=i;a<s;a+=1)t.setTripleAt(e[o][0],e[o][1],n[o][0],n[o][1],r[o][0],r[o][1],a,!1),o-=1;return t},ShapePath.prototype.length=function(){return this._length};var shapePool=(factory=poolFactory(4,(function(){return new ShapePath}),(function(t){var e,r=t._length;for(e=0;e<r;e+=1)pointPool.release(t.v[e]),pointPool.release(t.i[e]),pointPool.release(t.o[e]),t.v[e]=null,t.i[e]=null,t.o[e]=null;t._length=0,t.c=!1})),factory.clone=function(t){var e,r=factory.newElement(),n=void 0===t._length?t.v.length:t._length;for(r.setLength(n),r.c=t.c,e=0;e<n;e+=1)r.setTripleAt(t.v[e][0],t.v[e][1],t.o[e][0],t.o[e][1],t.i[e][0],t.i[e][1],e);return r},factory),factory;function ShapeCollection(){this._length=0,this._maxLength=4,this.shapes=createSizedArray(this._maxLength)}ShapeCollection.prototype.addShape=function(t){this._length===this._maxLength&&(this.shapes=this.shapes.concat(createSizedArray(this._maxLength)),this._maxLength*=2),this.shapes[this._length]=t,this._length+=1},ShapeCollection.prototype.releaseShapes=function(){var t;for(t=0;t<this._length;t+=1)shapePool.release(this.shapes[t]);this._length=0};var shapeCollectionPool=(ob={newShapeCollection:function(){return _length?pool[_length-=1]:new ShapeCollection},release:function(t){var e,r=t._length;for(e=0;e<r;e+=1)shapePool.release(t.shapes[e]);t._length=0,_length===_maxLength&&(pool=pooling.double(pool),_maxLength*=2),pool[_length]=t,_length+=1}},_length=0,_maxLength=4,pool=createSizedArray(_maxLength),ob),ob,_length,_maxLength,pool,ShapePropertyFactory=function(){var t=-999999;function e(t,e,r){var n,i,a,o,s,l,c,u,h,f=r.lastIndex,p=this.keyframes;if(t<p[0].t-this.offsetTime)n=p[0].s[0],a=!0,f=0;else if(t>=p[p.length-1].t-this.offsetTime)n=p[p.length-1].s?p[p.length-1].s[0]:p[p.length-2].e[0],a=!0;else{for(var d,m,y,v=f,g=p.length-1,b=!0;b&&(d=p[v],!((m=p[v+1]).t-this.offsetTime>t));)v<g-1?v+=1:b=!1;if(y=this.keyframesMetadata[v]||{},f=v,!(a=1===d.h)){if(t>=m.t-this.offsetTime)u=1;else if(t<d.t-this.offsetTime)u=0;else{var x;y.__fnct?x=y.__fnct:(x=BezierFactory.getBezierEasing(d.o.x,d.o.y,d.i.x,d.i.y).get,y.__fnct=x),u=x((t-(d.t-this.offsetTime))/(m.t-this.offsetTime-(d.t-this.offsetTime)))}i=m.s?m.s[0]:d.e[0]}n=d.s[0]}for(l=e._length,c=n.i[0].length,r.lastIndex=f,o=0;o<l;o+=1)for(s=0;s<c;s+=1)h=a?n.i[o][s]:n.i[o][s]+(i.i[o][s]-n.i[o][s])*u,e.i[o][s]=h,h=a?n.o[o][s]:n.o[o][s]+(i.o[o][s]-n.o[o][s])*u,e.o[o][s]=h,h=a?n.v[o][s]:n.v[o][s]+(i.v[o][s]-n.v[o][s])*u,e.v[o][s]=h}function r(){var e=this.comp.renderedFrame-this.offsetTime,r=this.keyframes[0].t-this.offsetTime,n=this.keyframes[this.keyframes.length-1].t-this.offsetTime,i=this._caching.lastFrame;return i!==t&&(i<r&&e<r||i>n&&e>n)||(this._caching.lastIndex=i<e?this._caching.lastIndex:0,this.interpolateShape(e,this.pv,this._caching)),this._caching.lastFrame=e,this.pv}function n(){this.paths=this.localShapeCollection}function i(t){(function(t,e){if(t._length!==e._length||t.c!==e.c)return!1;var r,n=t._length;for(r=0;r<n;r+=1)if(t.v[r][0]!==e.v[r][0]||t.v[r][1]!==e.v[r][1]||t.o[r][0]!==e.o[r][0]||t.o[r][1]!==e.o[r][1]||t.i[r][0]!==e.i[r][0]||t.i[r][1]!==e.i[r][1])return!1;return!0})(this.v,t)||(this.v=shapePool.clone(t),this.localShapeCollection.releaseShapes(),this.localShapeCollection.addShape(this.v),this._mdf=!0,this.paths=this.localShapeCollection)}function a(){if(this.elem.globalData.frameId!==this.frameId)if(this.effectsSequence.length)if(this.lock)this.setVValue(this.pv);else{var t,e;this.lock=!0,this._mdf=!1,t=this.kf?this.pv:this.data.ks?this.data.ks.k:this.data.pt.k;var r=this.effectsSequence.length;for(e=0;e<r;e+=1)t=this.effectsSequence[e](t);this.setVValue(t),this.lock=!1,this.frameId=this.elem.globalData.frameId}else this._mdf=!1}function o(t,e,r){this.propType="shape",this.comp=t.comp,this.container=t,this.elem=t,this.data=e,this.k=!1,this.kf=!1,this._mdf=!1;var i=3===r?e.pt.k:e.ks.k;this.v=shapePool.clone(i),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.reset=n,this.effectsSequence=[]}function s(t){this.effectsSequence.push(t),this.container.addDynamicProperty(this)}function l(e,i,a){this.propType="shape",this.comp=e.comp,this.elem=e,this.container=e,this.offsetTime=e.data.st,this.keyframes=3===a?i.pt.k:i.ks.k,this.keyframesMetadata=[],this.k=!0,this.kf=!0;var o=this.keyframes[0].s[0].i.length;this.v=shapePool.newElement(),this.v.setPathData(this.keyframes[0].s[0].c,o),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.lastFrame=t,this.reset=n,this._caching={lastFrame:t,lastIndex:0},this.effectsSequence=[r.bind(this)]}o.prototype.interpolateShape=e,o.prototype.getValue=a,o.prototype.setVValue=i,o.prototype.addEffect=s,l.prototype.getValue=a,l.prototype.interpolateShape=e,l.prototype.setVValue=i,l.prototype.addEffect=s;var c=function(){var t=roundCorner;function e(t,e){this.v=shapePool.newElement(),this.v.setPathData(!0,4),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.localShapeCollection.addShape(this.v),this.d=e.d,this.elem=t,this.comp=t.comp,this.frameId=-1,this.initDynamicPropertyContainer(t),this.p=PropertyFactory.getProp(t,e.p,1,0,this),this.s=PropertyFactory.getProp(t,e.s,1,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertEllToPath())}return e.prototype={reset:n,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertEllToPath())},convertEllToPath:function(){var e=this.p.v[0],r=this.p.v[1],n=this.s.v[0]/2,i=this.s.v[1]/2,a=3!==this.d,o=this.v;o.v[0][0]=e,o.v[0][1]=r-i,o.v[1][0]=a?e+n:e-n,o.v[1][1]=r,o.v[2][0]=e,o.v[2][1]=r+i,o.v[3][0]=a?e-n:e+n,o.v[3][1]=r,o.i[0][0]=a?e-n*t:e+n*t,o.i[0][1]=r-i,o.i[1][0]=a?e+n:e-n,o.i[1][1]=r-i*t,o.i[2][0]=a?e+n*t:e-n*t,o.i[2][1]=r+i,o.i[3][0]=a?e-n:e+n,o.i[3][1]=r+i*t,o.o[0][0]=a?e+n*t:e-n*t,o.o[0][1]=r-i,o.o[1][0]=a?e+n:e-n,o.o[1][1]=r+i*t,o.o[2][0]=a?e-n*t:e+n*t,o.o[2][1]=r+i,o.o[3][0]=a?e-n:e+n,o.o[3][1]=r-i*t}},extendPrototype([DynamicPropertyContainer],e),e}(),u=function(){function t(t,e){this.v=shapePool.newElement(),this.v.setPathData(!0,0),this.elem=t,this.comp=t.comp,this.data=e,this.frameId=-1,this.d=e.d,this.initDynamicPropertyContainer(t),1===e.sy?(this.ir=PropertyFactory.getProp(t,e.ir,0,0,this),this.is=PropertyFactory.getProp(t,e.is,0,.01,this),this.convertToPath=this.convertStarToPath):this.convertToPath=this.convertPolygonToPath,this.pt=PropertyFactory.getProp(t,e.pt,0,0,this),this.p=PropertyFactory.getProp(t,e.p,1,0,this),this.r=PropertyFactory.getProp(t,e.r,0,degToRads,this),this.or=PropertyFactory.getProp(t,e.or,0,0,this),this.os=PropertyFactory.getProp(t,e.os,0,.01,this),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertToPath())}return t.prototype={reset:n,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertToPath())},convertStarToPath:function(){var t,e,r,n,i=2*Math.floor(this.pt.v),a=2*Math.PI/i,o=!0,s=this.or.v,l=this.ir.v,c=this.os.v,u=this.is.v,h=2*Math.PI*s/(2*i),f=2*Math.PI*l/(2*i),p=-Math.PI/2;p+=this.r.v;var d=3===this.data.d?-1:1;for(this.v._length=0,t=0;t<i;t+=1){r=o?c:u,n=o?h:f;var m=(e=o?s:l)*Math.cos(p),y=e*Math.sin(p),v=0===m&&0===y?0:y/Math.sqrt(m*m+y*y),g=0===m&&0===y?0:-m/Math.sqrt(m*m+y*y);m+=+this.p.v[0],y+=+this.p.v[1],this.v.setTripleAt(m,y,m-v*n*r*d,y-g*n*r*d,m+v*n*r*d,y+g*n*r*d,t,!0),o=!o,p+=a*d}},convertPolygonToPath:function(){var t,e=Math.floor(this.pt.v),r=2*Math.PI/e,n=this.or.v,i=this.os.v,a=2*Math.PI*n/(4*e),o=.5*-Math.PI,s=3===this.data.d?-1:1;for(o+=this.r.v,this.v._length=0,t=0;t<e;t+=1){var l=n*Math.cos(o),c=n*Math.sin(o),u=0===l&&0===c?0:c/Math.sqrt(l*l+c*c),h=0===l&&0===c?0:-l/Math.sqrt(l*l+c*c);l+=+this.p.v[0],c+=+this.p.v[1],this.v.setTripleAt(l,c,l-u*a*i*s,c-h*a*i*s,l+u*a*i*s,c+h*a*i*s,t,!0),o+=r*s}this.paths.length=0,this.paths[0]=this.v}},extendPrototype([DynamicPropertyContainer],t),t}(),h=function(){function t(t,e){this.v=shapePool.newElement(),this.v.c=!0,this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.elem=t,this.comp=t.comp,this.frameId=-1,this.d=e.d,this.initDynamicPropertyContainer(t),this.p=PropertyFactory.getProp(t,e.p,1,0,this),this.s=PropertyFactory.getProp(t,e.s,1,0,this),this.r=PropertyFactory.getProp(t,e.r,0,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertRectToPath())}return t.prototype={convertRectToPath:function(){var t=this.p.v[0],e=this.p.v[1],r=this.s.v[0]/2,n=this.s.v[1]/2,i=bmMin(r,n,this.r.v),a=i*(1-roundCorner);this.v._length=0,2===this.d||1===this.d?(this.v.setTripleAt(t+r,e-n+i,t+r,e-n+i,t+r,e-n+a,0,!0),this.v.setTripleAt(t+r,e+n-i,t+r,e+n-a,t+r,e+n-i,1,!0),0!==i?(this.v.setTripleAt(t+r-i,e+n,t+r-i,e+n,t+r-a,e+n,2,!0),this.v.setTripleAt(t-r+i,e+n,t-r+a,e+n,t-r+i,e+n,3,!0),this.v.setTripleAt(t-r,e+n-i,t-r,e+n-i,t-r,e+n-a,4,!0),this.v.setTripleAt(t-r,e-n+i,t-r,e-n+a,t-r,e-n+i,5,!0),this.v.setTripleAt(t-r+i,e-n,t-r+i,e-n,t-r+a,e-n,6,!0),this.v.setTripleAt(t+r-i,e-n,t+r-a,e-n,t+r-i,e-n,7,!0)):(this.v.setTripleAt(t-r,e+n,t-r+a,e+n,t-r,e+n,2),this.v.setTripleAt(t-r,e-n,t-r,e-n+a,t-r,e-n,3))):(this.v.setTripleAt(t+r,e-n+i,t+r,e-n+a,t+r,e-n+i,0,!0),0!==i?(this.v.setTripleAt(t+r-i,e-n,t+r-i,e-n,t+r-a,e-n,1,!0),this.v.setTripleAt(t-r+i,e-n,t-r+a,e-n,t-r+i,e-n,2,!0),this.v.setTripleAt(t-r,e-n+i,t-r,e-n+i,t-r,e-n+a,3,!0),this.v.setTripleAt(t-r,e+n-i,t-r,e+n-a,t-r,e+n-i,4,!0),this.v.setTripleAt(t-r+i,e+n,t-r+i,e+n,t-r+a,e+n,5,!0),this.v.setTripleAt(t+r-i,e+n,t+r-a,e+n,t+r-i,e+n,6,!0),this.v.setTripleAt(t+r,e+n-i,t+r,e+n-i,t+r,e+n-a,7,!0)):(this.v.setTripleAt(t-r,e-n,t-r+a,e-n,t-r,e-n,1,!0),this.v.setTripleAt(t-r,e+n,t-r,e+n-a,t-r,e+n,2,!0),this.v.setTripleAt(t+r,e+n,t+r-a,e+n,t+r,e+n,3,!0)))},getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertRectToPath())},reset:n},extendPrototype([DynamicPropertyContainer],t),t}();return{getShapeProp:function(t,e,r){var n;return 3===r||4===r?n=(3===r?e.pt:e.ks).k.length?new l(t,e,r):new o(t,e,r):5===r?n=new h(t,e):6===r?n=new c(t,e):7===r&&(n=new u(t,e)),n.k&&t.addDynamicProperty(n),n},getConstructorFunction:function(){return o},getKeyframedConstructorFunction:function(){return l}}}(),Matrix=function(){var t=Math.cos,e=Math.sin,r=Math.tan,n=Math.round;function i(){return this.props[0]=1,this.props[1]=0,this.props[2]=0,this.props[3]=0,this.props[4]=0,this.props[5]=1,this.props[6]=0,this.props[7]=0,this.props[8]=0,this.props[9]=0,this.props[10]=1,this.props[11]=0,this.props[12]=0,this.props[13]=0,this.props[14]=0,this.props[15]=1,this}function a(r){if(0===r)return this;var n=t(r),i=e(r);return this._t(n,-i,0,0,i,n,0,0,0,0,1,0,0,0,0,1)}function o(r){if(0===r)return this;var n=t(r),i=e(r);return this._t(1,0,0,0,0,n,-i,0,0,i,n,0,0,0,0,1)}function s(r){if(0===r)return this;var n=t(r),i=e(r);return this._t(n,0,i,0,0,1,0,0,-i,0,n,0,0,0,0,1)}function l(r){if(0===r)return this;var n=t(r),i=e(r);return this._t(n,-i,0,0,i,n,0,0,0,0,1,0,0,0,0,1)}function c(t,e){return this._t(1,e,t,1,0,0)}function u(t,e){return this.shear(r(t),r(e))}function h(n,i){var a=t(i),o=e(i);return this._t(a,o,0,0,-o,a,0,0,0,0,1,0,0,0,0,1)._t(1,0,0,0,r(n),1,0,0,0,0,1,0,0,0,0,1)._t(a,-o,0,0,o,a,0,0,0,0,1,0,0,0,0,1)}function f(t,e,r){return r||0===r||(r=1),1===t&&1===e&&1===r?this:this._t(t,0,0,0,0,e,0,0,0,0,r,0,0,0,0,1)}function p(t,e,r,n,i,a,o,s,l,c,u,h,f,p,d,m){return this.props[0]=t,this.props[1]=e,this.props[2]=r,this.props[3]=n,this.props[4]=i,this.props[5]=a,this.props[6]=o,this.props[7]=s,this.props[8]=l,this.props[9]=c,this.props[10]=u,this.props[11]=h,this.props[12]=f,this.props[13]=p,this.props[14]=d,this.props[15]=m,this}function d(t,e,r){return r=r||0,0!==t||0!==e||0!==r?this._t(1,0,0,0,0,1,0,0,0,0,1,0,t,e,r,1):this}function m(t,e,r,n,i,a,o,s,l,c,u,h,f,p,d,m){var y=this.props;if(1===t&&0===e&&0===r&&0===n&&0===i&&1===a&&0===o&&0===s&&0===l&&0===c&&1===u&&0===h)return y[12]=y[12]*t+y[15]*f,y[13]=y[13]*a+y[15]*p,y[14]=y[14]*u+y[15]*d,y[15]*=m,this._identityCalculated=!1,this;var v=y[0],g=y[1],b=y[2],x=y[3],w=y[4],E=y[5],k=y[6],S=y[7],_=y[8],P=y[9],C=y[10],A=y[11],T=y[12],M=y[13],D=y[14],L=y[15];return y[0]=v*t+g*i+b*l+x*f,y[1]=v*e+g*a+b*c+x*p,y[2]=v*r+g*o+b*u+x*d,y[3]=v*n+g*s+b*h+x*m,y[4]=w*t+E*i+k*l+S*f,y[5]=w*e+E*a+k*c+S*p,y[6]=w*r+E*o+k*u+S*d,y[7]=w*n+E*s+k*h+S*m,y[8]=_*t+P*i+C*l+A*f,y[9]=_*e+P*a+C*c+A*p,y[10]=_*r+P*o+C*u+A*d,y[11]=_*n+P*s+C*h+A*m,y[12]=T*t+M*i+D*l+L*f,y[13]=T*e+M*a+D*c+L*p,y[14]=T*r+M*o+D*u+L*d,y[15]=T*n+M*s+D*h+L*m,this._identityCalculated=!1,this}function y(t){var e=t.props;return this.transform(e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8],e[9],e[10],e[11],e[12],e[13],e[14],e[15])}function v(){return this._identityCalculated||(this._identity=!(1!==this.props[0]||0!==this.props[1]||0!==this.props[2]||0!==this.props[3]||0!==this.props[4]||1!==this.props[5]||0!==this.props[6]||0!==this.props[7]||0!==this.props[8]||0!==this.props[9]||1!==this.props[10]||0!==this.props[11]||0!==this.props[12]||0!==this.props[13]||0!==this.props[14]||1!==this.props[15]),this._identityCalculated=!0),this._identity}function g(t){for(var e=0;e<16;){if(t.props[e]!==this.props[e])return!1;e+=1}return!0}function b(t){var e;for(e=0;e<16;e+=1)t.props[e]=this.props[e];return t}function x(t){var e;for(e=0;e<16;e+=1)this.props[e]=t[e]}function w(t,e,r){return{x:t*this.props[0]+e*this.props[4]+r*this.props[8]+this.props[12],y:t*this.props[1]+e*this.props[5]+r*this.props[9]+this.props[13],z:t*this.props[2]+e*this.props[6]+r*this.props[10]+this.props[14]}}function E(t,e,r){return t*this.props[0]+e*this.props[4]+r*this.props[8]+this.props[12]}function k(t,e,r){return t*this.props[1]+e*this.props[5]+r*this.props[9]+this.props[13]}function S(t,e,r){return t*this.props[2]+e*this.props[6]+r*this.props[10]+this.props[14]}function _(){var t=this.props[0]*this.props[5]-this.props[1]*this.props[4],e=this.props[5]/t,r=-this.props[1]/t,n=-this.props[4]/t,i=this.props[0]/t,a=(this.props[4]*this.props[13]-this.props[5]*this.props[12])/t,o=-(this.props[0]*this.props[13]-this.props[1]*this.props[12])/t,s=new Matrix;return s.props[0]=e,s.props[1]=r,s.props[4]=n,s.props[5]=i,s.props[12]=a,s.props[13]=o,s}function P(t){return this.getInverseMatrix().applyToPointArray(t[0],t[1],t[2]||0)}function C(t){var e,r=t.length,n=[];for(e=0;e<r;e+=1)n[e]=P(t[e]);return n}function A(t,e,r){var n=createTypedArray("float32",6);if(this.isIdentity())n[0]=t[0],n[1]=t[1],n[2]=e[0],n[3]=e[1],n[4]=r[0],n[5]=r[1];else{var i=this.props[0],a=this.props[1],o=this.props[4],s=this.props[5],l=this.props[12],c=this.props[13];n[0]=t[0]*i+t[1]*o+l,n[1]=t[0]*a+t[1]*s+c,n[2]=e[0]*i+e[1]*o+l,n[3]=e[0]*a+e[1]*s+c,n[4]=r[0]*i+r[1]*o+l,n[5]=r[0]*a+r[1]*s+c}return n}function T(t,e,r){return this.isIdentity()?[t,e,r]:[t*this.props[0]+e*this.props[4]+r*this.props[8]+this.props[12],t*this.props[1]+e*this.props[5]+r*this.props[9]+this.props[13],t*this.props[2]+e*this.props[6]+r*this.props[10]+this.props[14]]}function M(t,e){if(this.isIdentity())return t+","+e;var r=this.props;return Math.round(100*(t*r[0]+e*r[4]+r[12]))/100+","+Math.round(100*(t*r[1]+e*r[5]+r[13]))/100}function D(){for(var t=0,e=this.props,r="matrix3d(";t<16;)r+=n(1e4*e[t])/1e4,r+=15===t?")":",",t+=1;return r}function L(t){return t<1e-6&&t>0||t>-1e-6&&t<0?n(1e4*t)/1e4:t}function O(){var t=this.props;return"matrix("+L(t[0])+","+L(t[1])+","+L(t[4])+","+L(t[5])+","+L(t[12])+","+L(t[13])+")"}return function(){this.reset=i,this.rotate=a,this.rotateX=o,this.rotateY=s,this.rotateZ=l,this.skew=u,this.skewFromAxis=h,this.shear=c,this.scale=f,this.setTransform=p,this.translate=d,this.transform=m,this.multiply=y,this.applyToPoint=w,this.applyToX=E,this.applyToY=k,this.applyToZ=S,this.applyToPointArray=T,this.applyToTriplePoints=A,this.applyToPointStringified=M,this.toCSS=D,this.to2dCSS=O,this.clone=b,this.cloneFromProps=x,this.equals=g,this.inversePoints=C,this.inversePoint=P,this.getInverseMatrix=_,this._t=this.transform,this.isIdentity=v,this._identity=!0,this._identityCalculated=!1,this.props=createTypedArray("float32",16),this.reset()}}();function _typeof$3(t){return _typeof$3="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$3(t)}var lottie={},standalone="__[STANDALONE]__",animationData="__[ANIMATIONDATA]__",renderer="";function setLocation(t){setLocationHref(t)}function searchAnimations(){!0===standalone?animationManager.searchAnimations(animationData,standalone,renderer):animationManager.searchAnimations()}function setSubframeRendering(t){setSubframeEnabled(t)}function setPrefix(t){setIdPrefix(t)}function loadAnimation(t){return!0===standalone&&(t.animationData=JSON.parse(animationData)),animationManager.loadAnimation(t)}function setQuality(t){if("string"==typeof t)switch(t){case"high":setDefaultCurveSegments(200);break;default:case"medium":setDefaultCurveSegments(50);break;case"low":setDefaultCurveSegments(10)}else!isNaN(t)&&t>1&&setDefaultCurveSegments(t);getDefaultCurveSegments()>=50?roundValues(!1):roundValues(!0)}function inBrowser(){return"undefined"!=typeof navigator}function installPlugin(t,e){"expressions"===t&&setExpressionsPlugin(e)}function getFactory(t){switch(t){case"propertyFactory":return PropertyFactory;case"shapePropertyFactory":return ShapePropertyFactory;case"matrix":return Matrix;default:return null}}function checkReady(){"complete"===document.readyState&&(clearInterval(readyStateCheckInterval),searchAnimations())}function getQueryVariable(t){for(var e=queryString.split("&"),r=0;r<e.length;r+=1){var n=e[r].split("=");if(decodeURIComponent(n[0])==t)return decodeURIComponent(n[1])}return null}lottie.play=animationManager.play,lottie.pause=animationManager.pause,lottie.setLocationHref=setLocation,lottie.togglePause=animationManager.togglePause,lottie.setSpeed=animationManager.setSpeed,lottie.setDirection=animationManager.setDirection,lottie.stop=animationManager.stop,lottie.searchAnimations=searchAnimations,lottie.registerAnimation=animationManager.registerAnimation,lottie.loadAnimation=loadAnimation,lottie.setSubframeRendering=setSubframeRendering,lottie.resize=animationManager.resize,lottie.goToAndStop=animationManager.goToAndStop,lottie.destroy=animationManager.destroy,lottie.setQuality=setQuality,lottie.inBrowser=inBrowser,lottie.installPlugin=installPlugin,lottie.freeze=animationManager.freeze,lottie.unfreeze=animationManager.unfreeze,lottie.setVolume=animationManager.setVolume,lottie.mute=animationManager.mute,lottie.unmute=animationManager.unmute,lottie.getRegisteredAnimations=animationManager.getRegisteredAnimations,lottie.useWebWorker=setWebWorker,lottie.setIDPrefix=setPrefix,lottie.__getFactory=getFactory,lottie.version="5.12.2";var queryString="";if(standalone){var scripts=document.getElementsByTagName("script"),index=scripts.length-1,myScript=scripts[index]||{src:""};queryString=myScript.src?myScript.src.replace(/^[^\?]+\??/,""):"",renderer=getQueryVariable("renderer")}var readyStateCheckInterval=setInterval(checkReady,100);try{"object"!==_typeof$3(exports)&&__webpack_require__.amdO}catch(t){}var ShapeModifiers=function(){var t={},e={};return t.registerModifier=function(t,r){e[t]||(e[t]=r)},t.getModifier=function(t,r,n){return new e[t](r,n)},t}();function ShapeModifier(){}function TrimModifier(){}function PuckerAndBloatModifier(){}ShapeModifier.prototype.initModifierProperties=function(){},ShapeModifier.prototype.addShapeToModifier=function(){},ShapeModifier.prototype.addShape=function(t){if(!this.closed){t.sh.container.addDynamicProperty(t.sh);var e={shape:t.sh,data:t,localShapeCollection:shapeCollectionPool.newShapeCollection()};this.shapes.push(e),this.addShapeToModifier(e),this._isAnimated&&t.setAsAnimated()}},ShapeModifier.prototype.init=function(t,e){this.shapes=[],this.elem=t,this.initDynamicPropertyContainer(t),this.initModifierProperties(t,e),this.frameId=initialDefaultFrame,this.closed=!1,this.k=!1,this.dynamicProperties.length?this.k=!0:this.getValue(!0)},ShapeModifier.prototype.processKeys=function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties())},extendPrototype([DynamicPropertyContainer],ShapeModifier),extendPrototype([ShapeModifier],TrimModifier),TrimModifier.prototype.initModifierProperties=function(t,e){this.s=PropertyFactory.getProp(t,e.s,0,.01,this),this.e=PropertyFactory.getProp(t,e.e,0,.01,this),this.o=PropertyFactory.getProp(t,e.o,0,0,this),this.sValue=0,this.eValue=0,this.getValue=this.processKeys,this.m=e.m,this._isAnimated=!!this.s.effectsSequence.length||!!this.e.effectsSequence.length||!!this.o.effectsSequence.length},TrimModifier.prototype.addShapeToModifier=function(t){t.pathsData=[]},TrimModifier.prototype.calculateShapeEdges=function(t,e,r,n,i){var a=[];e<=1?a.push({s:t,e}):t>=1?a.push({s:t-1,e:e-1}):(a.push({s:t,e:1}),a.push({s:0,e:e-1}));var o,s,l=[],c=a.length;for(o=0;o<c;o+=1){var u,h;(s=a[o]).e*i<n||s.s*i>n+r||(u=s.s*i<=n?0:(s.s*i-n)/r,h=s.e*i>=n+r?1:(s.e*i-n)/r,l.push([u,h]))}return l.length||l.push([0,0]),l},TrimModifier.prototype.releasePathsData=function(t){var e,r=t.length;for(e=0;e<r;e+=1)segmentsLengthPool.release(t[e]);return t.length=0,t},TrimModifier.prototype.processShapes=function(t){var e,r,n,i;if(this._mdf||t){var a=this.o.v%360/360;if(a<0&&(a+=1),(e=this.s.v>1?1+a:this.s.v<0?0+a:this.s.v+a)>(r=this.e.v>1?1+a:this.e.v<0?0+a:this.e.v+a)){var o=e;e=r,r=o}e=1e-4*Math.round(1e4*e),r=1e-4*Math.round(1e4*r),this.sValue=e,this.eValue=r}else e=this.sValue,r=this.eValue;var s,l,c,u,h,f=this.shapes.length,p=0;if(r===e)for(i=0;i<f;i+=1)this.shapes[i].localShapeCollection.releaseShapes(),this.shapes[i].shape._mdf=!0,this.shapes[i].shape.paths=this.shapes[i].localShapeCollection,this._mdf&&(this.shapes[i].pathsData.length=0);else if(1===r&&0===e||0===r&&1===e){if(this._mdf)for(i=0;i<f;i+=1)this.shapes[i].pathsData.length=0,this.shapes[i].shape._mdf=!0}else{var d,m,y=[];for(i=0;i<f;i+=1)if((d=this.shapes[i]).shape._mdf||this._mdf||t||2===this.m){if(l=(n=d.shape.paths)._length,h=0,!d.shape._mdf&&d.pathsData.length)h=d.totalShapeLength;else{for(c=this.releasePathsData(d.pathsData),s=0;s<l;s+=1)u=bez.getSegmentsLength(n.shapes[s]),c.push(u),h+=u.totalLength;d.totalShapeLength=h,d.pathsData=c}p+=h,d.shape._mdf=!0}else d.shape.paths=d.localShapeCollection;var v,g=e,b=r,x=0;for(i=f-1;i>=0;i-=1)if((d=this.shapes[i]).shape._mdf){for((m=d.localShapeCollection).releaseShapes(),2===this.m&&f>1?(v=this.calculateShapeEdges(e,r,d.totalShapeLength,x,p),x+=d.totalShapeLength):v=[[g,b]],l=v.length,s=0;s<l;s+=1){g=v[s][0],b=v[s][1],y.length=0,b<=1?y.push({s:d.totalShapeLength*g,e:d.totalShapeLength*b}):g>=1?y.push({s:d.totalShapeLength*(g-1),e:d.totalShapeLength*(b-1)}):(y.push({s:d.totalShapeLength*g,e:d.totalShapeLength}),y.push({s:0,e:d.totalShapeLength*(b-1)}));var w=this.addShapes(d,y[0]);if(y[0].s!==y[0].e){if(y.length>1)if(d.shape.paths.shapes[d.shape.paths._length-1].c){var E=w.pop();this.addPaths(w,m),w=this.addShapes(d,y[1],E)}else this.addPaths(w,m),w=this.addShapes(d,y[1]);this.addPaths(w,m)}}d.shape.paths=m}}},TrimModifier.prototype.addPaths=function(t,e){var r,n=t.length;for(r=0;r<n;r+=1)e.addShape(t[r])},TrimModifier.prototype.addSegment=function(t,e,r,n,i,a,o){i.setXYAt(e[0],e[1],"o",a),i.setXYAt(r[0],r[1],"i",a+1),o&&i.setXYAt(t[0],t[1],"v",a),i.setXYAt(n[0],n[1],"v",a+1)},TrimModifier.prototype.addSegmentFromArray=function(t,e,r,n){e.setXYAt(t[1],t[5],"o",r),e.setXYAt(t[2],t[6],"i",r+1),n&&e.setXYAt(t[0],t[4],"v",r),e.setXYAt(t[3],t[7],"v",r+1)},TrimModifier.prototype.addShapes=function(t,e,r){var n,i,a,o,s,l,c,u,h=t.pathsData,f=t.shape.paths.shapes,p=t.shape.paths._length,d=0,m=[],y=!0;for(r?(s=r._length,u=r._length):(r=shapePool.newElement(),s=0,u=0),m.push(r),n=0;n<p;n+=1){for(l=h[n].lengths,r.c=f[n].c,a=f[n].c?l.length:l.length+1,i=1;i<a;i+=1)if(d+(o=l[i-1]).addedLength<e.s)d+=o.addedLength,r.c=!1;else{if(d>e.e){r.c=!1;break}e.s<=d&&e.e>=d+o.addedLength?(this.addSegment(f[n].v[i-1],f[n].o[i-1],f[n].i[i],f[n].v[i],r,s,y),y=!1):(c=bez.getNewSegment(f[n].v[i-1],f[n].v[i],f[n].o[i-1],f[n].i[i],(e.s-d)/o.addedLength,(e.e-d)/o.addedLength,l[i-1]),this.addSegmentFromArray(c,r,s,y),y=!1,r.c=!1),d+=o.addedLength,s+=1}if(f[n].c&&l.length){if(o=l[i-1],d<=e.e){var v=l[i-1].addedLength;e.s<=d&&e.e>=d+v?(this.addSegment(f[n].v[i-1],f[n].o[i-1],f[n].i[0],f[n].v[0],r,s,y),y=!1):(c=bez.getNewSegment(f[n].v[i-1],f[n].v[0],f[n].o[i-1],f[n].i[0],(e.s-d)/v,(e.e-d)/v,l[i-1]),this.addSegmentFromArray(c,r,s,y),y=!1,r.c=!1)}else r.c=!1;d+=o.addedLength,s+=1}if(r._length&&(r.setXYAt(r.v[u][0],r.v[u][1],"i",u),r.setXYAt(r.v[r._length-1][0],r.v[r._length-1][1],"o",r._length-1)),d>e.e)break;n<p-1&&(r=shapePool.newElement(),y=!0,m.push(r),s=0)}return m},extendPrototype([ShapeModifier],PuckerAndBloatModifier),PuckerAndBloatModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(t,e.a,0,null,this),this._isAnimated=!!this.amount.effectsSequence.length},PuckerAndBloatModifier.prototype.processPath=function(t,e){var r=e/100,n=[0,0],i=t._length,a=0;for(a=0;a<i;a+=1)n[0]+=t.v[a][0],n[1]+=t.v[a][1];n[0]/=i,n[1]/=i;var o,s,l,c,u,h,f=shapePool.newElement();for(f.c=t.c,a=0;a<i;a+=1)o=t.v[a][0]+(n[0]-t.v[a][0])*r,s=t.v[a][1]+(n[1]-t.v[a][1])*r,l=t.o[a][0]+(n[0]-t.o[a][0])*-r,c=t.o[a][1]+(n[1]-t.o[a][1])*-r,u=t.i[a][0]+(n[0]-t.i[a][0])*-r,h=t.i[a][1]+(n[1]-t.i[a][1])*-r,f.setTripleAt(o,s,l,c,u,h,a);return f},PuckerAndBloatModifier.prototype.processShapes=function(t){var e,r,n,i,a,o,s=this.shapes.length,l=this.amount.v;if(0!==l)for(r=0;r<s;r+=1){if(o=(a=this.shapes[r]).localShapeCollection,a.shape._mdf||this._mdf||t)for(o.releaseShapes(),a.shape._mdf=!0,e=a.shape.paths.shapes,i=a.shape.paths._length,n=0;n<i;n+=1)o.addShape(this.processPath(e[n],l));a.shape.paths=a.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)};var TransformPropertyFactory=function(){var t=[0,0];function e(t,e,r){if(this.elem=t,this.frameId=-1,this.propType="transform",this.data=e,this.v=new Matrix,this.pre=new Matrix,this.appliedTransformations=0,this.initDynamicPropertyContainer(r||t),e.p&&e.p.s?(this.px=PropertyFactory.getProp(t,e.p.x,0,0,this),this.py=PropertyFactory.getProp(t,e.p.y,0,0,this),e.p.z&&(this.pz=PropertyFactory.getProp(t,e.p.z,0,0,this))):this.p=PropertyFactory.getProp(t,e.p||{k:[0,0,0]},1,0,this),e.rx){if(this.rx=PropertyFactory.getProp(t,e.rx,0,degToRads,this),this.ry=PropertyFactory.getProp(t,e.ry,0,degToRads,this),this.rz=PropertyFactory.getProp(t,e.rz,0,degToRads,this),e.or.k[0].ti){var n,i=e.or.k.length;for(n=0;n<i;n+=1)e.or.k[n].to=null,e.or.k[n].ti=null}this.or=PropertyFactory.getProp(t,e.or,1,degToRads,this),this.or.sh=!0}else this.r=PropertyFactory.getProp(t,e.r||{k:0},0,degToRads,this);e.sk&&(this.sk=PropertyFactory.getProp(t,e.sk,0,degToRads,this),this.sa=PropertyFactory.getProp(t,e.sa,0,degToRads,this)),this.a=PropertyFactory.getProp(t,e.a||{k:[0,0,0]},1,0,this),this.s=PropertyFactory.getProp(t,e.s||{k:[100,100,100]},1,.01,this),e.o?this.o=PropertyFactory.getProp(t,e.o,0,.01,t):this.o={_mdf:!1,v:1},this._isDirty=!0,this.dynamicProperties.length||this.getValue(!0)}return e.prototype={applyToMatrix:function(t){var e=this._mdf;this.iterateDynamicProperties(),this._mdf=this._mdf||e,this.a&&t.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.s&&t.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&t.skewFromAxis(-this.sk.v,this.sa.v),this.r?t.rotate(-this.r.v):t.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.data.p.s?this.data.p.z?t.translate(this.px.v,this.py.v,-this.pz.v):t.translate(this.px.v,this.py.v,0):t.translate(this.p.v[0],this.p.v[1],-this.p.v[2])},getValue:function(e){if(this.elem.globalData.frameId!==this.frameId){if(this._isDirty&&(this.precalculateMatrix(),this._isDirty=!1),this.iterateDynamicProperties(),this._mdf||e){var r;if(this.v.cloneFromProps(this.pre.props),this.appliedTransformations<1&&this.v.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations<2&&this.v.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&this.appliedTransformations<3&&this.v.skewFromAxis(-this.sk.v,this.sa.v),this.r&&this.appliedTransformations<4?this.v.rotate(-this.r.v):!this.r&&this.appliedTransformations<4&&this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.autoOriented){var n,i;if(r=this.elem.globalData.frameRate,this.p&&this.p.keyframes&&this.p.getValueAtTime)this.p._caching.lastFrame+this.p.offsetTime<=this.p.keyframes[0].t?(n=this.p.getValueAtTime((this.p.keyframes[0].t+.01)/r,0),i=this.p.getValueAtTime(this.p.keyframes[0].t/r,0)):this.p._caching.lastFrame+this.p.offsetTime>=this.p.keyframes[this.p.keyframes.length-1].t?(n=this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length-1].t/r,0),i=this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length-1].t-.05)/r,0)):(n=this.p.pv,i=this.p.getValueAtTime((this.p._caching.lastFrame+this.p.offsetTime-.01)/r,this.p.offsetTime));else if(this.px&&this.px.keyframes&&this.py.keyframes&&this.px.getValueAtTime&&this.py.getValueAtTime){n=[],i=[];var a=this.px,o=this.py;a._caching.lastFrame+a.offsetTime<=a.keyframes[0].t?(n[0]=a.getValueAtTime((a.keyframes[0].t+.01)/r,0),n[1]=o.getValueAtTime((o.keyframes[0].t+.01)/r,0),i[0]=a.getValueAtTime(a.keyframes[0].t/r,0),i[1]=o.getValueAtTime(o.keyframes[0].t/r,0)):a._caching.lastFrame+a.offsetTime>=a.keyframes[a.keyframes.length-1].t?(n[0]=a.getValueAtTime(a.keyframes[a.keyframes.length-1].t/r,0),n[1]=o.getValueAtTime(o.keyframes[o.keyframes.length-1].t/r,0),i[0]=a.getValueAtTime((a.keyframes[a.keyframes.length-1].t-.01)/r,0),i[1]=o.getValueAtTime((o.keyframes[o.keyframes.length-1].t-.01)/r,0)):(n=[a.pv,o.pv],i[0]=a.getValueAtTime((a._caching.lastFrame+a.offsetTime-.01)/r,a.offsetTime),i[1]=o.getValueAtTime((o._caching.lastFrame+o.offsetTime-.01)/r,o.offsetTime))}else n=i=t;this.v.rotate(-Math.atan2(n[1]-i[1],n[0]-i[0]))}this.data.p&&this.data.p.s?this.data.p.z?this.v.translate(this.px.v,this.py.v,-this.pz.v):this.v.translate(this.px.v,this.py.v,0):this.v.translate(this.p.v[0],this.p.v[1],-this.p.v[2])}this.frameId=this.elem.globalData.frameId}},precalculateMatrix:function(){if(this.appliedTransformations=0,this.pre.reset(),!this.a.effectsSequence.length&&(this.pre.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations=1,!this.s.effectsSequence.length)){if(this.pre.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.appliedTransformations=2,this.sk){if(this.sk.effectsSequence.length||this.sa.effectsSequence.length)return;this.pre.skewFromAxis(-this.sk.v,this.sa.v),this.appliedTransformations=3}this.r?this.r.effectsSequence.length||(this.pre.rotate(-this.r.v),this.appliedTransformations=4):this.rz.effectsSequence.length||this.ry.effectsSequence.length||this.rx.effectsSequence.length||this.or.effectsSequence.length||(this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.appliedTransformations=4)}},autoOrient:function(){}},extendPrototype([DynamicPropertyContainer],e),e.prototype.addDynamicProperty=function(t){this._addDynamicProperty(t),this.elem.addDynamicProperty(t),this._isDirty=!0},e.prototype._addDynamicProperty=DynamicPropertyContainer.prototype.addDynamicProperty,{getTransformProperty:function(t,r,n){return new e(t,r,n)}}}();function RepeaterModifier(){}function RoundCornersModifier(){}function floatEqual(t,e){return 1e5*Math.abs(t-e)<=Math.min(Math.abs(t),Math.abs(e))}function floatZero(t){return Math.abs(t)<=1e-5}function lerp(t,e,r){return t*(1-r)+e*r}function lerpPoint(t,e,r){return[lerp(t[0],e[0],r),lerp(t[1],e[1],r)]}function quadRoots(t,e,r){if(0===t)return[];var n=e*e-4*t*r;if(n<0)return[];var i=-e/(2*t);if(0===n)return[i];var a=Math.sqrt(n)/(2*t);return[i-a,i+a]}function polynomialCoefficients(t,e,r,n){return[3*e-t-3*r+n,3*t-6*e+3*r,-3*t+3*e,t]}function singlePoint(t){return new PolynomialBezier(t,t,t,t,!1)}function PolynomialBezier(t,e,r,n,i){i&&pointEqual(t,e)&&(e=lerpPoint(t,n,1/3)),i&&pointEqual(r,n)&&(r=lerpPoint(t,n,2/3));var a=polynomialCoefficients(t[0],e[0],r[0],n[0]),o=polynomialCoefficients(t[1],e[1],r[1],n[1]);this.a=[a[0],o[0]],this.b=[a[1],o[1]],this.c=[a[2],o[2]],this.d=[a[3],o[3]],this.points=[t,e,r,n]}function extrema(t,e){var r=t.points[0][e],n=t.points[t.points.length-1][e];if(r>n){var i=n;n=r,r=i}for(var a=quadRoots(3*t.a[e],2*t.b[e],t.c[e]),o=0;o<a.length;o+=1)if(a[o]>0&&a[o]<1){var s=t.point(a[o])[e];s<r?r=s:s>n&&(n=s)}return{min:r,max:n}}function intersectData(t,e,r){var n=t.boundingBox();return{cx:n.cx,cy:n.cy,width:n.width,height:n.height,bez:t,t:(e+r)/2,t1:e,t2:r}}function splitData(t){var e=t.bez.split(.5);return[intersectData(e[0],t.t1,t.t),intersectData(e[1],t.t,t.t2)]}function boxIntersect(t,e){return 2*Math.abs(t.cx-e.cx)<t.width+e.width&&2*Math.abs(t.cy-e.cy)<t.height+e.height}function intersectsImpl(t,e,r,n,i,a){if(boxIntersect(t,e))if(r>=a||t.width<=n&&t.height<=n&&e.width<=n&&e.height<=n)i.push([t.t,e.t]);else{var o=splitData(t),s=splitData(e);intersectsImpl(o[0],s[0],r+1,n,i,a),intersectsImpl(o[0],s[1],r+1,n,i,a),intersectsImpl(o[1],s[0],r+1,n,i,a),intersectsImpl(o[1],s[1],r+1,n,i,a)}}function crossProduct(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function lineIntersection(t,e,r,n){var i=[t[0],t[1],1],a=[e[0],e[1],1],o=[r[0],r[1],1],s=[n[0],n[1],1],l=crossProduct(crossProduct(i,a),crossProduct(o,s));return floatZero(l[2])?null:[l[0]/l[2],l[1]/l[2]]}function polarOffset(t,e,r){return[t[0]+Math.cos(e)*r,t[1]-Math.sin(e)*r]}function pointDistance(t,e){return Math.hypot(t[0]-e[0],t[1]-e[1])}function pointEqual(t,e){return floatEqual(t[0],e[0])&&floatEqual(t[1],e[1])}function ZigZagModifier(){}function setPoint(t,e,r,n,i,a,o){var s=r-Math.PI/2,l=r+Math.PI/2,c=e[0]+Math.cos(r)*n*i,u=e[1]-Math.sin(r)*n*i;t.setTripleAt(c,u,c+Math.cos(s)*a,u-Math.sin(s)*a,c+Math.cos(l)*o,u-Math.sin(l)*o,t.length())}function getPerpendicularVector(t,e){var r=[e[0]-t[0],e[1]-t[1]],n=.5*-Math.PI;return[Math.cos(n)*r[0]-Math.sin(n)*r[1],Math.sin(n)*r[0]+Math.cos(n)*r[1]]}function getProjectingAngle(t,e){var r=0===e?t.length()-1:e-1,n=(e+1)%t.length(),i=getPerpendicularVector(t.v[r],t.v[n]);return Math.atan2(0,1)-Math.atan2(i[1],i[0])}function zigZagCorner(t,e,r,n,i,a,o){var s=getProjectingAngle(e,r),l=e.v[r%e._length],c=e.v[0===r?e._length-1:r-1],u=e.v[(r+1)%e._length],h=2===a?Math.sqrt(Math.pow(l[0]-c[0],2)+Math.pow(l[1]-c[1],2)):0,f=2===a?Math.sqrt(Math.pow(l[0]-u[0],2)+Math.pow(l[1]-u[1],2)):0;setPoint(t,e.v[r%e._length],s,o,n,f/(2*(i+1)),h/(2*(i+1)),a)}function zigZagSegment(t,e,r,n,i,a){for(var o=0;o<n;o+=1){var s=(o+1)/(n+1),l=2===i?Math.sqrt(Math.pow(e.points[3][0]-e.points[0][0],2)+Math.pow(e.points[3][1]-e.points[0][1],2)):0,c=e.normalAngle(s);setPoint(t,e.point(s),c,a,r,l/(2*(n+1)),l/(2*(n+1)),i),a=-a}return a}function linearOffset(t,e,r){var n=Math.atan2(e[0]-t[0],e[1]-t[1]);return[polarOffset(t,n,r),polarOffset(e,n,r)]}function offsetSegment(t,e){var r,n,i,a,o,s,l;r=(l=linearOffset(t.points[0],t.points[1],e))[0],n=l[1],i=(l=linearOffset(t.points[1],t.points[2],e))[0],a=l[1],o=(l=linearOffset(t.points[2],t.points[3],e))[0],s=l[1];var c=lineIntersection(r,n,i,a);null===c&&(c=n);var u=lineIntersection(o,s,i,a);return null===u&&(u=o),new PolynomialBezier(r,c,u,s)}function joinLines(t,e,r,n,i){var a=e.points[3],o=r.points[0];if(3===n)return a;if(pointEqual(a,o))return a;if(2===n){var s=-e.tangentAngle(1),l=-r.tangentAngle(0)+Math.PI,c=lineIntersection(a,polarOffset(a,s+Math.PI/2,100),o,polarOffset(o,s+Math.PI/2,100)),u=c?pointDistance(c,a):pointDistance(a,o)/2,h=polarOffset(a,s,2*u*roundCorner);return t.setXYAt(h[0],h[1],"o",t.length()-1),h=polarOffset(o,l,2*u*roundCorner),t.setTripleAt(o[0],o[1],o[0],o[1],h[0],h[1],t.length()),o}var f=lineIntersection(pointEqual(a,e.points[2])?e.points[0]:e.points[2],a,o,pointEqual(o,r.points[1])?r.points[3]:r.points[1]);return f&&pointDistance(f,a)<i?(t.setTripleAt(f[0],f[1],f[0],f[1],f[0],f[1],t.length()),f):a}function getIntersection(t,e){var r=t.intersections(e);return r.length&&floatEqual(r[0][0],1)&&r.shift(),r.length?r[0]:null}function pruneSegmentIntersection(t,e){var r=t.slice(),n=e.slice(),i=getIntersection(t[t.length-1],e[0]);return i&&(r[t.length-1]=t[t.length-1].split(i[0])[0],n[0]=e[0].split(i[1])[1]),t.length>1&&e.length>1&&(i=getIntersection(t[0],e[e.length-1]))?[[t[0].split(i[0])[0]],[e[e.length-1].split(i[1])[1]]]:[r,n]}function pruneIntersections(t){for(var e,r=1;r<t.length;r+=1)e=pruneSegmentIntersection(t[r-1],t[r]),t[r-1]=e[0],t[r]=e[1];return t.length>1&&(e=pruneSegmentIntersection(t[t.length-1],t[0]),t[t.length-1]=e[0],t[0]=e[1]),t}function offsetSegmentSplit(t,e){var r,n,i,a,o=t.inflectionPoints();if(0===o.length)return[offsetSegment(t,e)];if(1===o.length||floatEqual(o[1],1))return r=(i=t.split(o[0]))[0],n=i[1],[offsetSegment(r,e),offsetSegment(n,e)];r=(i=t.split(o[0]))[0];var s=(o[1]-o[0])/(1-o[0]);return a=(i=i[1].split(s))[0],n=i[1],[offsetSegment(r,e),offsetSegment(a,e),offsetSegment(n,e)]}function OffsetPathModifier(){}function getFontProperties(t){for(var e=t.fStyle?t.fStyle.split(" "):[],r="normal",n="normal",i=e.length,a=0;a<i;a+=1)switch(e[a].toLowerCase()){case"italic":n="italic";break;case"bold":r="700";break;case"black":r="900";break;case"medium":r="500";break;case"regular":case"normal":r="400";break;case"light":case"thin":r="200"}return{style:n,weight:t.fWeight||r}}extendPrototype([ShapeModifier],RepeaterModifier),RepeaterModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.c=PropertyFactory.getProp(t,e.c,0,null,this),this.o=PropertyFactory.getProp(t,e.o,0,null,this),this.tr=TransformPropertyFactory.getTransformProperty(t,e.tr,this),this.so=PropertyFactory.getProp(t,e.tr.so,0,.01,this),this.eo=PropertyFactory.getProp(t,e.tr.eo,0,.01,this),this.data=e,this.dynamicProperties.length||this.getValue(!0),this._isAnimated=!!this.dynamicProperties.length,this.pMatrix=new Matrix,this.rMatrix=new Matrix,this.sMatrix=new Matrix,this.tMatrix=new Matrix,this.matrix=new Matrix},RepeaterModifier.prototype.applyTransforms=function(t,e,r,n,i,a){var o=a?-1:1,s=n.s.v[0]+(1-n.s.v[0])*(1-i),l=n.s.v[1]+(1-n.s.v[1])*(1-i);t.translate(n.p.v[0]*o*i,n.p.v[1]*o*i,n.p.v[2]),e.translate(-n.a.v[0],-n.a.v[1],n.a.v[2]),e.rotate(-n.r.v*o*i),e.translate(n.a.v[0],n.a.v[1],n.a.v[2]),r.translate(-n.a.v[0],-n.a.v[1],n.a.v[2]),r.scale(a?1/s:s,a?1/l:l),r.translate(n.a.v[0],n.a.v[1],n.a.v[2])},RepeaterModifier.prototype.init=function(t,e,r,n){for(this.elem=t,this.arr=e,this.pos=r,this.elemsData=n,this._currentCopies=0,this._elements=[],this._groups=[],this.frameId=-1,this.initDynamicPropertyContainer(t),this.initModifierProperties(t,e[r]);r>0;)r-=1,this._elements.unshift(e[r]);this.dynamicProperties.length?this.k=!0:this.getValue(!0)},RepeaterModifier.prototype.resetElements=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e]._processed=!1,"gr"===t[e].ty&&this.resetElements(t[e].it)},RepeaterModifier.prototype.cloneElements=function(t){var e=JSON.parse(JSON.stringify(t));return this.resetElements(e),e},RepeaterModifier.prototype.changeGroupRender=function(t,e){var r,n=t.length;for(r=0;r<n;r+=1)t[r]._render=e,"gr"===t[r].ty&&this.changeGroupRender(t[r].it,e)},RepeaterModifier.prototype.processShapes=function(t){var e,r,n,i,a,o=!1;if(this._mdf||t){var s,l=Math.ceil(this.c.v);if(this._groups.length<l){for(;this._groups.length<l;){var c={it:this.cloneElements(this._elements),ty:"gr"};c.it.push({a:{a:0,ix:1,k:[0,0]},nm:"Transform",o:{a:0,ix:7,k:100},p:{a:0,ix:2,k:[0,0]},r:{a:1,ix:6,k:[{s:0,e:0,t:0},{s:0,e:0,t:1}]},s:{a:0,ix:3,k:[100,100]},sa:{a:0,ix:5,k:0},sk:{a:0,ix:4,k:0},ty:"tr"}),this.arr.splice(0,0,c),this._groups.splice(0,0,c),this._currentCopies+=1}this.elem.reloadShapes(),o=!0}for(a=0,n=0;n<=this._groups.length-1;n+=1){if(s=a<l,this._groups[n]._render=s,this.changeGroupRender(this._groups[n].it,s),!s){var u=this.elemsData[n].it,h=u[u.length-1];0!==h.transform.op.v?(h.transform.op._mdf=!0,h.transform.op.v=0):h.transform.op._mdf=!1}a+=1}this._currentCopies=l;var f=this.o.v,p=f%1,d=f>0?Math.floor(f):Math.ceil(f),m=this.pMatrix.props,y=this.rMatrix.props,v=this.sMatrix.props;this.pMatrix.reset(),this.rMatrix.reset(),this.sMatrix.reset(),this.tMatrix.reset(),this.matrix.reset();var g,b,x=0;if(f>0){for(;x<d;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),x+=1;p&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,p,!1),x+=p)}else if(f<0){for(;x>d;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!0),x-=1;p&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,-p,!0),x-=p)}for(n=1===this.data.m?0:this._currentCopies-1,i=1===this.data.m?1:-1,a=this._currentCopies;a;){if(b=(r=(e=this.elemsData[n].it)[e.length-1].transform.mProps.v.props).length,e[e.length-1].transform.mProps._mdf=!0,e[e.length-1].transform.op._mdf=!0,e[e.length-1].transform.op.v=1===this._currentCopies?this.so.v:this.so.v+(this.eo.v-this.so.v)*(n/(this._currentCopies-1)),0!==x){for((0!==n&&1===i||n!==this._currentCopies-1&&-1===i)&&this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),this.matrix.transform(y[0],y[1],y[2],y[3],y[4],y[5],y[6],y[7],y[8],y[9],y[10],y[11],y[12],y[13],y[14],y[15]),this.matrix.transform(v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7],v[8],v[9],v[10],v[11],v[12],v[13],v[14],v[15]),this.matrix.transform(m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],m[8],m[9],m[10],m[11],m[12],m[13],m[14],m[15]),g=0;g<b;g+=1)r[g]=this.matrix.props[g];this.matrix.reset()}else for(this.matrix.reset(),g=0;g<b;g+=1)r[g]=this.matrix.props[g];x+=1,a-=1,n+=i}}else for(a=this._currentCopies,n=0,i=1;a;)r=(e=this.elemsData[n].it)[e.length-1].transform.mProps.v.props,e[e.length-1].transform.mProps._mdf=!1,e[e.length-1].transform.op._mdf=!1,a-=1,n+=i;return o},RepeaterModifier.prototype.addShape=function(){},extendPrototype([ShapeModifier],RoundCornersModifier),RoundCornersModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.rd=PropertyFactory.getProp(t,e.r,0,null,this),this._isAnimated=!!this.rd.effectsSequence.length},RoundCornersModifier.prototype.processPath=function(t,e){var r,n=shapePool.newElement();n.c=t.c;var i,a,o,s,l,c,u,h,f,p,d,m,y=t._length,v=0;for(r=0;r<y;r+=1)i=t.v[r],o=t.o[r],a=t.i[r],i[0]===o[0]&&i[1]===o[1]&&i[0]===a[0]&&i[1]===a[1]?0!==r&&r!==y-1||t.c?(s=0===r?t.v[y-1]:t.v[r-1],c=(l=Math.sqrt(Math.pow(i[0]-s[0],2)+Math.pow(i[1]-s[1],2)))?Math.min(l/2,e)/l:0,u=d=i[0]+(s[0]-i[0])*c,h=m=i[1]-(i[1]-s[1])*c,f=u-(u-i[0])*roundCorner,p=h-(h-i[1])*roundCorner,n.setTripleAt(u,h,f,p,d,m,v),v+=1,s=r===y-1?t.v[0]:t.v[r+1],c=(l=Math.sqrt(Math.pow(i[0]-s[0],2)+Math.pow(i[1]-s[1],2)))?Math.min(l/2,e)/l:0,u=f=i[0]+(s[0]-i[0])*c,h=p=i[1]+(s[1]-i[1])*c,d=u-(u-i[0])*roundCorner,m=h-(h-i[1])*roundCorner,n.setTripleAt(u,h,f,p,d,m,v),v+=1):(n.setTripleAt(i[0],i[1],o[0],o[1],a[0],a[1],v),v+=1):(n.setTripleAt(t.v[r][0],t.v[r][1],t.o[r][0],t.o[r][1],t.i[r][0],t.i[r][1],v),v+=1);return n},RoundCornersModifier.prototype.processShapes=function(t){var e,r,n,i,a,o,s=this.shapes.length,l=this.rd.v;if(0!==l)for(r=0;r<s;r+=1){if(o=(a=this.shapes[r]).localShapeCollection,a.shape._mdf||this._mdf||t)for(o.releaseShapes(),a.shape._mdf=!0,e=a.shape.paths.shapes,i=a.shape.paths._length,n=0;n<i;n+=1)o.addShape(this.processPath(e[n],l));a.shape.paths=a.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)},PolynomialBezier.prototype.point=function(t){return[((this.a[0]*t+this.b[0])*t+this.c[0])*t+this.d[0],((this.a[1]*t+this.b[1])*t+this.c[1])*t+this.d[1]]},PolynomialBezier.prototype.derivative=function(t){return[(3*t*this.a[0]+2*this.b[0])*t+this.c[0],(3*t*this.a[1]+2*this.b[1])*t+this.c[1]]},PolynomialBezier.prototype.tangentAngle=function(t){var e=this.derivative(t);return Math.atan2(e[1],e[0])},PolynomialBezier.prototype.normalAngle=function(t){var e=this.derivative(t);return Math.atan2(e[0],e[1])},PolynomialBezier.prototype.inflectionPoints=function(){var t=this.a[1]*this.b[0]-this.a[0]*this.b[1];if(floatZero(t))return[];var e=-.5*(this.a[1]*this.c[0]-this.a[0]*this.c[1])/t,r=e*e-1/3*(this.b[1]*this.c[0]-this.b[0]*this.c[1])/t;if(r<0)return[];var n=Math.sqrt(r);return floatZero(n)?n>0&&n<1?[e]:[]:[e-n,e+n].filter((function(t){return t>0&&t<1}))},PolynomialBezier.prototype.split=function(t){if(t<=0)return[singlePoint(this.points[0]),this];if(t>=1)return[this,singlePoint(this.points[this.points.length-1])];var e=lerpPoint(this.points[0],this.points[1],t),r=lerpPoint(this.points[1],this.points[2],t),n=lerpPoint(this.points[2],this.points[3],t),i=lerpPoint(e,r,t),a=lerpPoint(r,n,t),o=lerpPoint(i,a,t);return[new PolynomialBezier(this.points[0],e,i,o,!0),new PolynomialBezier(o,a,n,this.points[3],!0)]},PolynomialBezier.prototype.bounds=function(){return{x:extrema(this,0),y:extrema(this,1)}},PolynomialBezier.prototype.boundingBox=function(){var t=this.bounds();return{left:t.x.min,right:t.x.max,top:t.y.min,bottom:t.y.max,width:t.x.max-t.x.min,height:t.y.max-t.y.min,cx:(t.x.max+t.x.min)/2,cy:(t.y.max+t.y.min)/2}},PolynomialBezier.prototype.intersections=function(t,e,r){void 0===e&&(e=2),void 0===r&&(r=7);var n=[];return intersectsImpl(intersectData(this,0,1),intersectData(t,0,1),0,e,n,r),n},PolynomialBezier.shapeSegment=function(t,e){var r=(e+1)%t.length();return new PolynomialBezier(t.v[e],t.o[e],t.i[r],t.v[r],!0)},PolynomialBezier.shapeSegmentInverted=function(t,e){var r=(e+1)%t.length();return new PolynomialBezier(t.v[r],t.i[r],t.o[e],t.v[e],!0)},extendPrototype([ShapeModifier],ZigZagModifier),ZigZagModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amplitude=PropertyFactory.getProp(t,e.s,0,null,this),this.frequency=PropertyFactory.getProp(t,e.r,0,null,this),this.pointsType=PropertyFactory.getProp(t,e.pt,0,null,this),this._isAnimated=0!==this.amplitude.effectsSequence.length||0!==this.frequency.effectsSequence.length||0!==this.pointsType.effectsSequence.length},ZigZagModifier.prototype.processPath=function(t,e,r,n){var i=t._length,a=shapePool.newElement();if(a.c=t.c,t.c||(i-=1),0===i)return a;var o=-1,s=PolynomialBezier.shapeSegment(t,0);zigZagCorner(a,t,0,e,r,n,o);for(var l=0;l<i;l+=1)o=zigZagSegment(a,s,e,r,n,-o),s=l!==i-1||t.c?PolynomialBezier.shapeSegment(t,(l+1)%i):null,zigZagCorner(a,t,l+1,e,r,n,o);return a},ZigZagModifier.prototype.processShapes=function(t){var e,r,n,i,a,o,s=this.shapes.length,l=this.amplitude.v,c=Math.max(0,Math.round(this.frequency.v)),u=this.pointsType.v;if(0!==l)for(r=0;r<s;r+=1){if(o=(a=this.shapes[r]).localShapeCollection,a.shape._mdf||this._mdf||t)for(o.releaseShapes(),a.shape._mdf=!0,e=a.shape.paths.shapes,i=a.shape.paths._length,n=0;n<i;n+=1)o.addShape(this.processPath(e[n],l,c,u));a.shape.paths=a.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)},extendPrototype([ShapeModifier],OffsetPathModifier),OffsetPathModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(t,e.a,0,null,this),this.miterLimit=PropertyFactory.getProp(t,e.ml,0,null,this),this.lineJoin=e.lj,this._isAnimated=0!==this.amount.effectsSequence.length},OffsetPathModifier.prototype.processPath=function(t,e,r,n){var i=shapePool.newElement();i.c=t.c;var a,o,s,l=t.length();t.c||(l-=1);var c=[];for(a=0;a<l;a+=1)s=PolynomialBezier.shapeSegment(t,a),c.push(offsetSegmentSplit(s,e));if(!t.c)for(a=l-1;a>=0;a-=1)s=PolynomialBezier.shapeSegmentInverted(t,a),c.push(offsetSegmentSplit(s,e));c=pruneIntersections(c);var u=null,h=null;for(a=0;a<c.length;a+=1){var f=c[a];for(h&&(u=joinLines(i,h,f[0],r,n)),h=f[f.length-1],o=0;o<f.length;o+=1)s=f[o],u&&pointEqual(s.points[0],u)?i.setXYAt(s.points[1][0],s.points[1][1],"o",i.length()-1):i.setTripleAt(s.points[0][0],s.points[0][1],s.points[1][0],s.points[1][1],s.points[0][0],s.points[0][1],i.length()),i.setTripleAt(s.points[3][0],s.points[3][1],s.points[3][0],s.points[3][1],s.points[2][0],s.points[2][1],i.length()),u=s.points[3]}return c.length&&joinLines(i,h,c[0][0],r,n),i},OffsetPathModifier.prototype.processShapes=function(t){var e,r,n,i,a,o,s=this.shapes.length,l=this.amount.v,c=this.miterLimit.v,u=this.lineJoin;if(0!==l)for(r=0;r<s;r+=1){if(o=(a=this.shapes[r]).localShapeCollection,a.shape._mdf||this._mdf||t)for(o.releaseShapes(),a.shape._mdf=!0,e=a.shape.paths.shapes,i=a.shape.paths._length,n=0;n<i;n+=1)o.addShape(this.processPath(e[n],l,u,c));a.shape.paths=a.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)};var FontManager=function(){var t={w:0,size:0,shapes:[],data:{shapes:[]}},e=[];e=e.concat([2304,2305,2306,2307,2362,2363,2364,2364,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2387,2388,2389,2390,2391,2402,2403]);var r=127988,n=["d83cdffb","d83cdffc","d83cdffd","d83cdffe","d83cdfff"];function i(t,e){var r=createTag("span");r.setAttribute("aria-hidden",!0),r.style.fontFamily=e;var n=createTag("span");n.innerText="giItT1WQy@!-/#",r.style.position="absolute",r.style.left="-10000px",r.style.top="-10000px",r.style.fontSize="300px",r.style.fontVariant="normal",r.style.fontStyle="normal",r.style.fontWeight="normal",r.style.letterSpacing="0",r.appendChild(n),document.body.appendChild(r);var i=n.offsetWidth;return n.style.fontFamily=function(t){var e,r=t.split(","),n=r.length,i=[];for(e=0;e<n;e+=1)"sans-serif"!==r[e]&&"monospace"!==r[e]&&i.push(r[e]);return i.join(",")}(t)+", "+e,{node:n,w:i,parent:r}}function a(t,e){var r,n=document.body&&e?"svg":"canvas",i=getFontProperties(t);if("svg"===n){var a=createNS("text");a.style.fontSize="100px",a.setAttribute("font-family",t.fFamily),a.setAttribute("font-style",i.style),a.setAttribute("font-weight",i.weight),a.textContent="1",t.fClass?(a.style.fontFamily="inherit",a.setAttribute("class",t.fClass)):a.style.fontFamily=t.fFamily,e.appendChild(a),r=a}else{var o=new OffscreenCanvas(500,500).getContext("2d");o.font=i.style+" "+i.weight+" 100px "+t.fFamily,r=o}return{measureText:function(t){return"svg"===n?(r.textContent=t,r.getComputedTextLength()):r.measureText(t).width}}}function o(t){var e=0,r=t.charCodeAt(0);if(r>=55296&&r<=56319){var n=t.charCodeAt(1);n>=56320&&n<=57343&&(e=1024*(r-55296)+n-56320+65536)}return e}function s(t){var e=o(t);return e>=127462&&e<=127487}var l=function(){this.fonts=[],this.chars=null,this.typekitLoaded=0,this.isLoaded=!1,this._warned=!1,this.initTime=Date.now(),this.setIsLoadedBinded=this.setIsLoaded.bind(this),this.checkLoadedFontsBinded=this.checkLoadedFonts.bind(this)};l.isModifier=function(t,e){var r=t.toString(16)+e.toString(16);return-1!==n.indexOf(r)},l.isZeroWidthJoiner=function(t){return 8205===t},l.isFlagEmoji=function(t){return s(t.substr(0,2))&&s(t.substr(2,2))},l.isRegionalCode=s,l.isCombinedCharacter=function(t){return-1!==e.indexOf(t)},l.isRegionalFlag=function(t,e){var n=o(t.substr(e,2));if(n!==r)return!1;var i=0;for(e+=2;i<5;){if((n=o(t.substr(e,2)))<917601||n>917626)return!1;i+=1,e+=2}return 917631===o(t.substr(e,2))},l.isVariationSelector=function(t){return 65039===t},l.BLACK_FLAG_CODE_POINT=r;var c={addChars:function(t){if(t){var e;this.chars||(this.chars=[]);var r,n,i=t.length,a=this.chars.length;for(e=0;e<i;e+=1){for(r=0,n=!1;r<a;)this.chars[r].style===t[e].style&&this.chars[r].fFamily===t[e].fFamily&&this.chars[r].ch===t[e].ch&&(n=!0),r+=1;n||(this.chars.push(t[e]),a+=1)}}},addFonts:function(t,e){if(t){if(this.chars)return this.isLoaded=!0,void(this.fonts=t.list);if(!document.body)return this.isLoaded=!0,t.list.forEach((function(t){t.helper=a(t),t.cache={}})),void(this.fonts=t.list);var r,n=t.list,o=n.length,s=o;for(r=0;r<o;r+=1){var l,c,u=!0;if(n[r].loaded=!1,n[r].monoCase=i(n[r].fFamily,"monospace"),n[r].sansCase=i(n[r].fFamily,"sans-serif"),n[r].fPath){if("p"===n[r].fOrigin||3===n[r].origin){if((l=document.querySelectorAll('style[f-forigin="p"][f-family="'+n[r].fFamily+'"], style[f-origin="3"][f-family="'+n[r].fFamily+'"]')).length>0&&(u=!1),u){var h=createTag("style");h.setAttribute("f-forigin",n[r].fOrigin),h.setAttribute("f-origin",n[r].origin),h.setAttribute("f-family",n[r].fFamily),h.type="text/css",h.innerText="@font-face {font-family: "+n[r].fFamily+"; font-style: normal; src: url('"+n[r].fPath+"');}",e.appendChild(h)}}else if("g"===n[r].fOrigin||1===n[r].origin){for(l=document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]'),c=0;c<l.length;c+=1)-1!==l[c].href.indexOf(n[r].fPath)&&(u=!1);if(u){var f=createTag("link");f.setAttribute("f-forigin",n[r].fOrigin),f.setAttribute("f-origin",n[r].origin),f.type="text/css",f.rel="stylesheet",f.href=n[r].fPath,document.body.appendChild(f)}}else if("t"===n[r].fOrigin||2===n[r].origin){for(l=document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]'),c=0;c<l.length;c+=1)n[r].fPath===l[c].src&&(u=!1);if(u){var p=createTag("link");p.setAttribute("f-forigin",n[r].fOrigin),p.setAttribute("f-origin",n[r].origin),p.setAttribute("rel","stylesheet"),p.setAttribute("href",n[r].fPath),e.appendChild(p)}}}else n[r].loaded=!0,s-=1;n[r].helper=a(n[r],e),n[r].cache={},this.fonts.push(n[r])}0===s?this.isLoaded=!0:setTimeout(this.checkLoadedFonts.bind(this),100)}else this.isLoaded=!0},getCharData:function(e,r,n){for(var i=0,a=this.chars.length;i<a;){if(this.chars[i].ch===e&&this.chars[i].style===r&&this.chars[i].fFamily===n)return this.chars[i];i+=1}return("string"==typeof e&&13!==e.charCodeAt(0)||!e)&&console&&console.warn&&!this._warned&&(this._warned=!0,console.warn("Missing character from exported characters list: ",e,r,n)),t},getFontByName:function(t){for(var e=0,r=this.fonts.length;e<r;){if(this.fonts[e].fName===t)return this.fonts[e];e+=1}return this.fonts[0]},measureText:function(t,e,r){var n=this.getFontByName(e),i=t;if(!n.cache[i]){var a=n.helper;if(" "===t){var o=a.measureText("|"+t+"|"),s=a.measureText("||");n.cache[i]=(o-s)/100}else n.cache[i]=a.measureText(t)/100}return n.cache[i]*r},checkLoadedFonts:function(){var t,e,r,n=this.fonts.length,i=n;for(t=0;t<n;t+=1)this.fonts[t].loaded?i-=1:"n"===this.fonts[t].fOrigin||0===this.fonts[t].origin?this.fonts[t].loaded=!0:(e=this.fonts[t].monoCase.node,r=this.fonts[t].monoCase.w,e.offsetWidth!==r?(i-=1,this.fonts[t].loaded=!0):(e=this.fonts[t].sansCase.node,r=this.fonts[t].sansCase.w,e.offsetWidth!==r&&(i-=1,this.fonts[t].loaded=!0)),this.fonts[t].loaded&&(this.fonts[t].sansCase.parent.parentNode.removeChild(this.fonts[t].sansCase.parent),this.fonts[t].monoCase.parent.parentNode.removeChild(this.fonts[t].monoCase.parent)));0!==i&&Date.now()-this.initTime<5e3?setTimeout(this.checkLoadedFontsBinded,20):setTimeout(this.setIsLoadedBinded,10)},setIsLoaded:function(){this.isLoaded=!0}};return l.prototype=c,l}();function SlotManager(t){this.animationData=t}function slotFactory(t){return new SlotManager(t)}function RenderableElement(){}SlotManager.prototype.getProp=function(t){return this.animationData.slots&&this.animationData.slots[t.sid]?Object.assign(t,this.animationData.slots[t.sid].p):t},RenderableElement.prototype={initRenderable:function(){this.isInRange=!1,this.hidden=!1,this.isTransparent=!1,this.renderableComponents=[]},addRenderableComponent:function(t){-1===this.renderableComponents.indexOf(t)&&this.renderableComponents.push(t)},removeRenderableComponent:function(t){-1!==this.renderableComponents.indexOf(t)&&this.renderableComponents.splice(this.renderableComponents.indexOf(t),1)},prepareRenderableFrame:function(t){this.checkLayerLimits(t)},checkTransparency:function(){this.finalTransform.mProp.o.v<=0?!this.isTransparent&&this.globalData.renderConfig.hideOnTransparent&&(this.isTransparent=!0,this.hide()):this.isTransparent&&(this.isTransparent=!1,this.show())},checkLayerLimits:function(t){this.data.ip-this.data.st<=t&&this.data.op-this.data.st>t?!0!==this.isInRange&&(this.globalData._mdf=!0,this._mdf=!0,this.isInRange=!0,this.show()):!1!==this.isInRange&&(this.globalData._mdf=!0,this.isInRange=!1,this.hide())},renderRenderable:function(){var t,e=this.renderableComponents.length;for(t=0;t<e;t+=1)this.renderableComponents[t].renderFrame(this._isFirstFrame)},sourceRectAtTime:function(){return{top:0,left:0,width:100,height:100}},getLayerSize:function(){return 5===this.data.ty?{w:this.data.textData.width,h:this.data.textData.height}:{w:this.data.width,h:this.data.height}}};var getBlendMode=(blendModeEnums={0:"source-over",1:"multiply",2:"screen",3:"overlay",4:"darken",5:"lighten",6:"color-dodge",7:"color-burn",8:"hard-light",9:"soft-light",10:"difference",11:"exclusion",12:"hue",13:"saturation",14:"color",15:"luminosity"},function(t){return blendModeEnums[t]||""}),blendModeEnums;function SliderEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function AngleEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function ColorEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,1,0,r)}function PointEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,1,0,r)}function LayerIndexEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function MaskIndexEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function CheckboxEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function NoValueEffect(){this.p={}}function EffectsManager(t,e){var r,n=t.ef||[];this.effectElements=[];var i,a=n.length;for(r=0;r<a;r+=1)i=new GroupEffect(n[r],e),this.effectElements.push(i)}function GroupEffect(t,e){this.init(t,e)}function BaseElement(){}function FrameElement(){}function FootageElement(t,e,r){this.initFrame(),this.initRenderable(),this.assetData=e.getAssetData(t.refId),this.footageData=e.imageLoader.getAsset(this.assetData),this.initBaseData(t,e,r)}function AudioElement(t,e,r){this.initFrame(),this.initRenderable(),this.assetData=e.getAssetData(t.refId),this.initBaseData(t,e,r),this._isPlaying=!1,this._canPlay=!1;var n=this.globalData.getAssetsPath(this.assetData);this.audio=this.globalData.audioController.createAudio(n),this._currentTime=0,this.globalData.audioController.addAudio(this),this._volumeMultiplier=1,this._volume=1,this._previousVolume=null,this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0},this.lv=PropertyFactory.getProp(this,t.au&&t.au.lv?t.au.lv:{k:[100]},1,.01,this)}function BaseRenderer(){}extendPrototype([DynamicPropertyContainer],GroupEffect),GroupEffect.prototype.getValue=GroupEffect.prototype.iterateDynamicProperties,GroupEffect.prototype.init=function(t,e){var r;this.data=t,this.effectElements=[],this.initDynamicPropertyContainer(e);var n,i=this.data.ef.length,a=this.data.ef;for(r=0;r<i;r+=1){switch(n=null,a[r].ty){case 0:n=new SliderEffect(a[r],e,this);break;case 1:n=new AngleEffect(a[r],e,this);break;case 2:n=new ColorEffect(a[r],e,this);break;case 3:n=new PointEffect(a[r],e,this);break;case 4:case 7:n=new CheckboxEffect(a[r],e,this);break;case 10:n=new LayerIndexEffect(a[r],e,this);break;case 11:n=new MaskIndexEffect(a[r],e,this);break;case 5:n=new EffectsManager(a[r],e,this);break;default:n=new NoValueEffect(a[r],e,this)}n&&this.effectElements.push(n)}},BaseElement.prototype={checkMasks:function(){if(!this.data.hasMask)return!1;for(var t=0,e=this.data.masksProperties.length;t<e;){if("n"!==this.data.masksProperties[t].mode&&!1!==this.data.masksProperties[t].cl)return!0;t+=1}return!1},initExpressions:function(){var t=getExpressionInterfaces();if(t){var e=t("layer"),r=t("effects"),n=t("shape"),i=t("text"),a=t("comp");this.layerInterface=e(this),this.data.hasMask&&this.maskManager&&this.layerInterface.registerMaskInterface(this.maskManager);var o=r.createEffectsInterface(this,this.layerInterface);this.layerInterface.registerEffectsInterface(o),0===this.data.ty||this.data.xt?this.compInterface=a(this):4===this.data.ty?(this.layerInterface.shapeInterface=n(this.shapesData,this.itemsData,this.layerInterface),this.layerInterface.content=this.layerInterface.shapeInterface):5===this.data.ty&&(this.layerInterface.textInterface=i(this),this.layerInterface.text=this.layerInterface.textInterface)}},setBlendMode:function(){var t=getBlendMode(this.data.bm);(this.baseElement||this.layerElement).style["mix-blend-mode"]=t},initBaseData:function(t,e,r){this.globalData=e,this.comp=r,this.data=t,this.layerId=createElementID(),this.data.sr||(this.data.sr=1),this.effectsManager=new EffectsManager(this.data,this,this.dynamicProperties)},getType:function(){return this.type},sourceRectAtTime:function(){}},FrameElement.prototype={initFrame:function(){this._isFirstFrame=!1,this.dynamicProperties=[],this._mdf=!1},prepareProperties:function(t,e){var r,n=this.dynamicProperties.length;for(r=0;r<n;r+=1)(e||this._isParent&&"transform"===this.dynamicProperties[r].propType)&&(this.dynamicProperties[r].getValue(),this.dynamicProperties[r]._mdf&&(this.globalData._mdf=!0,this._mdf=!0))},addDynamicProperty:function(t){-1===this.dynamicProperties.indexOf(t)&&this.dynamicProperties.push(t)}},FootageElement.prototype.prepareFrame=function(){},extendPrototype([RenderableElement,BaseElement,FrameElement],FootageElement),FootageElement.prototype.getBaseElement=function(){return null},FootageElement.prototype.renderFrame=function(){},FootageElement.prototype.destroy=function(){},FootageElement.prototype.initExpressions=function(){var t=getExpressionInterfaces();if(t){var e=t("footage");this.layerInterface=e(this)}},FootageElement.prototype.getFootageData=function(){return this.footageData},AudioElement.prototype.prepareFrame=function(t){if(this.prepareRenderableFrame(t,!0),this.prepareProperties(t,!0),this.tm._placeholder)this._currentTime=t/this.data.sr;else{var e=this.tm.v;this._currentTime=e}this._volume=this.lv.v[0];var r=this._volume*this._volumeMultiplier;this._previousVolume!==r&&(this._previousVolume=r,this.audio.volume(r))},extendPrototype([RenderableElement,BaseElement,FrameElement],AudioElement),AudioElement.prototype.renderFrame=function(){this.isInRange&&this._canPlay&&(this._isPlaying?(!this.audio.playing()||Math.abs(this._currentTime/this.globalData.frameRate-this.audio.seek())>.1)&&this.audio.seek(this._currentTime/this.globalData.frameRate):(this.audio.play(),this.audio.seek(this._currentTime/this.globalData.frameRate),this._isPlaying=!0))},AudioElement.prototype.show=function(){},AudioElement.prototype.hide=function(){this.audio.pause(),this._isPlaying=!1},AudioElement.prototype.pause=function(){this.audio.pause(),this._isPlaying=!1,this._canPlay=!1},AudioElement.prototype.resume=function(){this._canPlay=!0},AudioElement.prototype.setRate=function(t){this.audio.rate(t)},AudioElement.prototype.volume=function(t){this._volumeMultiplier=t,this._previousVolume=t*this._volume,this.audio.volume(this._previousVolume)},AudioElement.prototype.getBaseElement=function(){return null},AudioElement.prototype.destroy=function(){},AudioElement.prototype.sourceRectAtTime=function(){},AudioElement.prototype.initExpressions=function(){},BaseRenderer.prototype.checkLayers=function(t){var e,r,n=this.layers.length;for(this.completeLayers=!0,e=n-1;e>=0;e-=1)this.elements[e]||(r=this.layers[e]).ip-r.st<=t-this.layers[e].st&&r.op-r.st>t-this.layers[e].st&&this.buildItem(e),this.completeLayers=!!this.elements[e]&&this.completeLayers;this.checkPendingElements()},BaseRenderer.prototype.createItem=function(t){switch(t.ty){case 2:return this.createImage(t);case 0:return this.createComp(t);case 1:return this.createSolid(t);case 3:default:return this.createNull(t);case 4:return this.createShape(t);case 5:return this.createText(t);case 6:return this.createAudio(t);case 13:return this.createCamera(t);case 15:return this.createFootage(t)}},BaseRenderer.prototype.createCamera=function(){throw new Error("You're using a 3d camera. Try the html renderer.")},BaseRenderer.prototype.createAudio=function(t){return new AudioElement(t,this.globalData,this)},BaseRenderer.prototype.createFootage=function(t){return new FootageElement(t,this.globalData,this)},BaseRenderer.prototype.buildAllItems=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)this.buildItem(t);this.checkPendingElements()},BaseRenderer.prototype.includeLayers=function(t){var e;this.completeLayers=!1;var r,n=t.length,i=this.layers.length;for(e=0;e<n;e+=1)for(r=0;r<i;){if(this.layers[r].id===t[e].id){this.layers[r]=t[e];break}r+=1}},BaseRenderer.prototype.setProjectInterface=function(t){this.globalData.projectInterface=t},BaseRenderer.prototype.initItems=function(){this.globalData.progressiveLoad||this.buildAllItems()},BaseRenderer.prototype.buildElementParenting=function(t,e,r){for(var n=this.elements,i=this.layers,a=0,o=i.length;a<o;)i[a].ind==e&&(n[a]&&!0!==n[a]?(r.push(n[a]),n[a].setAsParent(),void 0!==i[a].parent?this.buildElementParenting(t,i[a].parent,r):t.setHierarchy(r)):(this.buildItem(a),this.addPendingElement(t))),a+=1},BaseRenderer.prototype.addPendingElement=function(t){this.pendingElements.push(t)},BaseRenderer.prototype.searchExtraCompositions=function(t){var e,r=t.length;for(e=0;e<r;e+=1)if(t[e].xt){var n=this.createComp(t[e]);n.initExpressions(),this.globalData.projectInterface.registerComposition(n)}},BaseRenderer.prototype.getElementById=function(t){var e,r=this.elements.length;for(e=0;e<r;e+=1)if(this.elements[e].data.ind===t)return this.elements[e];return null},BaseRenderer.prototype.getElementByPath=function(t){var e,r=t.shift();if("number"==typeof r)e=this.elements[r];else{var n,i=this.elements.length;for(n=0;n<i;n+=1)if(this.elements[n].data.nm===r){e=this.elements[n];break}}return 0===t.length?e:e.getElementByPath(t)},BaseRenderer.prototype.setupGlobalData=function(t,e){this.globalData.fontManager=new FontManager,this.globalData.slotManager=slotFactory(t),this.globalData.fontManager.addChars(t.chars),this.globalData.fontManager.addFonts(t.fonts,e),this.globalData.getAssetData=this.animationItem.getAssetData.bind(this.animationItem),this.globalData.getAssetsPath=this.animationItem.getAssetsPath.bind(this.animationItem),this.globalData.imageLoader=this.animationItem.imagePreloader,this.globalData.audioController=this.animationItem.audioController,this.globalData.frameId=0,this.globalData.frameRate=t.fr,this.globalData.nm=t.nm,this.globalData.compSize={w:t.w,h:t.h}};var effectTypes={TRANSFORM_EFFECT:"transformEFfect"};function TransformElement(){}function MaskElement(t,e,r){this.data=t,this.element=e,this.globalData=r,this.storedData=[],this.masksProperties=this.data.masksProperties||[],this.maskElement=null;var n,i,a=this.globalData.defs,o=this.masksProperties?this.masksProperties.length:0;this.viewData=createSizedArray(o),this.solidPath="";var s,l,c,u,h,f,p=this.masksProperties,d=0,m=[],y=createElementID(),v="clipPath",g="clip-path";for(n=0;n<o;n+=1)if(("a"!==p[n].mode&&"n"!==p[n].mode||p[n].inv||100!==p[n].o.k||p[n].o.x)&&(v="mask",g="mask"),"s"!==p[n].mode&&"i"!==p[n].mode||0!==d?c=null:((c=createNS("rect")).setAttribute("fill","#ffffff"),c.setAttribute("width",this.element.comp.data.w||0),c.setAttribute("height",this.element.comp.data.h||0),m.push(c)),i=createNS("path"),"n"===p[n].mode)this.viewData[n]={op:PropertyFactory.getProp(this.element,p[n].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,p[n],3),elem:i,lastPath:""},a.appendChild(i);else{var b;if(d+=1,i.setAttribute("fill","s"===p[n].mode?"#000000":"#ffffff"),i.setAttribute("clip-rule","nonzero"),0!==p[n].x.k?(v="mask",g="mask",f=PropertyFactory.getProp(this.element,p[n].x,0,null,this.element),b=createElementID(),(u=createNS("filter")).setAttribute("id",b),(h=createNS("feMorphology")).setAttribute("operator","erode"),h.setAttribute("in","SourceGraphic"),h.setAttribute("radius","0"),u.appendChild(h),a.appendChild(u),i.setAttribute("stroke","s"===p[n].mode?"#000000":"#ffffff")):(h=null,f=null),this.storedData[n]={elem:i,x:f,expan:h,lastPath:"",lastOperator:"",filterId:b,lastRadius:0},"i"===p[n].mode){l=m.length;var x=createNS("g");for(s=0;s<l;s+=1)x.appendChild(m[s]);var w=createNS("mask");w.setAttribute("mask-type","alpha"),w.setAttribute("id",y+"_"+d),w.appendChild(i),a.appendChild(w),x.setAttribute("mask","url("+getLocationHref()+"#"+y+"_"+d+")"),m.length=0,m.push(x)}else m.push(i);p[n].inv&&!this.solidPath&&(this.solidPath=this.createLayerSolidPath()),this.viewData[n]={elem:i,lastPath:"",op:PropertyFactory.getProp(this.element,p[n].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,p[n],3),invRect:c},this.viewData[n].prop.k||this.drawPath(p[n],this.viewData[n].prop.v,this.viewData[n])}for(this.maskElement=createNS(v),o=m.length,n=0;n<o;n+=1)this.maskElement.appendChild(m[n]);d>0&&(this.maskElement.setAttribute("id",y),this.element.maskedElement.setAttribute(g,"url("+getLocationHref()+"#"+y+")"),a.appendChild(this.maskElement)),this.viewData.length&&this.element.addRenderableComponent(this)}TransformElement.prototype={initTransform:function(){var t=new Matrix;this.finalTransform={mProp:this.data.ks?TransformPropertyFactory.getTransformProperty(this,this.data.ks,this):{o:0},_matMdf:!1,_localMatMdf:!1,_opMdf:!1,mat:t,localMat:t,localOpacity:1},this.data.ao&&(this.finalTransform.mProp.autoOriented=!0),this.data.ty},renderTransform:function(){if(this.finalTransform._opMdf=this.finalTransform.mProp.o._mdf||this._isFirstFrame,this.finalTransform._matMdf=this.finalTransform.mProp._mdf||this._isFirstFrame,this.hierarchy){var t,e=this.finalTransform.mat,r=0,n=this.hierarchy.length;if(!this.finalTransform._matMdf)for(;r<n;){if(this.hierarchy[r].finalTransform.mProp._mdf){this.finalTransform._matMdf=!0;break}r+=1}if(this.finalTransform._matMdf)for(t=this.finalTransform.mProp.v.props,e.cloneFromProps(t),r=0;r<n;r+=1)e.multiply(this.hierarchy[r].finalTransform.mProp.v)}this.finalTransform._matMdf&&(this.finalTransform._localMatMdf=this.finalTransform._matMdf),this.finalTransform._opMdf&&(this.finalTransform.localOpacity=this.finalTransform.mProp.o.v)},renderLocalTransform:function(){if(this.localTransforms){var t=0,e=this.localTransforms.length;if(this.finalTransform._localMatMdf=this.finalTransform._matMdf,!this.finalTransform._localMatMdf||!this.finalTransform._opMdf)for(;t<e;)this.localTransforms[t]._mdf&&(this.finalTransform._localMatMdf=!0),this.localTransforms[t]._opMdf&&!this.finalTransform._opMdf&&(this.finalTransform.localOpacity=this.finalTransform.mProp.o.v,this.finalTransform._opMdf=!0),t+=1;if(this.finalTransform._localMatMdf){var r=this.finalTransform.localMat;for(this.localTransforms[0].matrix.clone(r),t=1;t<e;t+=1){var n=this.localTransforms[t].matrix;r.multiply(n)}r.multiply(this.finalTransform.mat)}if(this.finalTransform._opMdf){var i=this.finalTransform.localOpacity;for(t=0;t<e;t+=1)i*=.01*this.localTransforms[t].opacity;this.finalTransform.localOpacity=i}}},searchEffectTransforms:function(){if(this.renderableEffectsManager){var t=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);if(t.length){this.localTransforms=[],this.finalTransform.localMat=new Matrix;var e=0,r=t.length;for(e=0;e<r;e+=1)this.localTransforms.push(t[e])}}},globalToLocal:function(t){var e=[];e.push(this.finalTransform);for(var r,n=!0,i=this.comp;n;)i.finalTransform?(i.data.hasMask&&e.splice(0,0,i.finalTransform),i=i.comp):n=!1;var a,o=e.length;for(r=0;r<o;r+=1)a=e[r].mat.applyToPointArray(0,0,0),t=[t[0]-a[0],t[1]-a[1],0];return t},mHelper:new Matrix},MaskElement.prototype.getMaskProperty=function(t){return this.viewData[t].prop},MaskElement.prototype.renderFrame=function(t){var e,r=this.element.finalTransform.mat,n=this.masksProperties.length;for(e=0;e<n;e+=1)if((this.viewData[e].prop._mdf||t)&&this.drawPath(this.masksProperties[e],this.viewData[e].prop.v,this.viewData[e]),(this.viewData[e].op._mdf||t)&&this.viewData[e].elem.setAttribute("fill-opacity",this.viewData[e].op.v),"n"!==this.masksProperties[e].mode&&(this.viewData[e].invRect&&(this.element.finalTransform.mProp._mdf||t)&&this.viewData[e].invRect.setAttribute("transform",r.getInverseMatrix().to2dCSS()),this.storedData[e].x&&(this.storedData[e].x._mdf||t))){var i=this.storedData[e].expan;this.storedData[e].x.v<0?("erode"!==this.storedData[e].lastOperator&&(this.storedData[e].lastOperator="erode",this.storedData[e].elem.setAttribute("filter","url("+getLocationHref()+"#"+this.storedData[e].filterId+")")),i.setAttribute("radius",-this.storedData[e].x.v)):("dilate"!==this.storedData[e].lastOperator&&(this.storedData[e].lastOperator="dilate",this.storedData[e].elem.setAttribute("filter",null)),this.storedData[e].elem.setAttribute("stroke-width",2*this.storedData[e].x.v))}},MaskElement.prototype.getMaskelement=function(){return this.maskElement},MaskElement.prototype.createLayerSolidPath=function(){var t="M0,0 ";return t+=" h"+this.globalData.compSize.w,t+=" v"+this.globalData.compSize.h,(t+=" h-"+this.globalData.compSize.w)+" v-"+this.globalData.compSize.h+" "},MaskElement.prototype.drawPath=function(t,e,r){var n,i,a=" M"+e.v[0][0]+","+e.v[0][1];for(i=e._length,n=1;n<i;n+=1)a+=" C"+e.o[n-1][0]+","+e.o[n-1][1]+" "+e.i[n][0]+","+e.i[n][1]+" "+e.v[n][0]+","+e.v[n][1];if(e.c&&i>1&&(a+=" C"+e.o[n-1][0]+","+e.o[n-1][1]+" "+e.i[0][0]+","+e.i[0][1]+" "+e.v[0][0]+","+e.v[0][1]),r.lastPath!==a){var o="";r.elem&&(e.c&&(o=t.inv?this.solidPath+a:a),r.elem.setAttribute("d",o)),r.lastPath=a}},MaskElement.prototype.destroy=function(){this.element=null,this.globalData=null,this.maskElement=null,this.data=null,this.masksProperties=null};var filtersFactory={createFilter:function(t,e){var r=createNS("filter");return r.setAttribute("id",t),!0!==e&&(r.setAttribute("filterUnits","objectBoundingBox"),r.setAttribute("x","0%"),r.setAttribute("y","0%"),r.setAttribute("width","100%"),r.setAttribute("height","100%")),r},createAlphaToLuminanceFilter:function(){var t=createNS("feColorMatrix");return t.setAttribute("type","matrix"),t.setAttribute("color-interpolation-filters","sRGB"),t.setAttribute("values","0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1"),t}},featureSupport=function(){var t={maskType:!0,svgLumaHidden:!0,offscreenCanvas:"undefined"!=typeof OffscreenCanvas};return(/MSIE 10/i.test(navigator.userAgent)||/MSIE 9/i.test(navigator.userAgent)||/rv:11.0/i.test(navigator.userAgent)||/Edge\/\d./i.test(navigator.userAgent))&&(t.maskType=!1),/firefox/i.test(navigator.userAgent)&&(t.svgLumaHidden=!1),t}(),registeredEffects$1={},idPrefix="filter_result_";function SVGEffects(t){var e,r,n="SourceGraphic",i=t.data.ef?t.data.ef.length:0,a=createElementID(),o=filtersFactory.createFilter(a,!0),s=0;for(this.filters=[],e=0;e<i;e+=1){r=null;var l=t.data.ef[e].ty;registeredEffects$1[l]&&(r=new(0,registeredEffects$1[l].effect)(o,t.effectsManager.effectElements[e],t,idPrefix+s,n),n=idPrefix+s,registeredEffects$1[l].countsAsEffect&&(s+=1)),r&&this.filters.push(r)}s&&(t.globalData.defs.appendChild(o),t.layerElement.setAttribute("filter","url("+getLocationHref()+"#"+a+")")),this.filters.length&&t.addRenderableComponent(this)}function registerEffect$1(t,e,r){registeredEffects$1[t]={effect:e,countsAsEffect:r}}function SVGBaseElement(){}function HierarchyElement(){}function RenderableDOMElement(){}function IImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.assetData&&this.assetData.sid&&(this.assetData=e.slotManager.getProp(this.assetData)),this.initElement(t,e,r),this.sourceRect={top:0,left:0,width:this.assetData.w,height:this.assetData.h}}function ProcessedElement(t,e){this.elem=t,this.pos=e}function IShapeElement(){}SVGEffects.prototype.renderFrame=function(t){var e,r=this.filters.length;for(e=0;e<r;e+=1)this.filters[e].renderFrame(t)},SVGEffects.prototype.getEffects=function(t){var e,r=this.filters.length,n=[];for(e=0;e<r;e+=1)this.filters[e].type===t&&n.push(this.filters[e]);return n},SVGBaseElement.prototype={initRendererElement:function(){this.layerElement=createNS("g")},createContainerElements:function(){this.matteElement=createNS("g"),this.transformedElement=this.layerElement,this.maskedElement=this.layerElement,this._sizeChanged=!1;var t=null;if(this.data.td){this.matteMasks={};var e=createNS("g");e.setAttribute("id",this.layerId),e.appendChild(this.layerElement),t=e,this.globalData.defs.appendChild(e)}else this.data.tt?(this.matteElement.appendChild(this.layerElement),t=this.matteElement,this.baseElement=this.matteElement):this.baseElement=this.layerElement;if(this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),0===this.data.ty&&!this.data.hd){var r=createNS("clipPath"),n=createNS("path");n.setAttribute("d","M0,0 L"+this.data.w+",0 L"+this.data.w+","+this.data.h+" L0,"+this.data.h+"z");var i=createElementID();if(r.setAttribute("id",i),r.appendChild(n),this.globalData.defs.appendChild(r),this.checkMasks()){var a=createNS("g");a.setAttribute("clip-path","url("+getLocationHref()+"#"+i+")"),a.appendChild(this.layerElement),this.transformedElement=a,t?t.appendChild(this.transformedElement):this.baseElement=this.transformedElement}else this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+i+")")}0!==this.data.bm&&this.setBlendMode()},renderElement:function(){this.finalTransform._localMatMdf&&this.transformedElement.setAttribute("transform",this.finalTransform.localMat.to2dCSS()),this.finalTransform._opMdf&&this.transformedElement.setAttribute("opacity",this.finalTransform.localOpacity)},destroyBaseElement:function(){this.layerElement=null,this.matteElement=null,this.maskManager.destroy()},getBaseElement:function(){return this.data.hd?null:this.baseElement},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData),this.renderableEffectsManager=new SVGEffects(this),this.searchEffectTransforms()},getMatte:function(t){if(this.matteMasks||(this.matteMasks={}),!this.matteMasks[t]){var e,r,n,i,a=this.layerId+"_"+t;if(1===t||3===t){var o=createNS("mask");o.setAttribute("id",a),o.setAttribute("mask-type",3===t?"luminance":"alpha"),(n=createNS("use")).setAttributeNS("http://www.w3.org/1999/xlink","href","#"+this.layerId),o.appendChild(n),this.globalData.defs.appendChild(o),featureSupport.maskType||1!==t||(o.setAttribute("mask-type","luminance"),e=createElementID(),r=filtersFactory.createFilter(e),this.globalData.defs.appendChild(r),r.appendChild(filtersFactory.createAlphaToLuminanceFilter()),(i=createNS("g")).appendChild(n),o.appendChild(i),i.setAttribute("filter","url("+getLocationHref()+"#"+e+")"))}else if(2===t){var s=createNS("mask");s.setAttribute("id",a),s.setAttribute("mask-type","alpha");var l=createNS("g");s.appendChild(l),e=createElementID(),r=filtersFactory.createFilter(e);var c=createNS("feComponentTransfer");c.setAttribute("in","SourceGraphic"),r.appendChild(c);var u=createNS("feFuncA");u.setAttribute("type","table"),u.setAttribute("tableValues","1.0 0.0"),c.appendChild(u),this.globalData.defs.appendChild(r);var h=createNS("rect");h.setAttribute("width",this.comp.data.w),h.setAttribute("height",this.comp.data.h),h.setAttribute("x","0"),h.setAttribute("y","0"),h.setAttribute("fill","#ffffff"),h.setAttribute("opacity","0"),l.setAttribute("filter","url("+getLocationHref()+"#"+e+")"),l.appendChild(h),(n=createNS("use")).setAttributeNS("http://www.w3.org/1999/xlink","href","#"+this.layerId),l.appendChild(n),featureSupport.maskType||(s.setAttribute("mask-type","luminance"),r.appendChild(filtersFactory.createAlphaToLuminanceFilter()),i=createNS("g"),l.appendChild(h),i.appendChild(this.layerElement),l.appendChild(i)),this.globalData.defs.appendChild(s)}this.matteMasks[t]=a}return this.matteMasks[t]},setMatte:function(t){this.matteElement&&this.matteElement.setAttribute("mask","url("+getLocationHref()+"#"+t+")")}},HierarchyElement.prototype={initHierarchy:function(){this.hierarchy=[],this._isParent=!1,this.checkParenting()},setHierarchy:function(t){this.hierarchy=t},setAsParent:function(){this._isParent=!0},checkParenting:function(){void 0!==this.data.parent&&this.comp.buildElementParenting(this,this.data.parent,[])}},extendPrototype([RenderableElement,createProxyFunction({initElement:function(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initTransform(t,e,r),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide()},hide:function(){this.hidden||this.isInRange&&!this.isTransparent||((this.baseElement||this.layerElement).style.display="none",this.hidden=!0)},show:function(){this.isInRange&&!this.isTransparent&&(this.data.hd||((this.baseElement||this.layerElement).style.display="block"),this.hidden=!1,this._isFirstFrame=!0)},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderLocalTransform(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},renderInnerContent:function(){},prepareFrame:function(t){this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange),this.checkTransparency()},destroy:function(){this.innerElem=null,this.destroyBaseElement()}})],RenderableDOMElement),extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],IImageElement),IImageElement.prototype.createContent=function(){var t=this.globalData.getAssetsPath(this.assetData);this.innerElem=createNS("image"),this.innerElem.setAttribute("width",this.assetData.w+"px"),this.innerElem.setAttribute("height",this.assetData.h+"px"),this.innerElem.setAttribute("preserveAspectRatio",this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio),this.innerElem.setAttributeNS("http://www.w3.org/1999/xlink","href",t),this.layerElement.appendChild(this.innerElem)},IImageElement.prototype.sourceRectAtTime=function(){return this.sourceRect},IShapeElement.prototype={addShapeToModifiers:function(t){var e,r=this.shapeModifiers.length;for(e=0;e<r;e+=1)this.shapeModifiers[e].addShape(t)},isShapeInAnimatedModifiers:function(t){for(var e=this.shapeModifiers.length;0<e;)if(this.shapeModifiers[0].isAnimatedWithShape(t))return!0;return!1},renderModifiers:function(){if(this.shapeModifiers.length){var t,e=this.shapes.length;for(t=0;t<e;t+=1)this.shapes[t].sh.reset();for(t=(e=this.shapeModifiers.length)-1;t>=0&&!this.shapeModifiers[t].processShapes(this._isFirstFrame);t-=1);}},searchProcessedElement:function(t){for(var e=this.processedElements,r=0,n=e.length;r<n;){if(e[r].elem===t)return e[r].pos;r+=1}return 0},addProcessedElement:function(t,e){for(var r=this.processedElements,n=r.length;n;)if(r[n-=1].elem===t)return void(r[n].pos=e);r.push(new ProcessedElement(t,e))},prepareFrame:function(t){this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange)}};var lineCapEnum={1:"butt",2:"round",3:"square"},lineJoinEnum={1:"miter",2:"round",3:"bevel"};function SVGShapeData(t,e,r){this.caches=[],this.styles=[],this.transformers=t,this.lStr="",this.sh=r,this.lvl=e,this._isAnimated=!!r.k;for(var n=0,i=t.length;n<i;){if(t[n].mProps.dynamicProperties.length){this._isAnimated=!0;break}n+=1}}function SVGStyleData(t,e){this.data=t,this.type=t.ty,this.d="",this.lvl=e,this._mdf=!1,this.closed=!0===t.hd,this.pElem=createNS("path"),this.msElem=null}function DashProperty(t,e,r,n){var i;this.elem=t,this.frameId=-1,this.dataProps=createSizedArray(e.length),this.renderer=r,this.k=!1,this.dashStr="",this.dashArray=createTypedArray("float32",e.length?e.length-1:0),this.dashoffset=createTypedArray("float32",1),this.initDynamicPropertyContainer(n);var a,o=e.length||0;for(i=0;i<o;i+=1)a=PropertyFactory.getProp(t,e[i].v,0,0,this),this.k=a.k||this.k,this.dataProps[i]={n:e[i].n,p:a};this.k||this.getValue(!0),this._isAnimated=this.k}function SVGStrokeStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.w=PropertyFactory.getProp(t,e.w,0,null,this),this.d=new DashProperty(t,e.d||{},"svg",this),this.c=PropertyFactory.getProp(t,e.c,1,255,this),this.style=r,this._isAnimated=!!this._isAnimated}function SVGFillStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.c=PropertyFactory.getProp(t,e.c,1,255,this),this.style=r}function SVGNoStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.style=r}function GradientProperty(t,e,r){this.data=e,this.c=createTypedArray("uint8c",4*e.p);var n=e.k.k[0].s?e.k.k[0].s.length-4*e.p:e.k.k.length-4*e.p;this.o=createTypedArray("float32",n),this._cmdf=!1,this._omdf=!1,this._collapsable=this.checkCollapsable(),this._hasOpacity=n,this.initDynamicPropertyContainer(r),this.prop=PropertyFactory.getProp(t,e.k,1,null,this),this.k=this.prop.k,this.getValue(!0)}function SVGGradientFillStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.initGradientData(t,e,r)}function SVGGradientStrokeStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.w=PropertyFactory.getProp(t,e.w,0,null,this),this.d=new DashProperty(t,e.d||{},"svg",this),this.initGradientData(t,e,r),this._isAnimated=!!this._isAnimated}function ShapeGroupData(){this.it=[],this.prevViewData=[],this.gr=createNS("g")}function SVGTransformData(t,e,r){this.transform={mProps:t,op:e,container:r},this.elements=[],this._isAnimated=this.transform.mProps.dynamicProperties.length||this.transform.op.effectsSequence.length}SVGShapeData.prototype.setAsAnimated=function(){this._isAnimated=!0},SVGStyleData.prototype.reset=function(){this.d="",this._mdf=!1},DashProperty.prototype.getValue=function(t){if((this.elem.globalData.frameId!==this.frameId||t)&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf=this._mdf||t,this._mdf)){var e=0,r=this.dataProps.length;for("svg"===this.renderer&&(this.dashStr=""),e=0;e<r;e+=1)"o"!==this.dataProps[e].n?"svg"===this.renderer?this.dashStr+=" "+this.dataProps[e].p.v:this.dashArray[e]=this.dataProps[e].p.v:this.dashoffset[0]=this.dataProps[e].p.v}},extendPrototype([DynamicPropertyContainer],DashProperty),extendPrototype([DynamicPropertyContainer],SVGStrokeStyleData),extendPrototype([DynamicPropertyContainer],SVGFillStyleData),extendPrototype([DynamicPropertyContainer],SVGNoStyleData),GradientProperty.prototype.comparePoints=function(t,e){for(var r=0,n=this.o.length/2;r<n;){if(Math.abs(t[4*r]-t[4*e+2*r])>.01)return!1;r+=1}return!0},GradientProperty.prototype.checkCollapsable=function(){if(this.o.length/2!=this.c.length/4)return!1;if(this.data.k.k[0].s)for(var t=0,e=this.data.k.k.length;t<e;){if(!this.comparePoints(this.data.k.k[t].s,this.data.p))return!1;t+=1}else if(!this.comparePoints(this.data.k.k,this.data.p))return!1;return!0},GradientProperty.prototype.getValue=function(t){if(this.prop.getValue(),this._mdf=!1,this._cmdf=!1,this._omdf=!1,this.prop._mdf||t){var e,r,n,i=4*this.data.p;for(e=0;e<i;e+=1)r=e%4==0?100:255,n=Math.round(this.prop.v[e]*r),this.c[e]!==n&&(this.c[e]=n,this._cmdf=!t);if(this.o.length)for(i=this.prop.v.length,e=4*this.data.p;e<i;e+=1)r=e%2==0?100:1,n=e%2==0?Math.round(100*this.prop.v[e]):this.prop.v[e],this.o[e-4*this.data.p]!==n&&(this.o[e-4*this.data.p]=n,this._omdf=!t);this._mdf=!t}},extendPrototype([DynamicPropertyContainer],GradientProperty),SVGGradientFillStyleData.prototype.initGradientData=function(t,e,r){this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.s=PropertyFactory.getProp(t,e.s,1,null,this),this.e=PropertyFactory.getProp(t,e.e,1,null,this),this.h=PropertyFactory.getProp(t,e.h||{k:0},0,.01,this),this.a=PropertyFactory.getProp(t,e.a||{k:0},0,degToRads,this),this.g=new GradientProperty(t,e.g,this),this.style=r,this.stops=[],this.setGradientData(r.pElem,e),this.setGradientOpacity(e,r),this._isAnimated=!!this._isAnimated},SVGGradientFillStyleData.prototype.setGradientData=function(t,e){var r=createElementID(),n=createNS(1===e.t?"linearGradient":"radialGradient");n.setAttribute("id",r),n.setAttribute("spreadMethod","pad"),n.setAttribute("gradientUnits","userSpaceOnUse");var i,a,o,s=[];for(o=4*e.g.p,a=0;a<o;a+=4)i=createNS("stop"),n.appendChild(i),s.push(i);t.setAttribute("gf"===e.ty?"fill":"stroke","url("+getLocationHref()+"#"+r+")"),this.gf=n,this.cst=s},SVGGradientFillStyleData.prototype.setGradientOpacity=function(t,e){if(this.g._hasOpacity&&!this.g._collapsable){var r,n,i,a=createNS("mask"),o=createNS("path");a.appendChild(o);var s=createElementID(),l=createElementID();a.setAttribute("id",l);var c=createNS(1===t.t?"linearGradient":"radialGradient");c.setAttribute("id",s),c.setAttribute("spreadMethod","pad"),c.setAttribute("gradientUnits","userSpaceOnUse"),i=t.g.k.k[0].s?t.g.k.k[0].s.length:t.g.k.k.length;var u=this.stops;for(n=4*t.g.p;n<i;n+=2)(r=createNS("stop")).setAttribute("stop-color","rgb(255,255,255)"),c.appendChild(r),u.push(r);o.setAttribute("gf"===t.ty?"fill":"stroke","url("+getLocationHref()+"#"+s+")"),"gs"===t.ty&&(o.setAttribute("stroke-linecap",lineCapEnum[t.lc||2]),o.setAttribute("stroke-linejoin",lineJoinEnum[t.lj||2]),1===t.lj&&o.setAttribute("stroke-miterlimit",t.ml)),this.of=c,this.ms=a,this.ost=u,this.maskId=l,e.msElem=o}},extendPrototype([DynamicPropertyContainer],SVGGradientFillStyleData),extendPrototype([SVGGradientFillStyleData,DynamicPropertyContainer],SVGGradientStrokeStyleData);var buildShapeString=function(t,e,r,n){if(0===e)return"";var i,a=t.o,o=t.i,s=t.v,l=" M"+n.applyToPointStringified(s[0][0],s[0][1]);for(i=1;i<e;i+=1)l+=" C"+n.applyToPointStringified(a[i-1][0],a[i-1][1])+" "+n.applyToPointStringified(o[i][0],o[i][1])+" "+n.applyToPointStringified(s[i][0],s[i][1]);return r&&e&&(l+=" C"+n.applyToPointStringified(a[i-1][0],a[i-1][1])+" "+n.applyToPointStringified(o[0][0],o[0][1])+" "+n.applyToPointStringified(s[0][0],s[0][1]),l+="z"),l},SVGElementsRenderer=function(){var t=new Matrix,e=new Matrix;function r(t,e,r){(r||e.transform.op._mdf)&&e.transform.container.setAttribute("opacity",e.transform.op.v),(r||e.transform.mProps._mdf)&&e.transform.container.setAttribute("transform",e.transform.mProps.v.to2dCSS())}function n(){}function i(r,n,i){var a,o,s,l,c,u,h,f,p,d,m=n.styles.length,y=n.lvl;for(u=0;u<m;u+=1){if(l=n.sh._mdf||i,n.styles[u].lvl<y){for(f=e.reset(),p=y-n.styles[u].lvl,d=n.transformers.length-1;!l&&p>0;)l=n.transformers[d].mProps._mdf||l,p-=1,d-=1;if(l)for(p=y-n.styles[u].lvl,d=n.transformers.length-1;p>0;)f.multiply(n.transformers[d].mProps.v),p-=1,d-=1}else f=t;if(o=(h=n.sh.paths)._length,l){for(s="",a=0;a<o;a+=1)(c=h.shapes[a])&&c._length&&(s+=buildShapeString(c,c._length,c.c,f));n.caches[u]=s}else s=n.caches[u];n.styles[u].d+=!0===r.hd?"":s,n.styles[u]._mdf=l||n.styles[u]._mdf}}function a(t,e,r){var n=e.style;(e.c._mdf||r)&&n.pElem.setAttribute("fill","rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r)&&n.pElem.setAttribute("fill-opacity",e.o.v)}function o(t,e,r){s(t,e,r),l(0,e,r)}function s(t,e,r){var n,i,a,o,s,l=e.gf,c=e.g._hasOpacity,u=e.s.v,h=e.e.v;if(e.o._mdf||r){var f="gf"===t.ty?"fill-opacity":"stroke-opacity";e.style.pElem.setAttribute(f,e.o.v)}if(e.s._mdf||r){var p=1===t.t?"x1":"cx",d="x1"===p?"y1":"cy";l.setAttribute(p,u[0]),l.setAttribute(d,u[1]),c&&!e.g._collapsable&&(e.of.setAttribute(p,u[0]),e.of.setAttribute(d,u[1]))}if(e.g._cmdf||r){n=e.cst;var m=e.g.c;for(a=n.length,i=0;i<a;i+=1)(o=n[i]).setAttribute("offset",m[4*i]+"%"),o.setAttribute("stop-color","rgb("+m[4*i+1]+","+m[4*i+2]+","+m[4*i+3]+")")}if(c&&(e.g._omdf||r)){var y=e.g.o;for(a=(n=e.g._collapsable?e.cst:e.ost).length,i=0;i<a;i+=1)o=n[i],e.g._collapsable||o.setAttribute("offset",y[2*i]+"%"),o.setAttribute("stop-opacity",y[2*i+1])}if(1===t.t)(e.e._mdf||r)&&(l.setAttribute("x2",h[0]),l.setAttribute("y2",h[1]),c&&!e.g._collapsable&&(e.of.setAttribute("x2",h[0]),e.of.setAttribute("y2",h[1])));else if((e.s._mdf||e.e._mdf||r)&&(s=Math.sqrt(Math.pow(u[0]-h[0],2)+Math.pow(u[1]-h[1],2)),l.setAttribute("r",s),c&&!e.g._collapsable&&e.of.setAttribute("r",s)),e.e._mdf||e.h._mdf||e.a._mdf||r){s||(s=Math.sqrt(Math.pow(u[0]-h[0],2)+Math.pow(u[1]-h[1],2)));var v=Math.atan2(h[1]-u[1],h[0]-u[0]),g=e.h.v;g>=1?g=.99:g<=-1&&(g=-.99);var b=s*g,x=Math.cos(v+e.a.v)*b+u[0],w=Math.sin(v+e.a.v)*b+u[1];l.setAttribute("fx",x),l.setAttribute("fy",w),c&&!e.g._collapsable&&(e.of.setAttribute("fx",x),e.of.setAttribute("fy",w))}}function l(t,e,r){var n=e.style,i=e.d;i&&(i._mdf||r)&&i.dashStr&&(n.pElem.setAttribute("stroke-dasharray",i.dashStr),n.pElem.setAttribute("stroke-dashoffset",i.dashoffset[0])),e.c&&(e.c._mdf||r)&&n.pElem.setAttribute("stroke","rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r)&&n.pElem.setAttribute("stroke-opacity",e.o.v),(e.w._mdf||r)&&(n.pElem.setAttribute("stroke-width",e.w.v),n.msElem&&n.msElem.setAttribute("stroke-width",e.w.v))}return{createRenderFunction:function(t){switch(t.ty){case"fl":return a;case"gf":return s;case"gs":return o;case"st":return l;case"sh":case"el":case"rc":case"sr":return i;case"tr":return r;case"no":return n;default:return null}}}}();function SVGShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.initElement(t,e,r),this.prevViewData=[]}function LetterProps(t,e,r,n,i,a){this.o=t,this.sw=e,this.sc=r,this.fc=n,this.m=i,this.p=a,this._mdf={o:!0,sw:!!e,sc:!!r,fc:!!n,m:!0,p:!0}}function TextProperty(t,e){this._frameId=initialDefaultFrame,this.pv="",this.v="",this.kf=!1,this._isFirstFrame=!0,this._mdf=!1,e.d&&e.d.sid&&(e.d=t.globalData.slotManager.getProp(e.d)),this.data=e,this.elem=t,this.comp=this.elem.comp,this.keysIndex=0,this.canResize=!1,this.minimumFontSize=1,this.effectsSequence=[],this.currentData={ascent:0,boxWidth:this.defaultBoxWidth,f:"",fStyle:"",fWeight:"",fc:"",j:"",justifyOffset:"",l:[],lh:0,lineWidths:[],ls:"",of:"",s:"",sc:"",sw:0,t:0,tr:0,sz:0,ps:null,fillColorAnim:!1,strokeColorAnim:!1,strokeWidthAnim:!1,yOffset:0,finalSize:0,finalText:[],finalLineHeight:0,__complete:!1},this.copyData(this.currentData,this.data.d.k[0].s),this.searchProperty()||this.completeTextData(this.currentData)}extendPrototype([BaseElement,TransformElement,SVGBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableDOMElement],SVGShapeElement),SVGShapeElement.prototype.initSecondaryElement=function(){},SVGShapeElement.prototype.identityMatrix=new Matrix,SVGShapeElement.prototype.buildExpressionInterface=function(){},SVGShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes()},SVGShapeElement.prototype.filterUniqueShapes=function(){var t,e,r,n,i=this.shapes.length,a=this.stylesList.length,o=[],s=!1;for(r=0;r<a;r+=1){for(n=this.stylesList[r],s=!1,o.length=0,t=0;t<i;t+=1)-1!==(e=this.shapes[t]).styles.indexOf(n)&&(o.push(e),s=e._isAnimated||s);o.length>1&&s&&this.setShapesAsAnimated(o)}},SVGShapeElement.prototype.setShapesAsAnimated=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e].setAsAnimated()},SVGShapeElement.prototype.createStyleElement=function(t,e){var r,n=new SVGStyleData(t,e),i=n.pElem;return"st"===t.ty?r=new SVGStrokeStyleData(this,t,n):"fl"===t.ty?r=new SVGFillStyleData(this,t,n):"gf"===t.ty||"gs"===t.ty?(r=new("gf"===t.ty?SVGGradientFillStyleData:SVGGradientStrokeStyleData)(this,t,n),this.globalData.defs.appendChild(r.gf),r.maskId&&(this.globalData.defs.appendChild(r.ms),this.globalData.defs.appendChild(r.of),i.setAttribute("mask","url("+getLocationHref()+"#"+r.maskId+")"))):"no"===t.ty&&(r=new SVGNoStyleData(this,t,n)),"st"!==t.ty&&"gs"!==t.ty||(i.setAttribute("stroke-linecap",lineCapEnum[t.lc||2]),i.setAttribute("stroke-linejoin",lineJoinEnum[t.lj||2]),i.setAttribute("fill-opacity","0"),1===t.lj&&i.setAttribute("stroke-miterlimit",t.ml)),2===t.r&&i.setAttribute("fill-rule","evenodd"),t.ln&&i.setAttribute("id",t.ln),t.cl&&i.setAttribute("class",t.cl),t.bm&&(i.style["mix-blend-mode"]=getBlendMode(t.bm)),this.stylesList.push(n),this.addToAnimatedContents(t,r),r},SVGShapeElement.prototype.createGroupElement=function(t){var e=new ShapeGroupData;return t.ln&&e.gr.setAttribute("id",t.ln),t.cl&&e.gr.setAttribute("class",t.cl),t.bm&&(e.gr.style["mix-blend-mode"]=getBlendMode(t.bm)),e},SVGShapeElement.prototype.createTransformElement=function(t,e){var r=TransformPropertyFactory.getTransformProperty(this,t,this),n=new SVGTransformData(r,r.o,e);return this.addToAnimatedContents(t,n),n},SVGShapeElement.prototype.createShapeElement=function(t,e,r){var n=4;"rc"===t.ty?n=5:"el"===t.ty?n=6:"sr"===t.ty&&(n=7);var i=new SVGShapeData(e,r,ShapePropertyFactory.getShapeProp(this,t,n,this));return this.shapes.push(i),this.addShapeToModifiers(i),this.addToAnimatedContents(t,i),i},SVGShapeElement.prototype.addToAnimatedContents=function(t,e){for(var r=0,n=this.animatedContents.length;r<n;){if(this.animatedContents[r].element===e)return;r+=1}this.animatedContents.push({fn:SVGElementsRenderer.createRenderFunction(t),element:e,data:t})},SVGShapeElement.prototype.setElementStyles=function(t){var e,r=t.styles,n=this.stylesList.length;for(e=0;e<n;e+=1)this.stylesList[e].closed||r.push(this.stylesList[e])},SVGShapeElement.prototype.reloadShapes=function(){var t;this._isFirstFrame=!0;var e=this.itemsData.length;for(t=0;t<e;t+=1)this.prevViewData[t]=this.itemsData[t];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes(),e=this.dynamicProperties.length,t=0;t<e;t+=1)this.dynamicProperties[t].getValue();this.renderModifiers()},SVGShapeElement.prototype.searchShapes=function(t,e,r,n,i,a,o){var s,l,c,u,h,f,p=[].concat(a),d=t.length-1,m=[],y=[];for(s=d;s>=0;s-=1){if((f=this.searchProcessedElement(t[s]))?e[s]=r[f-1]:t[s]._render=o,"fl"===t[s].ty||"st"===t[s].ty||"gf"===t[s].ty||"gs"===t[s].ty||"no"===t[s].ty)f?e[s].style.closed=!1:e[s]=this.createStyleElement(t[s],i),t[s]._render&&e[s].style.pElem.parentNode!==n&&n.appendChild(e[s].style.pElem),m.push(e[s].style);else if("gr"===t[s].ty){if(f)for(c=e[s].it.length,l=0;l<c;l+=1)e[s].prevViewData[l]=e[s].it[l];else e[s]=this.createGroupElement(t[s]);this.searchShapes(t[s].it,e[s].it,e[s].prevViewData,e[s].gr,i+1,p,o),t[s]._render&&e[s].gr.parentNode!==n&&n.appendChild(e[s].gr)}else"tr"===t[s].ty?(f||(e[s]=this.createTransformElement(t[s],n)),u=e[s].transform,p.push(u)):"sh"===t[s].ty||"rc"===t[s].ty||"el"===t[s].ty||"sr"===t[s].ty?(f||(e[s]=this.createShapeElement(t[s],p,i)),this.setElementStyles(e[s])):"tm"===t[s].ty||"rd"===t[s].ty||"ms"===t[s].ty||"pb"===t[s].ty||"zz"===t[s].ty||"op"===t[s].ty?(f?(h=e[s]).closed=!1:((h=ShapeModifiers.getModifier(t[s].ty)).init(this,t[s]),e[s]=h,this.shapeModifiers.push(h)),y.push(h)):"rp"===t[s].ty&&(f?(h=e[s]).closed=!0:(h=ShapeModifiers.getModifier(t[s].ty),e[s]=h,h.init(this,t,s,e),this.shapeModifiers.push(h),o=!1),y.push(h));this.addProcessedElement(t[s],s+1)}for(d=m.length,s=0;s<d;s+=1)m[s].closed=!0;for(d=y.length,s=0;s<d;s+=1)y[s].closed=!0},SVGShapeElement.prototype.renderInnerContent=function(){var t;this.renderModifiers();var e=this.stylesList.length;for(t=0;t<e;t+=1)this.stylesList[t].reset();for(this.renderShape(),t=0;t<e;t+=1)(this.stylesList[t]._mdf||this._isFirstFrame)&&(this.stylesList[t].msElem&&(this.stylesList[t].msElem.setAttribute("d",this.stylesList[t].d),this.stylesList[t].d="M0 0"+this.stylesList[t].d),this.stylesList[t].pElem.setAttribute("d",this.stylesList[t].d||"M0 0"))},SVGShapeElement.prototype.renderShape=function(){var t,e,r=this.animatedContents.length;for(t=0;t<r;t+=1)e=this.animatedContents[t],(this._isFirstFrame||e.element._isAnimated)&&!0!==e.data&&e.fn(e.data,e.element,this._isFirstFrame)},SVGShapeElement.prototype.destroy=function(){this.destroyBaseElement(),this.shapesData=null,this.itemsData=null},LetterProps.prototype.update=function(t,e,r,n,i,a){this._mdf.o=!1,this._mdf.sw=!1,this._mdf.sc=!1,this._mdf.fc=!1,this._mdf.m=!1,this._mdf.p=!1;var o=!1;return this.o!==t&&(this.o=t,this._mdf.o=!0,o=!0),this.sw!==e&&(this.sw=e,this._mdf.sw=!0,o=!0),this.sc!==r&&(this.sc=r,this._mdf.sc=!0,o=!0),this.fc!==n&&(this.fc=n,this._mdf.fc=!0,o=!0),this.m!==i&&(this.m=i,this._mdf.m=!0,o=!0),!a.length||this.p[0]===a[0]&&this.p[1]===a[1]&&this.p[4]===a[4]&&this.p[5]===a[5]&&this.p[12]===a[12]&&this.p[13]===a[13]||(this.p=a,this._mdf.p=!0,o=!0),o},TextProperty.prototype.defaultBoxWidth=[0,0],TextProperty.prototype.copyData=function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},TextProperty.prototype.setCurrentData=function(t){t.__complete||this.completeTextData(t),this.currentData=t,this.currentData.boxWidth=this.currentData.boxWidth||this.defaultBoxWidth,this._mdf=!0},TextProperty.prototype.searchProperty=function(){return this.searchKeyframes()},TextProperty.prototype.searchKeyframes=function(){return this.kf=this.data.d.k.length>1,this.kf&&this.addEffect(this.getKeyframeValue.bind(this)),this.kf},TextProperty.prototype.addEffect=function(t){this.effectsSequence.push(t),this.elem.addDynamicProperty(this)},TextProperty.prototype.getValue=function(t){if(this.elem.globalData.frameId!==this.frameId&&this.effectsSequence.length||t){this.currentData.t=this.data.d.k[this.keysIndex].s.t;var e=this.currentData,r=this.keysIndex;if(this.lock)this.setCurrentData(this.currentData);else{var n;this.lock=!0,this._mdf=!1;var i=this.effectsSequence.length,a=t||this.data.d.k[this.keysIndex].s;for(n=0;n<i;n+=1)a=r!==this.keysIndex?this.effectsSequence[n](a,a.t):this.effectsSequence[n](this.currentData,a.t);e!==a&&this.setCurrentData(a),this.v=this.currentData,this.pv=this.v,this.lock=!1,this.frameId=this.elem.globalData.frameId}}},TextProperty.prototype.getKeyframeValue=function(){for(var t=this.data.d.k,e=this.elem.comp.renderedFrame,r=0,n=t.length;r<=n-1&&!(r===n-1||t[r+1].t>e);)r+=1;return this.keysIndex!==r&&(this.keysIndex=r),this.data.d.k[this.keysIndex].s},TextProperty.prototype.buildFinalText=function(t){for(var e,r,n=[],i=0,a=t.length,o=!1,s=!1,l="";i<a;)o=s,s=!1,e=t.charCodeAt(i),l=t.charAt(i),FontManager.isCombinedCharacter(e)?o=!0:e>=55296&&e<=56319?FontManager.isRegionalFlag(t,i)?l=t.substr(i,14):(r=t.charCodeAt(i+1))>=56320&&r<=57343&&(FontManager.isModifier(e,r)?(l=t.substr(i,2),o=!0):l=FontManager.isFlagEmoji(t.substr(i,4))?t.substr(i,4):t.substr(i,2)):e>56319?(r=t.charCodeAt(i+1),FontManager.isVariationSelector(e)&&(o=!0)):FontManager.isZeroWidthJoiner(e)&&(o=!0,s=!0),o?(n[n.length-1]+=l,o=!1):n.push(l),i+=l.length;return n},TextProperty.prototype.completeTextData=function(t){t.__complete=!0;var e,r,n,i,a,o,s,l=this.elem.globalData.fontManager,c=this.data,u=[],h=0,f=c.m.g,p=0,d=0,m=0,y=[],v=0,g=0,b=l.getFontByName(t.f),x=0,w=getFontProperties(b);t.fWeight=w.weight,t.fStyle=w.style,t.finalSize=t.s,t.finalText=this.buildFinalText(t.t),r=t.finalText.length,t.finalLineHeight=t.lh;var E,k=t.tr/1e3*t.finalSize;if(t.sz)for(var S,_,P=!0,C=t.sz[0],A=t.sz[1];P;){S=0,v=0,r=(_=this.buildFinalText(t.t)).length,k=t.tr/1e3*t.finalSize;var T=-1;for(e=0;e<r;e+=1)E=_[e].charCodeAt(0),n=!1," "===_[e]?T=e:13!==E&&3!==E||(v=0,n=!0,S+=t.finalLineHeight||1.2*t.finalSize),l.chars?(s=l.getCharData(_[e],b.fStyle,b.fFamily),x=n?0:s.w*t.finalSize/100):x=l.measureText(_[e],t.f,t.finalSize),v+x>C&&" "!==_[e]?(-1===T?r+=1:e=T,S+=t.finalLineHeight||1.2*t.finalSize,_.splice(e,T===e?1:0,"\r"),T=-1,v=0):(v+=x,v+=k);S+=b.ascent*t.finalSize/100,this.canResize&&t.finalSize>this.minimumFontSize&&A<S?(t.finalSize-=1,t.finalLineHeight=t.finalSize*t.lh/t.s):(t.finalText=_,r=t.finalText.length,P=!1)}v=-k,x=0;var M,D=0;for(e=0;e<r;e+=1)if(n=!1,13===(E=(M=t.finalText[e]).charCodeAt(0))||3===E?(D=0,y.push(v),g=v>g?v:g,v=-2*k,i="",n=!0,m+=1):i=M,l.chars?(s=l.getCharData(M,b.fStyle,l.getFontByName(t.f).fFamily),x=n?0:s.w*t.finalSize/100):x=l.measureText(i,t.f,t.finalSize)," "===M?D+=x+k:(v+=x+k+D,D=0),u.push({l:x,an:x,add:p,n,anIndexes:[],val:i,line:m,animatorJustifyOffset:0}),2==f){if(p+=x,""===i||" "===i||e===r-1){for(""!==i&&" "!==i||(p-=x);d<=e;)u[d].an=p,u[d].ind=h,u[d].extra=x,d+=1;h+=1,p=0}}else if(3==f){if(p+=x,""===i||e===r-1){for(""===i&&(p-=x);d<=e;)u[d].an=p,u[d].ind=h,u[d].extra=x,d+=1;p=0,h+=1}}else u[h].ind=h,u[h].extra=0,h+=1;if(t.l=u,g=v>g?v:g,y.push(v),t.sz)t.boxWidth=t.sz[0],t.justifyOffset=0;else switch(t.boxWidth=g,t.j){case 1:t.justifyOffset=-t.boxWidth;break;case 2:t.justifyOffset=-t.boxWidth/2;break;default:t.justifyOffset=0}t.lineWidths=y;var L,O,F,I,j=c.a;o=j.length;var N=[];for(a=0;a<o;a+=1){for((L=j[a]).a.sc&&(t.strokeColorAnim=!0),L.a.sw&&(t.strokeWidthAnim=!0),(L.a.fc||L.a.fh||L.a.fs||L.a.fb)&&(t.fillColorAnim=!0),I=0,F=L.s.b,e=0;e<r;e+=1)(O=u[e]).anIndexes[a]=I,(1==F&&""!==O.val||2==F&&""!==O.val&&" "!==O.val||3==F&&(O.n||" "==O.val||e==r-1)||4==F&&(O.n||e==r-1))&&(1===L.s.rn&&N.push(I),I+=1);c.a[a].s.totalChars=I;var B,R=-1;if(1===L.s.rn)for(e=0;e<r;e+=1)R!=(O=u[e]).anIndexes[a]&&(R=O.anIndexes[a],B=N.splice(Math.floor(Math.random()*N.length),1)[0]),O.anIndexes[a]=B}t.yOffset=t.finalLineHeight||1.2*t.finalSize,t.ls=t.ls||0,t.ascent=b.ascent*t.finalSize/100},TextProperty.prototype.updateDocumentData=function(t,e){e=void 0===e?this.keysIndex:e;var r=this.copyData({},this.data.d.k[e].s);r=this.copyData(r,t),this.data.d.k[e].s=r,this.recalculate(e),this.setCurrentData(r),this.elem.addDynamicProperty(this)},TextProperty.prototype.recalculate=function(t){var e=this.data.d.k[t].s;e.__complete=!1,this.keysIndex=0,this._isFirstFrame=!0,this.getValue(e)},TextProperty.prototype.canResizeFont=function(t){this.canResize=t,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)},TextProperty.prototype.setMinimumFontSize=function(t){this.minimumFontSize=Math.floor(t)||1,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)};var TextSelectorProp=function(){var t=Math.max,e=Math.min,r=Math.floor;function n(t,e){this._currentTextLength=-1,this.k=!1,this.data=e,this.elem=t,this.comp=t.comp,this.finalS=0,this.finalE=0,this.initDynamicPropertyContainer(t),this.s=PropertyFactory.getProp(t,e.s||{k:0},0,0,this),this.e="e"in e?PropertyFactory.getProp(t,e.e,0,0,this):{v:100},this.o=PropertyFactory.getProp(t,e.o||{k:0},0,0,this),this.xe=PropertyFactory.getProp(t,e.xe||{k:0},0,0,this),this.ne=PropertyFactory.getProp(t,e.ne||{k:0},0,0,this),this.sm=PropertyFactory.getProp(t,e.sm||{k:100},0,0,this),this.a=PropertyFactory.getProp(t,e.a,0,.01,this),this.dynamicProperties.length||this.getValue()}return n.prototype={getMult:function(n){this._currentTextLength!==this.elem.textProperty.currentData.l.length&&this.getValue();var i=0,a=0,o=1,s=1;this.ne.v>0?i=this.ne.v/100:a=-this.ne.v/100,this.xe.v>0?o=1-this.xe.v/100:s=1+this.xe.v/100;var l=BezierFactory.getBezierEasing(i,a,o,s).get,c=0,u=this.finalS,h=this.finalE,f=this.data.sh;if(2===f)c=l(c=h===u?n>=h?1:0:t(0,e(.5/(h-u)+(n-u)/(h-u),1)));else if(3===f)c=l(c=h===u?n>=h?0:1:1-t(0,e(.5/(h-u)+(n-u)/(h-u),1)));else if(4===f)h===u?c=0:(c=t(0,e(.5/(h-u)+(n-u)/(h-u),1)))<.5?c*=2:c=1-2*(c-.5),c=l(c);else if(5===f){if(h===u)c=0;else{var p=h-u,d=-p/2+(n=e(t(0,n+.5-u),h-u)),m=p/2;c=Math.sqrt(1-d*d/(m*m))}c=l(c)}else 6===f?(h===u?c=0:(n=e(t(0,n+.5-u),h-u),c=(1+Math.cos(Math.PI+2*Math.PI*n/(h-u)))/2),c=l(c)):(n>=r(u)&&(c=t(0,e(n-u<0?e(h,1)-(u-n):h-n,1))),c=l(c));if(100!==this.sm.v){var y=.01*this.sm.v;0===y&&(y=1e-8);var v=.5-.5*y;c<v?c=0:(c=(c-v)/y)>1&&(c=1)}return c*this.a.v},getValue:function(t){this.iterateDynamicProperties(),this._mdf=t||this._mdf,this._currentTextLength=this.elem.textProperty.currentData.l.length||0,t&&2===this.data.r&&(this.e.v=this._currentTextLength);var e=2===this.data.r?1:100/this.data.totalChars,r=this.o.v/e,n=this.s.v/e+r,i=this.e.v/e+r;if(n>i){var a=n;n=i,i=a}this.finalS=n,this.finalE=i}},extendPrototype([DynamicPropertyContainer],n),{getTextSelectorProp:function(t,e,r){return new n(t,e,r)}}}();function TextAnimatorDataProperty(t,e,r){var n={propType:!1},i=PropertyFactory.getProp,a=e.a;this.a={r:a.r?i(t,a.r,0,degToRads,r):n,rx:a.rx?i(t,a.rx,0,degToRads,r):n,ry:a.ry?i(t,a.ry,0,degToRads,r):n,sk:a.sk?i(t,a.sk,0,degToRads,r):n,sa:a.sa?i(t,a.sa,0,degToRads,r):n,s:a.s?i(t,a.s,1,.01,r):n,a:a.a?i(t,a.a,1,0,r):n,o:a.o?i(t,a.o,0,.01,r):n,p:a.p?i(t,a.p,1,0,r):n,sw:a.sw?i(t,a.sw,0,0,r):n,sc:a.sc?i(t,a.sc,1,0,r):n,fc:a.fc?i(t,a.fc,1,0,r):n,fh:a.fh?i(t,a.fh,0,0,r):n,fs:a.fs?i(t,a.fs,0,.01,r):n,fb:a.fb?i(t,a.fb,0,.01,r):n,t:a.t?i(t,a.t,0,0,r):n},this.s=TextSelectorProp.getTextSelectorProp(t,e.s,r),this.s.t=e.s.t}function TextAnimatorProperty(t,e,r){this._isFirstFrame=!0,this._hasMaskedPath=!1,this._frameId=-1,this._textData=t,this._renderType=e,this._elem=r,this._animatorsData=createSizedArray(this._textData.a.length),this._pathData={},this._moreOptions={alignment:{}},this.renderedLetters=[],this.lettersChangedFlag=!1,this.initDynamicPropertyContainer(r)}function ITextElement(){}TextAnimatorProperty.prototype.searchProperties=function(){var t,e,r=this._textData.a.length,n=PropertyFactory.getProp;for(t=0;t<r;t+=1)e=this._textData.a[t],this._animatorsData[t]=new TextAnimatorDataProperty(this._elem,e,this);this._textData.p&&"m"in this._textData.p?(this._pathData={a:n(this._elem,this._textData.p.a,0,0,this),f:n(this._elem,this._textData.p.f,0,0,this),l:n(this._elem,this._textData.p.l,0,0,this),r:n(this._elem,this._textData.p.r,0,0,this),p:n(this._elem,this._textData.p.p,0,0,this),m:this._elem.maskManager.getMaskProperty(this._textData.p.m)},this._hasMaskedPath=!0):this._hasMaskedPath=!1,this._moreOptions.alignment=n(this._elem,this._textData.m.a,1,0,this)},TextAnimatorProperty.prototype.getMeasures=function(t,e){if(this.lettersChangedFlag=e,this._mdf||this._isFirstFrame||e||this._hasMaskedPath&&this._pathData.m._mdf){this._isFirstFrame=!1;var r,n,i,a,o,s,l,c,u,h,f,p,d,m,y,v,g,b,x,w=this._moreOptions.alignment.v,E=this._animatorsData,k=this._textData,S=this.mHelper,_=this._renderType,P=this.renderedLetters.length,C=t.l;if(this._hasMaskedPath){if(x=this._pathData.m,!this._pathData.n||this._pathData._mdf){var A,T=x.v;for(this._pathData.r.v&&(T=T.reverse()),o={tLength:0,segments:[]},a=T._length-1,v=0,i=0;i<a;i+=1)A=bez.buildBezierData(T.v[i],T.v[i+1],[T.o[i][0]-T.v[i][0],T.o[i][1]-T.v[i][1]],[T.i[i+1][0]-T.v[i+1][0],T.i[i+1][1]-T.v[i+1][1]]),o.tLength+=A.segmentLength,o.segments.push(A),v+=A.segmentLength;i=a,x.v.c&&(A=bez.buildBezierData(T.v[i],T.v[0],[T.o[i][0]-T.v[i][0],T.o[i][1]-T.v[i][1]],[T.i[0][0]-T.v[0][0],T.i[0][1]-T.v[0][1]]),o.tLength+=A.segmentLength,o.segments.push(A),v+=A.segmentLength),this._pathData.pi=o}if(o=this._pathData.pi,s=this._pathData.f.v,f=0,h=1,c=0,u=!0,m=o.segments,s<0&&x.v.c)for(o.tLength<Math.abs(s)&&(s=-Math.abs(s)%o.tLength),h=(d=m[f=m.length-1].points).length-1;s<0;)s+=d[h].partialLength,(h-=1)<0&&(h=(d=m[f-=1].points).length-1);p=(d=m[f].points)[h-1],y=(l=d[h]).partialLength}a=C.length,r=0,n=0;var M,D,L,O,F,I=1.2*t.finalSize*.714,j=!0;L=E.length;var N,B,R,G,V,z,H,$,U,q,W,Y,X=-1,Z=s,J=f,K=h,Q=-1,tt="",et=this.defaultPropsArray;if(2===t.j||1===t.j){var rt=0,nt=0,it=2===t.j?-.5:-1,at=0,ot=!0;for(i=0;i<a;i+=1)if(C[i].n){for(rt&&(rt+=nt);at<i;)C[at].animatorJustifyOffset=rt,at+=1;rt=0,ot=!0}else{for(D=0;D<L;D+=1)(M=E[D].a).t.propType&&(ot&&2===t.j&&(nt+=M.t.v*it),(F=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars)).length?rt+=M.t.v*F[0]*it:rt+=M.t.v*F*it);ot=!1}for(rt&&(rt+=nt);at<i;)C[at].animatorJustifyOffset=rt,at+=1}for(i=0;i<a;i+=1){if(S.reset(),G=1,C[i].n)r=0,n+=t.yOffset,n+=j?1:0,s=Z,j=!1,this._hasMaskedPath&&(h=K,p=(d=m[f=J].points)[h-1],y=(l=d[h]).partialLength,c=0),tt="",W="",U="",Y="",et=this.defaultPropsArray;else{if(this._hasMaskedPath){if(Q!==C[i].line){switch(t.j){case 1:s+=v-t.lineWidths[C[i].line];break;case 2:s+=(v-t.lineWidths[C[i].line])/2}Q=C[i].line}X!==C[i].ind&&(C[X]&&(s+=C[X].extra),s+=C[i].an/2,X=C[i].ind),s+=w[0]*C[i].an*.005;var st=0;for(D=0;D<L;D+=1)(M=E[D].a).p.propType&&((F=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars)).length?st+=M.p.v[0]*F[0]:st+=M.p.v[0]*F),M.a.propType&&((F=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars)).length?st+=M.a.v[0]*F[0]:st+=M.a.v[0]*F);for(u=!0,this._pathData.a.v&&(s=.5*C[0].an+(v-this._pathData.f.v-.5*C[0].an-.5*C[C.length-1].an)*X/(a-1),s+=this._pathData.f.v);u;)c+y>=s+st||!d?(g=(s+st-c)/l.partialLength,B=p.point[0]+(l.point[0]-p.point[0])*g,R=p.point[1]+(l.point[1]-p.point[1])*g,S.translate(-w[0]*C[i].an*.005,-w[1]*I*.01),u=!1):d&&(c+=l.partialLength,(h+=1)>=d.length&&(h=0,m[f+=1]?d=m[f].points:x.v.c?(h=0,d=m[f=0].points):(c-=l.partialLength,d=null)),d&&(p=l,y=(l=d[h]).partialLength));N=C[i].an/2-C[i].add,S.translate(-N,0,0)}else N=C[i].an/2-C[i].add,S.translate(-N,0,0),S.translate(-w[0]*C[i].an*.005,-w[1]*I*.01,0);for(D=0;D<L;D+=1)(M=E[D].a).t.propType&&(F=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars),0===r&&0===t.j||(this._hasMaskedPath?F.length?s+=M.t.v*F[0]:s+=M.t.v*F:F.length?r+=M.t.v*F[0]:r+=M.t.v*F));for(t.strokeWidthAnim&&(z=t.sw||0),t.strokeColorAnim&&(V=t.sc?[t.sc[0],t.sc[1],t.sc[2]]:[0,0,0]),t.fillColorAnim&&t.fc&&(H=[t.fc[0],t.fc[1],t.fc[2]]),D=0;D<L;D+=1)(M=E[D].a).a.propType&&((F=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars)).length?S.translate(-M.a.v[0]*F[0],-M.a.v[1]*F[1],M.a.v[2]*F[2]):S.translate(-M.a.v[0]*F,-M.a.v[1]*F,M.a.v[2]*F));for(D=0;D<L;D+=1)(M=E[D].a).s.propType&&((F=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars)).length?S.scale(1+(M.s.v[0]-1)*F[0],1+(M.s.v[1]-1)*F[1],1):S.scale(1+(M.s.v[0]-1)*F,1+(M.s.v[1]-1)*F,1));for(D=0;D<L;D+=1){if(M=E[D].a,F=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars),M.sk.propType&&(F.length?S.skewFromAxis(-M.sk.v*F[0],M.sa.v*F[1]):S.skewFromAxis(-M.sk.v*F,M.sa.v*F)),M.r.propType&&(F.length?S.rotateZ(-M.r.v*F[2]):S.rotateZ(-M.r.v*F)),M.ry.propType&&(F.length?S.rotateY(M.ry.v*F[1]):S.rotateY(M.ry.v*F)),M.rx.propType&&(F.length?S.rotateX(M.rx.v*F[0]):S.rotateX(M.rx.v*F)),M.o.propType&&(F.length?G+=(M.o.v*F[0]-G)*F[0]:G+=(M.o.v*F-G)*F),t.strokeWidthAnim&&M.sw.propType&&(F.length?z+=M.sw.v*F[0]:z+=M.sw.v*F),t.strokeColorAnim&&M.sc.propType)for($=0;$<3;$+=1)F.length?V[$]+=(M.sc.v[$]-V[$])*F[0]:V[$]+=(M.sc.v[$]-V[$])*F;if(t.fillColorAnim&&t.fc){if(M.fc.propType)for($=0;$<3;$+=1)F.length?H[$]+=(M.fc.v[$]-H[$])*F[0]:H[$]+=(M.fc.v[$]-H[$])*F;M.fh.propType&&(H=F.length?addHueToRGB(H,M.fh.v*F[0]):addHueToRGB(H,M.fh.v*F)),M.fs.propType&&(H=F.length?addSaturationToRGB(H,M.fs.v*F[0]):addSaturationToRGB(H,M.fs.v*F)),M.fb.propType&&(H=F.length?addBrightnessToRGB(H,M.fb.v*F[0]):addBrightnessToRGB(H,M.fb.v*F))}}for(D=0;D<L;D+=1)(M=E[D].a).p.propType&&(F=E[D].s.getMult(C[i].anIndexes[D],k.a[D].s.totalChars),this._hasMaskedPath?F.length?S.translate(0,M.p.v[1]*F[0],-M.p.v[2]*F[1]):S.translate(0,M.p.v[1]*F,-M.p.v[2]*F):F.length?S.translate(M.p.v[0]*F[0],M.p.v[1]*F[1],-M.p.v[2]*F[2]):S.translate(M.p.v[0]*F,M.p.v[1]*F,-M.p.v[2]*F));if(t.strokeWidthAnim&&(U=z<0?0:z),t.strokeColorAnim&&(q="rgb("+Math.round(255*V[0])+","+Math.round(255*V[1])+","+Math.round(255*V[2])+")"),t.fillColorAnim&&t.fc&&(W="rgb("+Math.round(255*H[0])+","+Math.round(255*H[1])+","+Math.round(255*H[2])+")"),this._hasMaskedPath){if(S.translate(0,-t.ls),S.translate(0,w[1]*I*.01+n,0),this._pathData.p.v){b=(l.point[1]-p.point[1])/(l.point[0]-p.point[0]);var lt=180*Math.atan(b)/Math.PI;l.point[0]<p.point[0]&&(lt+=180),S.rotate(-lt*Math.PI/180)}S.translate(B,R,0),s-=w[0]*C[i].an*.005,C[i+1]&&X!==C[i+1].ind&&(s+=C[i].an/2,s+=.001*t.tr*t.finalSize)}else{switch(S.translate(r,n,0),t.ps&&S.translate(t.ps[0],t.ps[1]+t.ascent,0),t.j){case 1:S.translate(C[i].animatorJustifyOffset+t.justifyOffset+(t.boxWidth-t.lineWidths[C[i].line]),0,0);break;case 2:S.translate(C[i].animatorJustifyOffset+t.justifyOffset+(t.boxWidth-t.lineWidths[C[i].line])/2,0,0)}S.translate(0,-t.ls),S.translate(N,0,0),S.translate(w[0]*C[i].an*.005,w[1]*I*.01,0),r+=C[i].l+.001*t.tr*t.finalSize}"html"===_?tt=S.toCSS():"svg"===_?tt=S.to2dCSS():et=[S.props[0],S.props[1],S.props[2],S.props[3],S.props[4],S.props[5],S.props[6],S.props[7],S.props[8],S.props[9],S.props[10],S.props[11],S.props[12],S.props[13],S.props[14],S.props[15]],Y=G}P<=i?(O=new LetterProps(Y,U,q,W,tt,et),this.renderedLetters.push(O),P+=1,this.lettersChangedFlag=!0):(O=this.renderedLetters[i],this.lettersChangedFlag=O.update(Y,U,q,W,tt,et)||this.lettersChangedFlag)}}},TextAnimatorProperty.prototype.getValue=function(){this._elem.globalData.frameId!==this._frameId&&(this._frameId=this._elem.globalData.frameId,this.iterateDynamicProperties())},TextAnimatorProperty.prototype.mHelper=new Matrix,TextAnimatorProperty.prototype.defaultPropsArray=[],extendPrototype([DynamicPropertyContainer],TextAnimatorProperty),ITextElement.prototype.initElement=function(t,e,r){this.lettersChangedFlag=!0,this.initFrame(),this.initBaseData(t,e,r),this.textProperty=new TextProperty(this,t.t,this.dynamicProperties),this.textAnimator=new TextAnimatorProperty(t.t,this.renderType,this),this.initTransform(t,e,r),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide(),this.textAnimator.searchProperties(this.dynamicProperties)},ITextElement.prototype.prepareFrame=function(t){this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange)},ITextElement.prototype.createPathShape=function(t,e){var r,n,i=e.length,a="";for(r=0;r<i;r+=1)"sh"===e[r].ty&&(n=e[r].ks.k,a+=buildShapeString(n,n.i.length,!0,t));return a},ITextElement.prototype.updateDocumentData=function(t,e){this.textProperty.updateDocumentData(t,e)},ITextElement.prototype.canResizeFont=function(t){this.textProperty.canResizeFont(t)},ITextElement.prototype.setMinimumFontSize=function(t){this.textProperty.setMinimumFontSize(t)},ITextElement.prototype.applyTextPropertiesToMatrix=function(t,e,r,n,i){switch(t.ps&&e.translate(t.ps[0],t.ps[1]+t.ascent,0),e.translate(0,-t.ls,0),t.j){case 1:e.translate(t.justifyOffset+(t.boxWidth-t.lineWidths[r]),0,0);break;case 2:e.translate(t.justifyOffset+(t.boxWidth-t.lineWidths[r])/2,0,0)}e.translate(n,i,0)},ITextElement.prototype.buildColor=function(t){return"rgb("+Math.round(255*t[0])+","+Math.round(255*t[1])+","+Math.round(255*t[2])+")"},ITextElement.prototype.emptyProp=new LetterProps,ITextElement.prototype.destroy=function(){},ITextElement.prototype.validateText=function(){(this.textProperty._mdf||this.textProperty._isFirstFrame)&&(this.buildNewText(),this.textProperty._isFirstFrame=!1,this.textProperty._mdf=!1)};var emptyShapeData={shapes:[]};function SVGTextLottieElement(t,e,r){this.textSpans=[],this.renderType="svg",this.initElement(t,e,r)}function ISolidElement(t,e,r){this.initElement(t,e,r)}function NullElement(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initFrame(),this.initTransform(t,e,r),this.initHierarchy()}function SVGRendererBase(){}function ICompElement(){}function SVGCompElement(t,e,r){this.layers=t.layers,this.supports3d=!0,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}function SVGRenderer(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.svgElement=createNS("svg");var r="";if(e&&e.title){var n=createNS("title"),i=createElementID();n.setAttribute("id",i),n.textContent=e.title,this.svgElement.appendChild(n),r+=i}if(e&&e.description){var a=createNS("desc"),o=createElementID();a.setAttribute("id",o),a.textContent=e.description,this.svgElement.appendChild(a),r+=" "+o}r&&this.svgElement.setAttribute("aria-labelledby",r);var s=createNS("defs");this.svgElement.appendChild(s);var l=createNS("g");this.svgElement.appendChild(l),this.layerElement=l,this.renderConfig={preserveAspectRatio:e&&e.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:e&&e.contentVisibility||"visible",progressiveLoad:e&&e.progressiveLoad||!1,hideOnTransparent:!(e&&!1===e.hideOnTransparent),viewBoxOnly:e&&e.viewBoxOnly||!1,viewBoxSize:e&&e.viewBoxSize||!1,className:e&&e.className||"",id:e&&e.id||"",focusable:e&&e.focusable,filterSize:{width:e&&e.filterSize&&e.filterSize.width||"100%",height:e&&e.filterSize&&e.filterSize.height||"100%",x:e&&e.filterSize&&e.filterSize.x||"0%",y:e&&e.filterSize&&e.filterSize.y||"0%"},width:e&&e.width,height:e&&e.height,runExpressions:!e||void 0===e.runExpressions||e.runExpressions},this.globalData={_mdf:!1,frameNum:-1,defs:s,renderConfig:this.renderConfig},this.elements=[],this.pendingElements=[],this.destroyed=!1,this.rendererType="svg"}function ShapeTransformManager(){this.sequences={},this.sequenceList=[],this.transform_key_count=0}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],SVGTextLottieElement),SVGTextLottieElement.prototype.createContent=function(){this.data.singleShape&&!this.globalData.fontManager.chars&&(this.textContainer=createNS("text"))},SVGTextLottieElement.prototype.buildTextContents=function(t){for(var e=0,r=t.length,n=[],i="";e<r;)t[e]===String.fromCharCode(13)||t[e]===String.fromCharCode(3)?(n.push(i),i=""):i+=t[e],e+=1;return n.push(i),n},SVGTextLottieElement.prototype.buildShapeData=function(t,e){if(t.shapes&&t.shapes.length){var r=t.shapes[0];if(r.it){var n=r.it[r.it.length-1];n.s&&(n.s.k[0]=e,n.s.k[1]=e)}}return t},SVGTextLottieElement.prototype.buildNewText=function(){var t,e;this.addDynamicProperty(this);var r=this.textProperty.currentData;this.renderedLetters=createSizedArray(r?r.l.length:0),r.fc?this.layerElement.setAttribute("fill",this.buildColor(r.fc)):this.layerElement.setAttribute("fill","rgba(0,0,0,0)"),r.sc&&(this.layerElement.setAttribute("stroke",this.buildColor(r.sc)),this.layerElement.setAttribute("stroke-width",r.sw)),this.layerElement.setAttribute("font-size",r.finalSize);var n=this.globalData.fontManager.getFontByName(r.f);if(n.fClass)this.layerElement.setAttribute("class",n.fClass);else{this.layerElement.setAttribute("font-family",n.fFamily);var i=r.fWeight,a=r.fStyle;this.layerElement.setAttribute("font-style",a),this.layerElement.setAttribute("font-weight",i)}this.layerElement.setAttribute("aria-label",r.t);var o,s=r.l||[],l=!!this.globalData.fontManager.chars;e=s.length;var c=this.mHelper,u=this.data.singleShape,h=0,f=0,p=!0,d=.001*r.tr*r.finalSize;if(!u||l||r.sz){var m,y=this.textSpans.length;for(t=0;t<e;t+=1){if(this.textSpans[t]||(this.textSpans[t]={span:null,childSpan:null,glyph:null}),!l||!u||0===t){if(o=y>t?this.textSpans[t].span:createNS(l?"g":"text"),y<=t){if(o.setAttribute("stroke-linecap","butt"),o.setAttribute("stroke-linejoin","round"),o.setAttribute("stroke-miterlimit","4"),this.textSpans[t].span=o,l){var v=createNS("g");o.appendChild(v),this.textSpans[t].childSpan=v}this.textSpans[t].span=o,this.layerElement.appendChild(o)}o.style.display="inherit"}if(c.reset(),u&&(s[t].n&&(h=-d,f+=r.yOffset,f+=p?1:0,p=!1),this.applyTextPropertiesToMatrix(r,c,s[t].line,h,f),h+=s[t].l||0,h+=d),l){var g;if(1===(m=this.globalData.fontManager.getCharData(r.finalText[t],n.fStyle,this.globalData.fontManager.getFontByName(r.f).fFamily)).t)g=new SVGCompElement(m.data,this.globalData,this);else{var b=emptyShapeData;m.data&&m.data.shapes&&(b=this.buildShapeData(m.data,r.finalSize)),g=new SVGShapeElement(b,this.globalData,this)}if(this.textSpans[t].glyph){var x=this.textSpans[t].glyph;this.textSpans[t].childSpan.removeChild(x.layerElement),x.destroy()}this.textSpans[t].glyph=g,g._debug=!0,g.prepareFrame(0),g.renderFrame(),this.textSpans[t].childSpan.appendChild(g.layerElement),1===m.t&&this.textSpans[t].childSpan.setAttribute("transform","scale("+r.finalSize/100+","+r.finalSize/100+")")}else u&&o.setAttribute("transform","translate("+c.props[12]+","+c.props[13]+")"),o.textContent=s[t].val,o.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve")}u&&o&&o.setAttribute("d","")}else{var w=this.textContainer,E="start";switch(r.j){case 1:E="end";break;case 2:E="middle";break;default:E="start"}w.setAttribute("text-anchor",E),w.setAttribute("letter-spacing",d);var k=this.buildTextContents(r.finalText);for(e=k.length,f=r.ps?r.ps[1]+r.ascent:0,t=0;t<e;t+=1)(o=this.textSpans[t].span||createNS("tspan")).textContent=k[t],o.setAttribute("x",0),o.setAttribute("y",f),o.style.display="inherit",w.appendChild(o),this.textSpans[t]||(this.textSpans[t]={span:null,glyph:null}),this.textSpans[t].span=o,f+=r.finalLineHeight;this.layerElement.appendChild(w)}for(;t<this.textSpans.length;)this.textSpans[t].span.style.display="none",t+=1;this._sizeChanged=!0},SVGTextLottieElement.prototype.sourceRectAtTime=function(){if(this.prepareFrame(this.comp.renderedFrame-this.data.st),this.renderInnerContent(),this._sizeChanged){this._sizeChanged=!1;var t=this.layerElement.getBBox();this.bbox={top:t.y,left:t.x,width:t.width,height:t.height}}return this.bbox},SVGTextLottieElement.prototype.getValue=function(){var t,e,r=this.textSpans.length;for(this.renderedFrame=this.comp.renderedFrame,t=0;t<r;t+=1)(e=this.textSpans[t].glyph)&&(e.prepareFrame(this.comp.renderedFrame-this.data.st),e._mdf&&(this._mdf=!0))},SVGTextLottieElement.prototype.renderInnerContent=function(){if(this.validateText(),(!this.data.singleShape||this._mdf)&&(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag)){var t,e;this._sizeChanged=!0;var r,n,i,a=this.textAnimator.renderedLetters,o=this.textProperty.currentData.l;for(e=o.length,t=0;t<e;t+=1)o[t].n||(r=a[t],n=this.textSpans[t].span,(i=this.textSpans[t].glyph)&&i.renderFrame(),r._mdf.m&&n.setAttribute("transform",r.m),r._mdf.o&&n.setAttribute("opacity",r.o),r._mdf.sw&&n.setAttribute("stroke-width",r.sw),r._mdf.sc&&n.setAttribute("stroke",r.sc),r._mdf.fc&&n.setAttribute("fill",r.fc))}},extendPrototype([IImageElement],ISolidElement),ISolidElement.prototype.createContent=function(){var t=createNS("rect");t.setAttribute("width",this.data.sw),t.setAttribute("height",this.data.sh),t.setAttribute("fill",this.data.sc),this.layerElement.appendChild(t)},NullElement.prototype.prepareFrame=function(t){this.prepareProperties(t,!0)},NullElement.prototype.renderFrame=function(){},NullElement.prototype.getBaseElement=function(){return null},NullElement.prototype.destroy=function(){},NullElement.prototype.sourceRectAtTime=function(){},NullElement.prototype.hide=function(){},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement],NullElement),extendPrototype([BaseRenderer],SVGRendererBase),SVGRendererBase.prototype.createNull=function(t){return new NullElement(t,this.globalData,this)},SVGRendererBase.prototype.createShape=function(t){return new SVGShapeElement(t,this.globalData,this)},SVGRendererBase.prototype.createText=function(t){return new SVGTextLottieElement(t,this.globalData,this)},SVGRendererBase.prototype.createImage=function(t){return new IImageElement(t,this.globalData,this)},SVGRendererBase.prototype.createSolid=function(t){return new ISolidElement(t,this.globalData,this)},SVGRendererBase.prototype.configAnimation=function(t){this.svgElement.setAttribute("xmlns","http://www.w3.org/2000/svg"),this.svgElement.setAttribute("xmlns:xlink","http://www.w3.org/1999/xlink"),this.renderConfig.viewBoxSize?this.svgElement.setAttribute("viewBox",this.renderConfig.viewBoxSize):this.svgElement.setAttribute("viewBox","0 0 "+t.w+" "+t.h),this.renderConfig.viewBoxOnly||(this.svgElement.setAttribute("width",t.w),this.svgElement.setAttribute("height",t.h),this.svgElement.style.width="100%",this.svgElement.style.height="100%",this.svgElement.style.transform="translate3d(0,0,0)",this.svgElement.style.contentVisibility=this.renderConfig.contentVisibility),this.renderConfig.width&&this.svgElement.setAttribute("width",this.renderConfig.width),this.renderConfig.height&&this.svgElement.setAttribute("height",this.renderConfig.height),this.renderConfig.className&&this.svgElement.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.svgElement.setAttribute("id",this.renderConfig.id),void 0!==this.renderConfig.focusable&&this.svgElement.setAttribute("focusable",this.renderConfig.focusable),this.svgElement.setAttribute("preserveAspectRatio",this.renderConfig.preserveAspectRatio),this.animationItem.wrapper.appendChild(this.svgElement);var e=this.globalData.defs;this.setupGlobalData(t,e),this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.data=t;var r=createNS("clipPath"),n=createNS("rect");n.setAttribute("width",t.w),n.setAttribute("height",t.h),n.setAttribute("x",0),n.setAttribute("y",0);var i=createElementID();r.setAttribute("id",i),r.appendChild(n),this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+i+")"),e.appendChild(r),this.layers=t.layers,this.elements=createSizedArray(t.layers.length)},SVGRendererBase.prototype.destroy=function(){var t;this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.layerElement=null,this.globalData.defs=null;var e=this.layers?this.layers.length:0;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy&&this.elements[t].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},SVGRendererBase.prototype.updateContainerSize=function(){},SVGRendererBase.prototype.findIndexByInd=function(t){var e=0,r=this.layers.length;for(e=0;e<r;e+=1)if(this.layers[e].ind===t)return e;return-1},SVGRendererBase.prototype.buildItem=function(t){var e=this.elements;if(!e[t]&&99!==this.layers[t].ty){e[t]=!0;var r=this.createItem(this.layers[t]);if(e[t]=r,getExpressionsPlugin()&&(0===this.layers[t].ty&&this.globalData.projectInterface.registerComposition(r),r.initExpressions()),this.appendElementInPos(r,t),this.layers[t].tt){var n="tp"in this.layers[t]?this.findIndexByInd(this.layers[t].tp):t-1;if(-1===n)return;if(this.elements[n]&&!0!==this.elements[n]){var i=e[n].getMatte(this.layers[t].tt);r.setMatte(i)}else this.buildItem(n),this.addPendingElement(r)}}},SVGRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var t=this.pendingElements.pop();if(t.checkParenting(),t.data.tt)for(var e=0,r=this.elements.length;e<r;){if(this.elements[e]===t){var n="tp"in t.data?this.findIndexByInd(t.data.tp):e-1,i=this.elements[n].getMatte(this.layers[e].tt);t.setMatte(i);break}e+=1}}},SVGRendererBase.prototype.renderFrame=function(t){if(this.renderedFrame!==t&&!this.destroyed){var e;null===t?t=this.renderedFrame:this.renderedFrame=t,this.globalData.frameNum=t,this.globalData.frameId+=1,this.globalData.projectInterface.currentFrame=t,this.globalData._mdf=!1;var r=this.layers.length;for(this.completeLayers||this.checkLayers(t),e=r-1;e>=0;e-=1)(this.completeLayers||this.elements[e])&&this.elements[e].prepareFrame(t-this.layers[e].st);if(this.globalData._mdf)for(e=0;e<r;e+=1)(this.completeLayers||this.elements[e])&&this.elements[e].renderFrame()}},SVGRendererBase.prototype.appendElementInPos=function(t,e){var r=t.getBaseElement();if(r){for(var n,i=0;i<e;)this.elements[i]&&!0!==this.elements[i]&&this.elements[i].getBaseElement()&&(n=this.elements[i].getBaseElement()),i+=1;n?this.layerElement.insertBefore(r,n):this.layerElement.appendChild(r)}},SVGRendererBase.prototype.hide=function(){this.layerElement.style.display="none"},SVGRendererBase.prototype.show=function(){this.layerElement.style.display="block"},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement,RenderableDOMElement],ICompElement),ICompElement.prototype.initElement=function(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initTransform(t,e,r),this.initRenderable(),this.initHierarchy(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),!this.data.xt&&e.progressiveLoad||this.buildAllItems(),this.hide()},ICompElement.prototype.prepareFrame=function(t){if(this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange),this.isInRange||this.data.xt){if(this.tm._placeholder)this.renderedFrame=t/this.data.sr;else{var e=this.tm.v;e===this.data.op&&(e=this.data.op-1),this.renderedFrame=e}var r,n=this.elements.length;for(this.completeLayers||this.checkLayers(this.renderedFrame),r=n-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&(this.elements[r].prepareFrame(this.renderedFrame-this.layers[r].st),this.elements[r]._mdf&&(this._mdf=!0))}},ICompElement.prototype.renderInnerContent=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)(this.completeLayers||this.elements[t])&&this.elements[t].renderFrame()},ICompElement.prototype.setElements=function(t){this.elements=t},ICompElement.prototype.getElements=function(){return this.elements},ICompElement.prototype.destroyElements=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy()},ICompElement.prototype.destroy=function(){this.destroyElements(),this.destroyBaseElement()},extendPrototype([SVGRendererBase,ICompElement,SVGBaseElement],SVGCompElement),SVGCompElement.prototype.createComp=function(t){return new SVGCompElement(t,this.globalData,this)},extendPrototype([SVGRendererBase],SVGRenderer),SVGRenderer.prototype.createComp=function(t){return new SVGCompElement(t,this.globalData,this)},ShapeTransformManager.prototype={addTransformSequence:function(t){var e,r=t.length,n="_";for(e=0;e<r;e+=1)n+=t[e].transform.key+"_";var i=this.sequences[n];return i||(i={transforms:[].concat(t),finalTransform:new Matrix,_mdf:!1},this.sequences[n]=i,this.sequenceList.push(i)),i},processSequence:function(t,e){for(var r=0,n=t.transforms.length,i=e;r<n&&!e;){if(t.transforms[r].transform.mProps._mdf){i=!0;break}r+=1}if(i)for(t.finalTransform.reset(),r=n-1;r>=0;r-=1)t.finalTransform.multiply(t.transforms[r].transform.mProps.v);t._mdf=i},processSequences:function(t){var e,r=this.sequenceList.length;for(e=0;e<r;e+=1)this.processSequence(this.sequenceList[e],t)},getNewKey:function(){return this.transform_key_count+=1,"_"+this.transform_key_count}};var lumaLoader=function(){var t="__lottie_element_luma_buffer",e=null,r=null,n=null;function i(){var i,a,o;e||(i=createNS("svg"),a=createNS("filter"),o=createNS("feColorMatrix"),a.setAttribute("id",t),o.setAttribute("type","matrix"),o.setAttribute("color-interpolation-filters","sRGB"),o.setAttribute("values","0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0"),a.appendChild(o),i.appendChild(a),i.setAttribute("id",t+"_svg"),featureSupport.svgLumaHidden&&(i.style.display="none"),n=i,document.body.appendChild(n),e=createTag("canvas"),(r=e.getContext("2d")).filter="url(#"+t+")",r.fillStyle="rgba(0,0,0,0)",r.fillRect(0,0,1,1))}return{load:i,get:function(n){return e||i(),e.width=n.width,e.height=n.height,r.filter="url(#"+t+")",e}}};function createCanvas(t,e){if(featureSupport.offscreenCanvas)return new OffscreenCanvas(t,e);var r=createTag("canvas");return r.width=t,r.height=e,r}var assetLoader={loadLumaCanvas:lumaLoader.load,getLumaCanvas:lumaLoader.get,createCanvas},registeredEffects={};function CVEffects(t){var e,r,n=t.data.ef?t.data.ef.length:0;for(this.filters=[],e=0;e<n;e+=1){r=null;var i=t.data.ef[e].ty;registeredEffects[i]&&(r=new(0,registeredEffects[i].effect)(t.effectsManager.effectElements[e],t)),r&&this.filters.push(r)}this.filters.length&&t.addRenderableComponent(this)}function registerEffect(t,e){registeredEffects[t]={effect:e}}function CVMaskElement(t,e){var r;this.data=t,this.element=e,this.masksProperties=this.data.masksProperties||[],this.viewData=createSizedArray(this.masksProperties.length);var n=this.masksProperties.length,i=!1;for(r=0;r<n;r+=1)"n"!==this.masksProperties[r].mode&&(i=!0),this.viewData[r]=ShapePropertyFactory.getShapeProp(this.element,this.masksProperties[r],3);this.hasMasks=i,i&&this.element.addRenderableComponent(this)}function CVBaseElement(){}CVEffects.prototype.renderFrame=function(t){var e,r=this.filters.length;for(e=0;e<r;e+=1)this.filters[e].renderFrame(t)},CVEffects.prototype.getEffects=function(t){var e,r=this.filters.length,n=[];for(e=0;e<r;e+=1)this.filters[e].type===t&&n.push(this.filters[e]);return n},CVMaskElement.prototype.renderFrame=function(){if(this.hasMasks){var t,e,r,n,i=this.element.finalTransform.mat,a=this.element.canvasContext,o=this.masksProperties.length;for(a.beginPath(),t=0;t<o;t+=1)if("n"!==this.masksProperties[t].mode){var s;this.masksProperties[t].inv&&(a.moveTo(0,0),a.lineTo(this.element.globalData.compSize.w,0),a.lineTo(this.element.globalData.compSize.w,this.element.globalData.compSize.h),a.lineTo(0,this.element.globalData.compSize.h),a.lineTo(0,0)),n=this.viewData[t].v,e=i.applyToPointArray(n.v[0][0],n.v[0][1],0),a.moveTo(e[0],e[1]);var l=n._length;for(s=1;s<l;s+=1)r=i.applyToTriplePoints(n.o[s-1],n.i[s],n.v[s]),a.bezierCurveTo(r[0],r[1],r[2],r[3],r[4],r[5]);r=i.applyToTriplePoints(n.o[s-1],n.i[0],n.v[0]),a.bezierCurveTo(r[0],r[1],r[2],r[3],r[4],r[5])}this.element.globalData.renderer.save(!0),a.clip()}},CVMaskElement.prototype.getMaskProperty=MaskElement.prototype.getMaskProperty,CVMaskElement.prototype.destroy=function(){this.element=null};var operationsMap={1:"source-in",2:"source-out",3:"source-in",4:"source-out"};function CVShapeData(t,e,r,n){this.styledShapes=[],this.tr=[0,0,0,0,0,0];var i,a=4;"rc"===e.ty?a=5:"el"===e.ty?a=6:"sr"===e.ty&&(a=7),this.sh=ShapePropertyFactory.getShapeProp(t,e,a,t);var o,s=r.length;for(i=0;i<s;i+=1)r[i].closed||(o={transforms:n.addTransformSequence(r[i].transforms),trNodes:[]},this.styledShapes.push(o),r[i].elements.push(o))}function CVShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.itemsData=[],this.prevViewData=[],this.shapeModifiers=[],this.processedElements=[],this.transformsManager=new ShapeTransformManager,this.initElement(t,e,r)}function CVTextElement(t,e,r){this.textSpans=[],this.yOffset=0,this.fillColorAnim=!1,this.strokeColorAnim=!1,this.strokeWidthAnim=!1,this.stroke=!1,this.fill=!1,this.justifyOffset=0,this.currentRender=null,this.renderType="canvas",this.values={fill:"rgba(0,0,0,0)",stroke:"rgba(0,0,0,0)",sWidth:0,fValue:""},this.initElement(t,e,r)}function CVImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.img=e.imageLoader.getAsset(this.assetData),this.initElement(t,e,r)}function CVSolidElement(t,e,r){this.initElement(t,e,r)}function CanvasRendererBase(){}function CanvasContext(){this.opacity=-1,this.transform=createTypedArray("float32",16),this.fillStyle="",this.strokeStyle="",this.lineWidth="",this.lineCap="",this.lineJoin="",this.miterLimit="",this.id=Math.random()}function CVContextData(){var t;for(this.stack=[],this.cArrPos=0,this.cTr=new Matrix,t=0;t<15;t+=1){var e=new CanvasContext;this.stack[t]=e}this._length=15,this.nativeContext=null,this.transformMat=new Matrix,this.currentOpacity=1,this.currentFillStyle="",this.appliedFillStyle="",this.currentStrokeStyle="",this.appliedStrokeStyle="",this.currentLineWidth="",this.appliedLineWidth="",this.currentLineCap="",this.appliedLineCap="",this.currentLineJoin="",this.appliedLineJoin="",this.appliedMiterLimit="",this.currentMiterLimit=""}function CVCompElement(t,e,r){this.completeLayers=!1,this.layers=t.layers,this.pendingElements=[],this.elements=createSizedArray(this.layers.length),this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}function CanvasRenderer(t,e){this.animationItem=t,this.renderConfig={clearCanvas:!e||void 0===e.clearCanvas||e.clearCanvas,context:e&&e.context||null,progressiveLoad:e&&e.progressiveLoad||!1,preserveAspectRatio:e&&e.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:e&&e.contentVisibility||"visible",className:e&&e.className||"",id:e&&e.id||"",runExpressions:!e||void 0===e.runExpressions||e.runExpressions},this.renderConfig.dpr=e&&e.dpr||1,this.animationItem.wrapper&&(this.renderConfig.dpr=e&&e.dpr||window.devicePixelRatio||1),this.renderedFrame=-1,this.globalData={frameNum:-1,_mdf:!1,renderConfig:this.renderConfig,currentGlobalAlpha:-1},this.contextData=new CVContextData,this.elements=[],this.pendingElements=[],this.transformMat=new Matrix,this.completeLayers=!1,this.rendererType="canvas",this.renderConfig.clearCanvas&&(this.ctxTransform=this.contextData.transform.bind(this.contextData),this.ctxOpacity=this.contextData.opacity.bind(this.contextData),this.ctxFillStyle=this.contextData.fillStyle.bind(this.contextData),this.ctxStrokeStyle=this.contextData.strokeStyle.bind(this.contextData),this.ctxLineWidth=this.contextData.lineWidth.bind(this.contextData),this.ctxLineCap=this.contextData.lineCap.bind(this.contextData),this.ctxLineJoin=this.contextData.lineJoin.bind(this.contextData),this.ctxMiterLimit=this.contextData.miterLimit.bind(this.contextData),this.ctxFill=this.contextData.fill.bind(this.contextData),this.ctxFillRect=this.contextData.fillRect.bind(this.contextData),this.ctxStroke=this.contextData.stroke.bind(this.contextData),this.save=this.contextData.save.bind(this.contextData))}function HBaseElement(){}function HSolidElement(t,e,r){this.initElement(t,e,r)}function HShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.shapesContainer=createNS("g"),this.initElement(t,e,r),this.prevViewData=[],this.currentBBox={x:999999,y:-999999,h:0,w:0}}function HTextElement(t,e,r){this.textSpans=[],this.textPaths=[],this.currentBBox={x:999999,y:-999999,h:0,w:0},this.renderType="svg",this.isMasked=!1,this.initElement(t,e,r)}function HCameraElement(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initHierarchy();var n=PropertyFactory.getProp;if(this.pe=n(this,t.pe,0,0,this),t.ks.p.s?(this.px=n(this,t.ks.p.x,1,0,this),this.py=n(this,t.ks.p.y,1,0,this),this.pz=n(this,t.ks.p.z,1,0,this)):this.p=n(this,t.ks.p,1,0,this),t.ks.a&&(this.a=n(this,t.ks.a,1,0,this)),t.ks.or.k.length&&t.ks.or.k[0].to){var i,a=t.ks.or.k.length;for(i=0;i<a;i+=1)t.ks.or.k[i].to=null,t.ks.or.k[i].ti=null}this.or=n(this,t.ks.or,1,degToRads,this),this.or.sh=!0,this.rx=n(this,t.ks.rx,0,degToRads,this),this.ry=n(this,t.ks.ry,0,degToRads,this),this.rz=n(this,t.ks.rz,0,degToRads,this),this.mat=new Matrix,this._prevMat=new Matrix,this._isFirstFrame=!0,this.finalTransform={mProp:this}}function HImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.initElement(t,e,r)}function HybridRendererBase(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:e&&e.className||"",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(e&&!1===e.hideOnTransparent),filterSize:{width:e&&e.filterSize&&e.filterSize.width||"400%",height:e&&e.filterSize&&e.filterSize.height||"400%",x:e&&e.filterSize&&e.filterSize.x||"-100%",y:e&&e.filterSize&&e.filterSize.y||"-100%"}},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}function HCompElement(t,e,r){this.layers=t.layers,this.supports3d=!t.hasMask,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}function HybridRenderer(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:e&&e.className||"",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(e&&!1===e.hideOnTransparent),filterSize:{width:e&&e.filterSize&&e.filterSize.width||"400%",height:e&&e.filterSize&&e.filterSize.height||"400%",x:e&&e.filterSize&&e.filterSize.x||"-100%",y:e&&e.filterSize&&e.filterSize.y||"-100%"},runExpressions:!e||void 0===e.runExpressions||e.runExpressions},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}CVBaseElement.prototype={createElements:function(){},initRendererElement:function(){},createContainerElements:function(){if(this.data.tt>=1){this.buffers=[];var t=this.globalData.canvasContext,e=assetLoader.createCanvas(t.canvas.width,t.canvas.height);this.buffers.push(e);var r=assetLoader.createCanvas(t.canvas.width,t.canvas.height);this.buffers.push(r),this.data.tt>=3&&!document._isProxy&&assetLoader.loadLumaCanvas()}this.canvasContext=this.globalData.canvasContext,this.transformCanvas=this.globalData.transformCanvas,this.renderableEffectsManager=new CVEffects(this),this.searchEffectTransforms()},createContent:function(){},setBlendMode:function(){var t=this.globalData;if(t.blendMode!==this.data.bm){t.blendMode=this.data.bm;var e=getBlendMode(this.data.bm);t.canvasContext.globalCompositeOperation=e}},createRenderableComponents:function(){this.maskManager=new CVMaskElement(this.data,this),this.transformEffects=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT)},hideElement:function(){this.hidden||this.isInRange&&!this.isTransparent||(this.hidden=!0)},showElement:function(){this.isInRange&&!this.isTransparent&&(this.hidden=!1,this._isFirstFrame=!0,this.maskManager._isFirstFrame=!0)},clearCanvas:function(t){t.clearRect(this.transformCanvas.tx,this.transformCanvas.ty,this.transformCanvas.w*this.transformCanvas.sx,this.transformCanvas.h*this.transformCanvas.sy)},prepareLayer:function(){if(this.data.tt>=1){var t=this.buffers[0].getContext("2d");this.clearCanvas(t),t.drawImage(this.canvasContext.canvas,0,0),this.currentTransform=this.canvasContext.getTransform(),this.canvasContext.setTransform(1,0,0,1,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.setTransform(this.currentTransform)}},exitLayer:function(){if(this.data.tt>=1){var t=this.buffers[1],e=t.getContext("2d");if(this.clearCanvas(e),e.drawImage(this.canvasContext.canvas,0,0),this.canvasContext.setTransform(1,0,0,1,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.setTransform(this.currentTransform),this.comp.getElementById("tp"in this.data?this.data.tp:this.data.ind-1).renderFrame(!0),this.canvasContext.setTransform(1,0,0,1,0,0),this.data.tt>=3&&!document._isProxy){var r=assetLoader.getLumaCanvas(this.canvasContext.canvas);r.getContext("2d").drawImage(this.canvasContext.canvas,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.drawImage(r,0,0)}this.canvasContext.globalCompositeOperation=operationsMap[this.data.tt],this.canvasContext.drawImage(t,0,0),this.canvasContext.globalCompositeOperation="destination-over",this.canvasContext.drawImage(this.buffers[0],0,0),this.canvasContext.setTransform(this.currentTransform),this.canvasContext.globalCompositeOperation="source-over"}},renderFrame:function(t){if(!this.hidden&&!this.data.hd&&(1!==this.data.td||t)){this.renderTransform(),this.renderRenderable(),this.renderLocalTransform(),this.setBlendMode();var e=0===this.data.ty;this.prepareLayer(),this.globalData.renderer.save(e),this.globalData.renderer.ctxTransform(this.finalTransform.localMat.props),this.globalData.renderer.ctxOpacity(this.finalTransform.localOpacity),this.renderInnerContent(),this.globalData.renderer.restore(e),this.exitLayer(),this.maskManager.hasMasks&&this.globalData.renderer.restore(!0),this._isFirstFrame&&(this._isFirstFrame=!1)}},destroy:function(){this.canvasContext=null,this.data=null,this.globalData=null,this.maskManager.destroy()},mHelper:new Matrix},CVBaseElement.prototype.hide=CVBaseElement.prototype.hideElement,CVBaseElement.prototype.show=CVBaseElement.prototype.showElement,CVShapeData.prototype.setAsAnimated=SVGShapeData.prototype.setAsAnimated,extendPrototype([BaseElement,TransformElement,CVBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableElement],CVShapeElement),CVShapeElement.prototype.initElement=RenderableDOMElement.prototype.initElement,CVShapeElement.prototype.transformHelper={opacity:1,_opMdf:!1},CVShapeElement.prototype.dashResetter=[],CVShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[])},CVShapeElement.prototype.createStyleElement=function(t,e){var r={data:t,type:t.ty,preTransforms:this.transformsManager.addTransformSequence(e),transforms:[],elements:[],closed:!0===t.hd},n={};if("fl"===t.ty||"st"===t.ty?(n.c=PropertyFactory.getProp(this,t.c,1,255,this),n.c.k||(r.co="rgb("+bmFloor(n.c.v[0])+","+bmFloor(n.c.v[1])+","+bmFloor(n.c.v[2])+")")):"gf"!==t.ty&&"gs"!==t.ty||(n.s=PropertyFactory.getProp(this,t.s,1,null,this),n.e=PropertyFactory.getProp(this,t.e,1,null,this),n.h=PropertyFactory.getProp(this,t.h||{k:0},0,.01,this),n.a=PropertyFactory.getProp(this,t.a||{k:0},0,degToRads,this),n.g=new GradientProperty(this,t.g,this)),n.o=PropertyFactory.getProp(this,t.o,0,.01,this),"st"===t.ty||"gs"===t.ty){if(r.lc=lineCapEnum[t.lc||2],r.lj=lineJoinEnum[t.lj||2],1==t.lj&&(r.ml=t.ml),n.w=PropertyFactory.getProp(this,t.w,0,null,this),n.w.k||(r.wi=n.w.v),t.d){var i=new DashProperty(this,t.d,"canvas",this);n.d=i,n.d.k||(r.da=n.d.dashArray,r.do=n.d.dashoffset[0])}}else r.r=2===t.r?"evenodd":"nonzero";return this.stylesList.push(r),n.style=r,n},CVShapeElement.prototype.createGroupElement=function(){return{it:[],prevViewData:[]}},CVShapeElement.prototype.createTransformElement=function(t){return{transform:{opacity:1,_opMdf:!1,key:this.transformsManager.getNewKey(),op:PropertyFactory.getProp(this,t.o,0,.01,this),mProps:TransformPropertyFactory.getTransformProperty(this,t,this)}}},CVShapeElement.prototype.createShapeElement=function(t){var e=new CVShapeData(this,t,this.stylesList,this.transformsManager);return this.shapes.push(e),this.addShapeToModifiers(e),e},CVShapeElement.prototype.reloadShapes=function(){var t;this._isFirstFrame=!0;var e=this.itemsData.length;for(t=0;t<e;t+=1)this.prevViewData[t]=this.itemsData[t];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[]),e=this.dynamicProperties.length,t=0;t<e;t+=1)this.dynamicProperties[t].getValue();this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame)},CVShapeElement.prototype.addTransformToStyleList=function(t){var e,r=this.stylesList.length;for(e=0;e<r;e+=1)this.stylesList[e].closed||this.stylesList[e].transforms.push(t)},CVShapeElement.prototype.removeTransformFromStyleList=function(){var t,e=this.stylesList.length;for(t=0;t<e;t+=1)this.stylesList[t].closed||this.stylesList[t].transforms.pop()},CVShapeElement.prototype.closeStyles=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e].closed=!0},CVShapeElement.prototype.searchShapes=function(t,e,r,n,i){var a,o,s,l,c,u,h=t.length-1,f=[],p=[],d=[].concat(i);for(a=h;a>=0;a-=1){if((l=this.searchProcessedElement(t[a]))?e[a]=r[l-1]:t[a]._shouldRender=n,"fl"===t[a].ty||"st"===t[a].ty||"gf"===t[a].ty||"gs"===t[a].ty)l?e[a].style.closed=!1:e[a]=this.createStyleElement(t[a],d),f.push(e[a].style);else if("gr"===t[a].ty){if(l)for(s=e[a].it.length,o=0;o<s;o+=1)e[a].prevViewData[o]=e[a].it[o];else e[a]=this.createGroupElement(t[a]);this.searchShapes(t[a].it,e[a].it,e[a].prevViewData,n,d)}else"tr"===t[a].ty?(l||(u=this.createTransformElement(t[a]),e[a]=u),d.push(e[a]),this.addTransformToStyleList(e[a])):"sh"===t[a].ty||"rc"===t[a].ty||"el"===t[a].ty||"sr"===t[a].ty?l||(e[a]=this.createShapeElement(t[a])):"tm"===t[a].ty||"rd"===t[a].ty||"pb"===t[a].ty||"zz"===t[a].ty||"op"===t[a].ty?(l?(c=e[a]).closed=!1:((c=ShapeModifiers.getModifier(t[a].ty)).init(this,t[a]),e[a]=c,this.shapeModifiers.push(c)),p.push(c)):"rp"===t[a].ty&&(l?(c=e[a]).closed=!0:(c=ShapeModifiers.getModifier(t[a].ty),e[a]=c,c.init(this,t,a,e),this.shapeModifiers.push(c),n=!1),p.push(c));this.addProcessedElement(t[a],a+1)}for(this.removeTransformFromStyleList(),this.closeStyles(f),h=p.length,a=0;a<h;a+=1)p[a].closed=!0},CVShapeElement.prototype.renderInnerContent=function(){this.transformHelper.opacity=1,this.transformHelper._opMdf=!1,this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame),this.renderShape(this.transformHelper,this.shapesData,this.itemsData,!0)},CVShapeElement.prototype.renderShapeTransform=function(t,e){(t._opMdf||e.op._mdf||this._isFirstFrame)&&(e.opacity=t.opacity,e.opacity*=e.op.v,e._opMdf=!0)},CVShapeElement.prototype.drawLayer=function(){var t,e,r,n,i,a,o,s,l,c=this.stylesList.length,u=this.globalData.renderer,h=this.globalData.canvasContext;for(t=0;t<c;t+=1)if(("st"!==(s=(l=this.stylesList[t]).type)&&"gs"!==s||0!==l.wi)&&l.data._shouldRender&&0!==l.coOp&&0!==this.globalData.currentGlobalAlpha){for(u.save(),a=l.elements,"st"===s||"gs"===s?(u.ctxStrokeStyle("st"===s?l.co:l.grd),u.ctxLineWidth(l.wi),u.ctxLineCap(l.lc),u.ctxLineJoin(l.lj),u.ctxMiterLimit(l.ml||0)):u.ctxFillStyle("fl"===s?l.co:l.grd),u.ctxOpacity(l.coOp),"st"!==s&&"gs"!==s&&h.beginPath(),u.ctxTransform(l.preTransforms.finalTransform.props),r=a.length,e=0;e<r;e+=1){for("st"!==s&&"gs"!==s||(h.beginPath(),l.da&&(h.setLineDash(l.da),h.lineDashOffset=l.do)),i=(o=a[e].trNodes).length,n=0;n<i;n+=1)"m"===o[n].t?h.moveTo(o[n].p[0],o[n].p[1]):"c"===o[n].t?h.bezierCurveTo(o[n].pts[0],o[n].pts[1],o[n].pts[2],o[n].pts[3],o[n].pts[4],o[n].pts[5]):h.closePath();"st"!==s&&"gs"!==s||(u.ctxStroke(),l.da&&h.setLineDash(this.dashResetter))}"st"!==s&&"gs"!==s&&this.globalData.renderer.ctxFill(l.r),u.restore()}},CVShapeElement.prototype.renderShape=function(t,e,r,n){var i,a;for(a=t,i=e.length-1;i>=0;i-=1)"tr"===e[i].ty?(a=r[i].transform,this.renderShapeTransform(t,a)):"sh"===e[i].ty||"el"===e[i].ty||"rc"===e[i].ty||"sr"===e[i].ty?this.renderPath(e[i],r[i]):"fl"===e[i].ty?this.renderFill(e[i],r[i],a):"st"===e[i].ty?this.renderStroke(e[i],r[i],a):"gf"===e[i].ty||"gs"===e[i].ty?this.renderGradientFill(e[i],r[i],a):"gr"===e[i].ty?this.renderShape(a,e[i].it,r[i].it):e[i].ty;n&&this.drawLayer()},CVShapeElement.prototype.renderStyledShape=function(t,e){if(this._isFirstFrame||e._mdf||t.transforms._mdf){var r,n,i,a=t.trNodes,o=e.paths,s=o._length;a.length=0;var l=t.transforms.finalTransform;for(i=0;i<s;i+=1){var c=o.shapes[i];if(c&&c.v){for(n=c._length,r=1;r<n;r+=1)1===r&&a.push({t:"m",p:l.applyToPointArray(c.v[0][0],c.v[0][1],0)}),a.push({t:"c",pts:l.applyToTriplePoints(c.o[r-1],c.i[r],c.v[r])});1===n&&a.push({t:"m",p:l.applyToPointArray(c.v[0][0],c.v[0][1],0)}),c.c&&n&&(a.push({t:"c",pts:l.applyToTriplePoints(c.o[r-1],c.i[0],c.v[0])}),a.push({t:"z"}))}}t.trNodes=a}},CVShapeElement.prototype.renderPath=function(t,e){if(!0!==t.hd&&t._shouldRender){var r,n=e.styledShapes.length;for(r=0;r<n;r+=1)this.renderStyledShape(e.styledShapes[r],e.sh)}},CVShapeElement.prototype.renderFill=function(t,e,r){var n=e.style;(e.c._mdf||this._isFirstFrame)&&(n.co="rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r._opMdf||this._isFirstFrame)&&(n.coOp=e.o.v*r.opacity)},CVShapeElement.prototype.renderGradientFill=function(t,e,r){var n,i=e.style;if(!i.grd||e.g._mdf||e.s._mdf||e.e._mdf||1!==t.t&&(e.h._mdf||e.a._mdf)){var a,o=this.globalData.canvasContext,s=e.s.v,l=e.e.v;if(1===t.t)n=o.createLinearGradient(s[0],s[1],l[0],l[1]);else{var c=Math.sqrt(Math.pow(s[0]-l[0],2)+Math.pow(s[1]-l[1],2)),u=Math.atan2(l[1]-s[1],l[0]-s[0]),h=e.h.v;h>=1?h=.99:h<=-1&&(h=-.99);var f=c*h,p=Math.cos(u+e.a.v)*f+s[0],d=Math.sin(u+e.a.v)*f+s[1];n=o.createRadialGradient(p,d,0,s[0],s[1],c)}var m=t.g.p,y=e.g.c,v=1;for(a=0;a<m;a+=1)e.g._hasOpacity&&e.g._collapsable&&(v=e.g.o[2*a+1]),n.addColorStop(y[4*a]/100,"rgba("+y[4*a+1]+","+y[4*a+2]+","+y[4*a+3]+","+v+")");i.grd=n}i.coOp=e.o.v*r.opacity},CVShapeElement.prototype.renderStroke=function(t,e,r){var n=e.style,i=e.d;i&&(i._mdf||this._isFirstFrame)&&(n.da=i.dashArray,n.do=i.dashoffset[0]),(e.c._mdf||this._isFirstFrame)&&(n.co="rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r._opMdf||this._isFirstFrame)&&(n.coOp=e.o.v*r.opacity),(e.w._mdf||this._isFirstFrame)&&(n.wi=e.w.v)},CVShapeElement.prototype.destroy=function(){this.shapesData=null,this.globalData=null,this.canvasContext=null,this.stylesList.length=0,this.itemsData.length=0},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement,ITextElement],CVTextElement),CVTextElement.prototype.tHelper=createTag("canvas").getContext("2d"),CVTextElement.prototype.buildNewText=function(){var t=this.textProperty.currentData;this.renderedLetters=createSizedArray(t.l?t.l.length:0);var e=!1;t.fc?(e=!0,this.values.fill=this.buildColor(t.fc)):this.values.fill="rgba(0,0,0,0)",this.fill=e;var r=!1;t.sc&&(r=!0,this.values.stroke=this.buildColor(t.sc),this.values.sWidth=t.sw);var n,i,a,o,s,l,c,u,h,f,p,d,m=this.globalData.fontManager.getFontByName(t.f),y=t.l,v=this.mHelper;this.stroke=r,this.values.fValue=t.finalSize+"px "+this.globalData.fontManager.getFontByName(t.f).fFamily,i=t.finalText.length;var g=this.data.singleShape,b=.001*t.tr*t.finalSize,x=0,w=0,E=!0,k=0;for(n=0;n<i;n+=1){o=(a=this.globalData.fontManager.getCharData(t.finalText[n],m.fStyle,this.globalData.fontManager.getFontByName(t.f).fFamily))&&a.data||{},v.reset(),g&&y[n].n&&(x=-b,w+=t.yOffset,w+=E?1:0,E=!1),h=(c=o.shapes?o.shapes[0].it:[]).length,v.scale(t.finalSize/100,t.finalSize/100),g&&this.applyTextPropertiesToMatrix(t,v,y[n].line,x,w),p=createSizedArray(h-1);var S=0;for(u=0;u<h;u+=1)if("sh"===c[u].ty){for(l=c[u].ks.k.i.length,f=c[u].ks.k,d=[],s=1;s<l;s+=1)1===s&&d.push(v.applyToX(f.v[0][0],f.v[0][1],0),v.applyToY(f.v[0][0],f.v[0][1],0)),d.push(v.applyToX(f.o[s-1][0],f.o[s-1][1],0),v.applyToY(f.o[s-1][0],f.o[s-1][1],0),v.applyToX(f.i[s][0],f.i[s][1],0),v.applyToY(f.i[s][0],f.i[s][1],0),v.applyToX(f.v[s][0],f.v[s][1],0),v.applyToY(f.v[s][0],f.v[s][1],0));d.push(v.applyToX(f.o[s-1][0],f.o[s-1][1],0),v.applyToY(f.o[s-1][0],f.o[s-1][1],0),v.applyToX(f.i[0][0],f.i[0][1],0),v.applyToY(f.i[0][0],f.i[0][1],0),v.applyToX(f.v[0][0],f.v[0][1],0),v.applyToY(f.v[0][0],f.v[0][1],0)),p[S]=d,S+=1}g&&(x+=y[n].l,x+=b),this.textSpans[k]?this.textSpans[k].elem=p:this.textSpans[k]={elem:p},k+=1}},CVTextElement.prototype.renderInnerContent=function(){var t,e,r,n,i,a;this.validateText(),this.canvasContext.font=this.values.fValue,this.globalData.renderer.ctxLineCap("butt"),this.globalData.renderer.ctxLineJoin("miter"),this.globalData.renderer.ctxMiterLimit(4),this.data.singleShape||this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);var o,s=this.textAnimator.renderedLetters,l=this.textProperty.currentData.l;e=l.length;var c,u,h=null,f=null,p=null,d=this.globalData.renderer;for(t=0;t<e;t+=1)if(!l[t].n){if((o=s[t])&&(d.save(),d.ctxTransform(o.p),d.ctxOpacity(o.o)),this.fill){for(o&&o.fc?h!==o.fc&&(d.ctxFillStyle(o.fc),h=o.fc):h!==this.values.fill&&(h=this.values.fill,d.ctxFillStyle(this.values.fill)),n=(c=this.textSpans[t].elem).length,this.globalData.canvasContext.beginPath(),r=0;r<n;r+=1)for(a=(u=c[r]).length,this.globalData.canvasContext.moveTo(u[0],u[1]),i=2;i<a;i+=6)this.globalData.canvasContext.bezierCurveTo(u[i],u[i+1],u[i+2],u[i+3],u[i+4],u[i+5]);this.globalData.canvasContext.closePath(),d.ctxFill()}if(this.stroke){for(o&&o.sw?p!==o.sw&&(p=o.sw,d.ctxLineWidth(o.sw)):p!==this.values.sWidth&&(p=this.values.sWidth,d.ctxLineWidth(this.values.sWidth)),o&&o.sc?f!==o.sc&&(f=o.sc,d.ctxStrokeStyle(o.sc)):f!==this.values.stroke&&(f=this.values.stroke,d.ctxStrokeStyle(this.values.stroke)),n=(c=this.textSpans[t].elem).length,this.globalData.canvasContext.beginPath(),r=0;r<n;r+=1)for(a=(u=c[r]).length,this.globalData.canvasContext.moveTo(u[0],u[1]),i=2;i<a;i+=6)this.globalData.canvasContext.bezierCurveTo(u[i],u[i+1],u[i+2],u[i+3],u[i+4],u[i+5]);this.globalData.canvasContext.closePath(),d.ctxStroke()}o&&this.globalData.renderer.restore()}},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVImageElement),CVImageElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVImageElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVImageElement.prototype.createContent=function(){if(this.img.width&&(this.assetData.w!==this.img.width||this.assetData.h!==this.img.height)){var t=createTag("canvas");t.width=this.assetData.w,t.height=this.assetData.h;var e,r,n=t.getContext("2d"),i=this.img.width,a=this.img.height,o=i/a,s=this.assetData.w/this.assetData.h,l=this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio;o>s&&"xMidYMid slice"===l||o<s&&"xMidYMid slice"!==l?e=(r=a)*s:r=(e=i)/s,n.drawImage(this.img,(i-e)/2,(a-r)/2,e,r,0,0,this.assetData.w,this.assetData.h),this.img=t}},CVImageElement.prototype.renderInnerContent=function(){this.canvasContext.drawImage(this.img,0,0)},CVImageElement.prototype.destroy=function(){this.img=null},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVSolidElement),CVSolidElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVSolidElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVSolidElement.prototype.renderInnerContent=function(){this.globalData.renderer.ctxFillStyle(this.data.sc),this.globalData.renderer.ctxFillRect(0,0,this.data.sw,this.data.sh)},extendPrototype([BaseRenderer],CanvasRendererBase),CanvasRendererBase.prototype.createShape=function(t){return new CVShapeElement(t,this.globalData,this)},CanvasRendererBase.prototype.createText=function(t){return new CVTextElement(t,this.globalData,this)},CanvasRendererBase.prototype.createImage=function(t){return new CVImageElement(t,this.globalData,this)},CanvasRendererBase.prototype.createSolid=function(t){return new CVSolidElement(t,this.globalData,this)},CanvasRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,CanvasRendererBase.prototype.ctxTransform=function(t){1===t[0]&&0===t[1]&&0===t[4]&&1===t[5]&&0===t[12]&&0===t[13]||this.canvasContext.transform(t[0],t[1],t[4],t[5],t[12],t[13])},CanvasRendererBase.prototype.ctxOpacity=function(t){this.canvasContext.globalAlpha*=t<0?0:t},CanvasRendererBase.prototype.ctxFillStyle=function(t){this.canvasContext.fillStyle=t},CanvasRendererBase.prototype.ctxStrokeStyle=function(t){this.canvasContext.strokeStyle=t},CanvasRendererBase.prototype.ctxLineWidth=function(t){this.canvasContext.lineWidth=t},CanvasRendererBase.prototype.ctxLineCap=function(t){this.canvasContext.lineCap=t},CanvasRendererBase.prototype.ctxLineJoin=function(t){this.canvasContext.lineJoin=t},CanvasRendererBase.prototype.ctxMiterLimit=function(t){this.canvasContext.miterLimit=t},CanvasRendererBase.prototype.ctxFill=function(t){this.canvasContext.fill(t)},CanvasRendererBase.prototype.ctxFillRect=function(t,e,r,n){this.canvasContext.fillRect(t,e,r,n)},CanvasRendererBase.prototype.ctxStroke=function(){this.canvasContext.stroke()},CanvasRendererBase.prototype.reset=function(){this.renderConfig.clearCanvas?this.contextData.reset():this.canvasContext.restore()},CanvasRendererBase.prototype.save=function(){this.canvasContext.save()},CanvasRendererBase.prototype.restore=function(t){this.renderConfig.clearCanvas?(t&&(this.globalData.blendMode="source-over"),this.contextData.restore(t)):this.canvasContext.restore()},CanvasRendererBase.prototype.configAnimation=function(t){if(this.animationItem.wrapper){this.animationItem.container=createTag("canvas");var e=this.animationItem.container.style;e.width="100%",e.height="100%";var r="0px 0px 0px";e.transformOrigin=r,e.mozTransformOrigin=r,e.webkitTransformOrigin=r,e["-webkit-transform"]=r,e.contentVisibility=this.renderConfig.contentVisibility,this.animationItem.wrapper.appendChild(this.animationItem.container),this.canvasContext=this.animationItem.container.getContext("2d"),this.renderConfig.className&&this.animationItem.container.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.animationItem.container.setAttribute("id",this.renderConfig.id)}else this.canvasContext=this.renderConfig.context;this.contextData.setContext(this.canvasContext),this.data=t,this.layers=t.layers,this.transformCanvas={w:t.w,h:t.h,sx:0,sy:0,tx:0,ty:0},this.setupGlobalData(t,document.body),this.globalData.canvasContext=this.canvasContext,this.globalData.renderer=this,this.globalData.isDashed=!1,this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.globalData.transformCanvas=this.transformCanvas,this.elements=createSizedArray(t.layers.length),this.updateContainerSize()},CanvasRendererBase.prototype.updateContainerSize=function(t,e){var r,n,i,a;if(this.reset(),t?(r=t,n=e,this.canvasContext.canvas.width=r,this.canvasContext.canvas.height=n):(this.animationItem.wrapper&&this.animationItem.container?(r=this.animationItem.wrapper.offsetWidth,n=this.animationItem.wrapper.offsetHeight):(r=this.canvasContext.canvas.width,n=this.canvasContext.canvas.height),this.canvasContext.canvas.width=r*this.renderConfig.dpr,this.canvasContext.canvas.height=n*this.renderConfig.dpr),-1!==this.renderConfig.preserveAspectRatio.indexOf("meet")||-1!==this.renderConfig.preserveAspectRatio.indexOf("slice")){var o=this.renderConfig.preserveAspectRatio.split(" "),s=o[1]||"meet",l=o[0]||"xMidYMid",c=l.substr(0,4),u=l.substr(4);i=r/n,(a=this.transformCanvas.w/this.transformCanvas.h)>i&&"meet"===s||a<i&&"slice"===s?(this.transformCanvas.sx=r/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=r/(this.transformCanvas.w/this.renderConfig.dpr)):(this.transformCanvas.sx=n/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.sy=n/(this.transformCanvas.h/this.renderConfig.dpr)),this.transformCanvas.tx="xMid"===c&&(a<i&&"meet"===s||a>i&&"slice"===s)?(r-this.transformCanvas.w*(n/this.transformCanvas.h))/2*this.renderConfig.dpr:"xMax"===c&&(a<i&&"meet"===s||a>i&&"slice"===s)?(r-this.transformCanvas.w*(n/this.transformCanvas.h))*this.renderConfig.dpr:0,this.transformCanvas.ty="YMid"===u&&(a>i&&"meet"===s||a<i&&"slice"===s)?(n-this.transformCanvas.h*(r/this.transformCanvas.w))/2*this.renderConfig.dpr:"YMax"===u&&(a>i&&"meet"===s||a<i&&"slice"===s)?(n-this.transformCanvas.h*(r/this.transformCanvas.w))*this.renderConfig.dpr:0}else"none"===this.renderConfig.preserveAspectRatio?(this.transformCanvas.sx=r/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=n/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.tx=0,this.transformCanvas.ty=0):(this.transformCanvas.sx=this.renderConfig.dpr,this.transformCanvas.sy=this.renderConfig.dpr,this.transformCanvas.tx=0,this.transformCanvas.ty=0);this.transformCanvas.props=[this.transformCanvas.sx,0,0,0,0,this.transformCanvas.sy,0,0,0,0,1,0,this.transformCanvas.tx,this.transformCanvas.ty,0,1],this.ctxTransform(this.transformCanvas.props),this.canvasContext.beginPath(),this.canvasContext.rect(0,0,this.transformCanvas.w,this.transformCanvas.h),this.canvasContext.closePath(),this.canvasContext.clip(),this.renderFrame(this.renderedFrame,!0)},CanvasRendererBase.prototype.destroy=function(){var t;for(this.renderConfig.clearCanvas&&this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),t=(this.layers?this.layers.length:0)-1;t>=0;t-=1)this.elements[t]&&this.elements[t].destroy&&this.elements[t].destroy();this.elements.length=0,this.globalData.canvasContext=null,this.animationItem.container=null,this.destroyed=!0},CanvasRendererBase.prototype.renderFrame=function(t,e){if((this.renderedFrame!==t||!0!==this.renderConfig.clearCanvas||e)&&!this.destroyed&&-1!==t){var r;this.renderedFrame=t,this.globalData.frameNum=t-this.animationItem._isFirstFrame,this.globalData.frameId+=1,this.globalData._mdf=!this.renderConfig.clearCanvas||e,this.globalData.projectInterface.currentFrame=t;var n=this.layers.length;for(this.completeLayers||this.checkLayers(t),r=n-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&this.elements[r].prepareFrame(t-this.layers[r].st);if(this.globalData._mdf){for(!0===this.renderConfig.clearCanvas?this.canvasContext.clearRect(0,0,this.transformCanvas.w,this.transformCanvas.h):this.save(),r=n-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&this.elements[r].renderFrame();!0!==this.renderConfig.clearCanvas&&this.restore()}}},CanvasRendererBase.prototype.buildItem=function(t){var e=this.elements;if(!e[t]&&99!==this.layers[t].ty){var r=this.createItem(this.layers[t],this,this.globalData);e[t]=r,r.initExpressions()}},CanvasRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;)this.pendingElements.pop().checkParenting()},CanvasRendererBase.prototype.hide=function(){this.animationItem.container.style.display="none"},CanvasRendererBase.prototype.show=function(){this.animationItem.container.style.display="block"},CVContextData.prototype.duplicate=function(){var t=2*this._length,e=0;for(e=this._length;e<t;e+=1)this.stack[e]=new CanvasContext;this._length=t},CVContextData.prototype.reset=function(){this.cArrPos=0,this.cTr.reset(),this.stack[this.cArrPos].opacity=1},CVContextData.prototype.restore=function(t){this.cArrPos-=1;var e,r=this.stack[this.cArrPos],n=r.transform,i=this.cTr.props;for(e=0;e<16;e+=1)i[e]=n[e];if(t){this.nativeContext.restore();var a=this.stack[this.cArrPos+1];this.appliedFillStyle=a.fillStyle,this.appliedStrokeStyle=a.strokeStyle,this.appliedLineWidth=a.lineWidth,this.appliedLineCap=a.lineCap,this.appliedLineJoin=a.lineJoin,this.appliedMiterLimit=a.miterLimit}this.nativeContext.setTransform(n[0],n[1],n[4],n[5],n[12],n[13]),(t||-1!==r.opacity&&this.currentOpacity!==r.opacity)&&(this.nativeContext.globalAlpha=r.opacity,this.currentOpacity=r.opacity),this.currentFillStyle=r.fillStyle,this.currentStrokeStyle=r.strokeStyle,this.currentLineWidth=r.lineWidth,this.currentLineCap=r.lineCap,this.currentLineJoin=r.lineJoin,this.currentMiterLimit=r.miterLimit},CVContextData.prototype.save=function(t){t&&this.nativeContext.save();var e=this.cTr.props;this._length<=this.cArrPos&&this.duplicate();var r,n=this.stack[this.cArrPos];for(r=0;r<16;r+=1)n.transform[r]=e[r];this.cArrPos+=1;var i=this.stack[this.cArrPos];i.opacity=n.opacity,i.fillStyle=n.fillStyle,i.strokeStyle=n.strokeStyle,i.lineWidth=n.lineWidth,i.lineCap=n.lineCap,i.lineJoin=n.lineJoin,i.miterLimit=n.miterLimit},CVContextData.prototype.setOpacity=function(t){this.stack[this.cArrPos].opacity=t},CVContextData.prototype.setContext=function(t){this.nativeContext=t},CVContextData.prototype.fillStyle=function(t){this.stack[this.cArrPos].fillStyle!==t&&(this.currentFillStyle=t,this.stack[this.cArrPos].fillStyle=t)},CVContextData.prototype.strokeStyle=function(t){this.stack[this.cArrPos].strokeStyle!==t&&(this.currentStrokeStyle=t,this.stack[this.cArrPos].strokeStyle=t)},CVContextData.prototype.lineWidth=function(t){this.stack[this.cArrPos].lineWidth!==t&&(this.currentLineWidth=t,this.stack[this.cArrPos].lineWidth=t)},CVContextData.prototype.lineCap=function(t){this.stack[this.cArrPos].lineCap!==t&&(this.currentLineCap=t,this.stack[this.cArrPos].lineCap=t)},CVContextData.prototype.lineJoin=function(t){this.stack[this.cArrPos].lineJoin!==t&&(this.currentLineJoin=t,this.stack[this.cArrPos].lineJoin=t)},CVContextData.prototype.miterLimit=function(t){this.stack[this.cArrPos].miterLimit!==t&&(this.currentMiterLimit=t,this.stack[this.cArrPos].miterLimit=t)},CVContextData.prototype.transform=function(t){this.transformMat.cloneFromProps(t);var e=this.cTr;this.transformMat.multiply(e),e.cloneFromProps(this.transformMat.props);var r=e.props;this.nativeContext.setTransform(r[0],r[1],r[4],r[5],r[12],r[13])},CVContextData.prototype.opacity=function(t){var e=this.stack[this.cArrPos].opacity;e*=t<0?0:t,this.stack[this.cArrPos].opacity!==e&&(this.currentOpacity!==t&&(this.nativeContext.globalAlpha=t,this.currentOpacity=t),this.stack[this.cArrPos].opacity=e)},CVContextData.prototype.fill=function(t){this.appliedFillStyle!==this.currentFillStyle&&(this.appliedFillStyle=this.currentFillStyle,this.nativeContext.fillStyle=this.appliedFillStyle),this.nativeContext.fill(t)},CVContextData.prototype.fillRect=function(t,e,r,n){this.appliedFillStyle!==this.currentFillStyle&&(this.appliedFillStyle=this.currentFillStyle,this.nativeContext.fillStyle=this.appliedFillStyle),this.nativeContext.fillRect(t,e,r,n)},CVContextData.prototype.stroke=function(){this.appliedStrokeStyle!==this.currentStrokeStyle&&(this.appliedStrokeStyle=this.currentStrokeStyle,this.nativeContext.strokeStyle=this.appliedStrokeStyle),this.appliedLineWidth!==this.currentLineWidth&&(this.appliedLineWidth=this.currentLineWidth,this.nativeContext.lineWidth=this.appliedLineWidth),this.appliedLineCap!==this.currentLineCap&&(this.appliedLineCap=this.currentLineCap,this.nativeContext.lineCap=this.appliedLineCap),this.appliedLineJoin!==this.currentLineJoin&&(this.appliedLineJoin=this.currentLineJoin,this.nativeContext.lineJoin=this.appliedLineJoin),this.appliedMiterLimit!==this.currentMiterLimit&&(this.appliedMiterLimit=this.currentMiterLimit,this.nativeContext.miterLimit=this.appliedMiterLimit),this.nativeContext.stroke()},extendPrototype([CanvasRendererBase,ICompElement,CVBaseElement],CVCompElement),CVCompElement.prototype.renderInnerContent=function(){var t,e=this.canvasContext;for(e.beginPath(),e.moveTo(0,0),e.lineTo(this.data.w,0),e.lineTo(this.data.w,this.data.h),e.lineTo(0,this.data.h),e.lineTo(0,0),e.clip(),t=this.layers.length-1;t>=0;t-=1)(this.completeLayers||this.elements[t])&&this.elements[t].renderFrame()},CVCompElement.prototype.destroy=function(){var t;for(t=this.layers.length-1;t>=0;t-=1)this.elements[t]&&this.elements[t].destroy();this.layers=null,this.elements=null},CVCompElement.prototype.createComp=function(t){return new CVCompElement(t,this.globalData,this)},extendPrototype([CanvasRendererBase],CanvasRenderer),CanvasRenderer.prototype.createComp=function(t){return new CVCompElement(t,this.globalData,this)},HBaseElement.prototype={checkBlendMode:function(){},initRendererElement:function(){this.baseElement=createTag(this.data.tg||"div"),this.data.hasMask?(this.svgElement=createNS("svg"),this.layerElement=createNS("g"),this.maskedElement=this.layerElement,this.svgElement.appendChild(this.layerElement),this.baseElement.appendChild(this.svgElement)):this.layerElement=this.baseElement,styleDiv(this.baseElement)},createContainerElements:function(){this.renderableEffectsManager=new CVEffects(this),this.transformedElement=this.baseElement,this.maskedElement=this.layerElement,this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),0!==this.data.bm&&this.setBlendMode()},renderElement:function(){var t=this.transformedElement?this.transformedElement.style:{};if(this.finalTransform._matMdf){var e=this.finalTransform.mat.toCSS();t.transform=e,t.webkitTransform=e}this.finalTransform._opMdf&&(t.opacity=this.finalTransform.mProp.o.v)},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},destroy:function(){this.layerElement=null,this.transformedElement=null,this.matteElement&&(this.matteElement=null),this.maskManager&&(this.maskManager.destroy(),this.maskManager=null)},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData)},addEffects:function(){},setMatte:function(){}},HBaseElement.prototype.getBaseElement=SVGBaseElement.prototype.getBaseElement,HBaseElement.prototype.destroyBaseElement=HBaseElement.prototype.destroy,HBaseElement.prototype.buildElementParenting=BaseRenderer.prototype.buildElementParenting,extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],HSolidElement),HSolidElement.prototype.createContent=function(){var t;this.data.hasMask?((t=createNS("rect")).setAttribute("width",this.data.sw),t.setAttribute("height",this.data.sh),t.setAttribute("fill",this.data.sc),this.svgElement.setAttribute("width",this.data.sw),this.svgElement.setAttribute("height",this.data.sh)):((t=createTag("div")).style.width=this.data.sw+"px",t.style.height=this.data.sh+"px",t.style.backgroundColor=this.data.sc),this.layerElement.appendChild(t)},extendPrototype([BaseElement,TransformElement,HSolidElement,SVGShapeElement,HBaseElement,HierarchyElement,FrameElement,RenderableElement],HShapeElement),HShapeElement.prototype._renderShapeFrame=HShapeElement.prototype.renderInnerContent,HShapeElement.prototype.createContent=function(){var t;if(this.baseElement.style.fontSize=0,this.data.hasMask)this.layerElement.appendChild(this.shapesContainer),t=this.svgElement;else{t=createNS("svg");var e=this.comp.data?this.comp.data:this.globalData.compSize;t.setAttribute("width",e.w),t.setAttribute("height",e.h),t.appendChild(this.shapesContainer),this.layerElement.appendChild(t)}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.shapesContainer,0,[],!0),this.filterUniqueShapes(),this.shapeCont=t},HShapeElement.prototype.getTransformedPoint=function(t,e){var r,n=t.length;for(r=0;r<n;r+=1)e=t[r].mProps.v.applyToPointArray(e[0],e[1],0);return e},HShapeElement.prototype.calculateShapeBoundingBox=function(t,e){var r,n,i,a,o,s=t.sh.v,l=t.transformers,c=s._length;if(!(c<=1)){for(r=0;r<c-1;r+=1)n=this.getTransformedPoint(l,s.v[r]),i=this.getTransformedPoint(l,s.o[r]),a=this.getTransformedPoint(l,s.i[r+1]),o=this.getTransformedPoint(l,s.v[r+1]),this.checkBounds(n,i,a,o,e);s.c&&(n=this.getTransformedPoint(l,s.v[r]),i=this.getTransformedPoint(l,s.o[r]),a=this.getTransformedPoint(l,s.i[0]),o=this.getTransformedPoint(l,s.v[0]),this.checkBounds(n,i,a,o,e))}},HShapeElement.prototype.checkBounds=function(t,e,r,n,i){this.getBoundsOfCurve(t,e,r,n);var a=this.shapeBoundingBox;i.x=bmMin(a.left,i.x),i.xMax=bmMax(a.right,i.xMax),i.y=bmMin(a.top,i.y),i.yMax=bmMax(a.bottom,i.yMax)},HShapeElement.prototype.shapeBoundingBox={left:0,right:0,top:0,bottom:0},HShapeElement.prototype.tempBoundingBox={x:0,xMax:0,y:0,yMax:0,width:0,height:0},HShapeElement.prototype.getBoundsOfCurve=function(t,e,r,n){for(var i,a,o,s,l,c,u,h=[[t[0],n[0]],[t[1],n[1]]],f=0;f<2;++f)a=6*t[f]-12*e[f]+6*r[f],i=-3*t[f]+9*e[f]-9*r[f]+3*n[f],o=3*e[f]-3*t[f],a|=0,o|=0,0==(i|=0)&&0===a||(0===i?(s=-o/a)>0&&s<1&&h[f].push(this.calculateF(s,t,e,r,n,f)):(l=a*a-4*o*i)>=0&&((c=(-a+bmSqrt(l))/(2*i))>0&&c<1&&h[f].push(this.calculateF(c,t,e,r,n,f)),(u=(-a-bmSqrt(l))/(2*i))>0&&u<1&&h[f].push(this.calculateF(u,t,e,r,n,f))));this.shapeBoundingBox.left=bmMin.apply(null,h[0]),this.shapeBoundingBox.top=bmMin.apply(null,h[1]),this.shapeBoundingBox.right=bmMax.apply(null,h[0]),this.shapeBoundingBox.bottom=bmMax.apply(null,h[1])},HShapeElement.prototype.calculateF=function(t,e,r,n,i,a){return bmPow(1-t,3)*e[a]+3*bmPow(1-t,2)*t*r[a]+3*(1-t)*bmPow(t,2)*n[a]+bmPow(t,3)*i[a]},HShapeElement.prototype.calculateBoundingBox=function(t,e){var r,n=t.length;for(r=0;r<n;r+=1)t[r]&&t[r].sh?this.calculateShapeBoundingBox(t[r],e):t[r]&&t[r].it?this.calculateBoundingBox(t[r].it,e):t[r]&&t[r].style&&t[r].w&&this.expandStrokeBoundingBox(t[r].w,e)},HShapeElement.prototype.expandStrokeBoundingBox=function(t,e){var r=0;if(t.keyframes){for(var n=0;n<t.keyframes.length;n+=1){var i=t.keyframes[n].s;i>r&&(r=i)}r*=t.mult}else r=t.v*t.mult;e.x-=r,e.xMax+=r,e.y-=r,e.yMax+=r},HShapeElement.prototype.currentBoxContains=function(t){return this.currentBBox.x<=t.x&&this.currentBBox.y<=t.y&&this.currentBBox.width+this.currentBBox.x>=t.x+t.width&&this.currentBBox.height+this.currentBBox.y>=t.y+t.height},HShapeElement.prototype.renderInnerContent=function(){if(this._renderShapeFrame(),!this.hidden&&(this._isFirstFrame||this._mdf)){var t=this.tempBoundingBox,e=999999;if(t.x=e,t.xMax=-e,t.y=e,t.yMax=-e,this.calculateBoundingBox(this.itemsData,t),t.width=t.xMax<t.x?0:t.xMax-t.x,t.height=t.yMax<t.y?0:t.yMax-t.y,this.currentBoxContains(t))return;var r=!1;if(this.currentBBox.w!==t.width&&(this.currentBBox.w=t.width,this.shapeCont.setAttribute("width",t.width),r=!0),this.currentBBox.h!==t.height&&(this.currentBBox.h=t.height,this.shapeCont.setAttribute("height",t.height),r=!0),r||this.currentBBox.x!==t.x||this.currentBBox.y!==t.y){this.currentBBox.w=t.width,this.currentBBox.h=t.height,this.currentBBox.x=t.x,this.currentBBox.y=t.y,this.shapeCont.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h);var n=this.shapeCont.style,i="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";n.transform=i,n.webkitTransform=i}}},extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],HTextElement),HTextElement.prototype.createContent=function(){if(this.isMasked=this.checkMasks(),this.isMasked){this.renderType="svg",this.compW=this.comp.data.w,this.compH=this.comp.data.h,this.svgElement.setAttribute("width",this.compW),this.svgElement.setAttribute("height",this.compH);var t=createNS("g");this.maskedElement.appendChild(t),this.innerElem=t}else this.renderType="html",this.innerElem=this.layerElement;this.checkParenting()},HTextElement.prototype.buildNewText=function(){var t=this.textProperty.currentData;this.renderedLetters=createSizedArray(t.l?t.l.length:0);var e=this.innerElem.style,r=t.fc?this.buildColor(t.fc):"rgba(0,0,0,0)";e.fill=r,e.color=r,t.sc&&(e.stroke=this.buildColor(t.sc),e.strokeWidth=t.sw+"px");var n,i,a=this.globalData.fontManager.getFontByName(t.f);if(!this.globalData.fontManager.chars)if(e.fontSize=t.finalSize+"px",e.lineHeight=t.finalSize+"px",a.fClass)this.innerElem.className=a.fClass;else{e.fontFamily=a.fFamily;var o=t.fWeight,s=t.fStyle;e.fontStyle=s,e.fontWeight=o}var l,c,u,h=t.l;i=h.length;var f,p=this.mHelper,d="",m=0;for(n=0;n<i;n+=1){if(this.globalData.fontManager.chars?(this.textPaths[m]?l=this.textPaths[m]:((l=createNS("path")).setAttribute("stroke-linecap",lineCapEnum[1]),l.setAttribute("stroke-linejoin",lineJoinEnum[2]),l.setAttribute("stroke-miterlimit","4")),this.isMasked||(this.textSpans[m]?u=(c=this.textSpans[m]).children[0]:((c=createTag("div")).style.lineHeight=0,(u=createNS("svg")).appendChild(l),styleDiv(c)))):this.isMasked?l=this.textPaths[m]?this.textPaths[m]:createNS("text"):this.textSpans[m]?(c=this.textSpans[m],l=this.textPaths[m]):(styleDiv(c=createTag("span")),styleDiv(l=createTag("span")),c.appendChild(l)),this.globalData.fontManager.chars){var y,v=this.globalData.fontManager.getCharData(t.finalText[n],a.fStyle,this.globalData.fontManager.getFontByName(t.f).fFamily);if(y=v?v.data:null,p.reset(),y&&y.shapes&&y.shapes.length&&(f=y.shapes[0].it,p.scale(t.finalSize/100,t.finalSize/100),d=this.createPathShape(p,f),l.setAttribute("d",d)),this.isMasked)this.innerElem.appendChild(l);else{if(this.innerElem.appendChild(c),y&&y.shapes){document.body.appendChild(u);var g=u.getBBox();u.setAttribute("width",g.width+2),u.setAttribute("height",g.height+2),u.setAttribute("viewBox",g.x-1+" "+(g.y-1)+" "+(g.width+2)+" "+(g.height+2));var b=u.style,x="translate("+(g.x-1)+"px,"+(g.y-1)+"px)";b.transform=x,b.webkitTransform=x,h[n].yOffset=g.y-1}else u.setAttribute("width",1),u.setAttribute("height",1);c.appendChild(u)}}else if(l.textContent=h[n].val,l.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),this.isMasked)this.innerElem.appendChild(l);else{this.innerElem.appendChild(c);var w=l.style,E="translate3d(0,"+-t.finalSize/1.2+"px,0)";w.transform=E,w.webkitTransform=E}this.isMasked?this.textSpans[m]=l:this.textSpans[m]=c,this.textSpans[m].style.display="block",this.textPaths[m]=l,m+=1}for(;m<this.textSpans.length;)this.textSpans[m].style.display="none",m+=1},HTextElement.prototype.renderInnerContent=function(){var t;if(this.validateText(),this.data.singleShape){if(!this._isFirstFrame&&!this.lettersChangedFlag)return;if(this.isMasked&&this.finalTransform._matMdf){this.svgElement.setAttribute("viewBox",-this.finalTransform.mProp.p.v[0]+" "+-this.finalTransform.mProp.p.v[1]+" "+this.compW+" "+this.compH),t=this.svgElement.style;var e="translate("+-this.finalTransform.mProp.p.v[0]+"px,"+-this.finalTransform.mProp.p.v[1]+"px)";t.transform=e,t.webkitTransform=e}}if(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag){var r,n,i,a,o,s=0,l=this.textAnimator.renderedLetters,c=this.textProperty.currentData.l;for(n=c.length,r=0;r<n;r+=1)c[r].n?s+=1:(a=this.textSpans[r],o=this.textPaths[r],i=l[s],s+=1,i._mdf.m&&(this.isMasked?a.setAttribute("transform",i.m):(a.style.webkitTransform=i.m,a.style.transform=i.m)),a.style.opacity=i.o,i.sw&&i._mdf.sw&&o.setAttribute("stroke-width",i.sw),i.sc&&i._mdf.sc&&o.setAttribute("stroke",i.sc),i.fc&&i._mdf.fc&&(o.setAttribute("fill",i.fc),o.style.color=i.fc));if(this.innerElem.getBBox&&!this.hidden&&(this._isFirstFrame||this._mdf)){var u=this.innerElem.getBBox();if(this.currentBBox.w!==u.width&&(this.currentBBox.w=u.width,this.svgElement.setAttribute("width",u.width)),this.currentBBox.h!==u.height&&(this.currentBBox.h=u.height,this.svgElement.setAttribute("height",u.height)),this.currentBBox.w!==u.width+2||this.currentBBox.h!==u.height+2||this.currentBBox.x!==u.x-1||this.currentBBox.y!==u.y-1){this.currentBBox.w=u.width+2,this.currentBBox.h=u.height+2,this.currentBBox.x=u.x-1,this.currentBBox.y=u.y-1,this.svgElement.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h),t=this.svgElement.style;var h="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";t.transform=h,t.webkitTransform=h}}}},extendPrototype([BaseElement,FrameElement,HierarchyElement],HCameraElement),HCameraElement.prototype.setup=function(){var t,e,r,n,i=this.comp.threeDElements.length;for(t=0;t<i;t+=1)if("3d"===(e=this.comp.threeDElements[t]).type){r=e.perspectiveElem.style,n=e.container.style;var a=this.pe.v+"px",o="0px 0px 0px",s="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";r.perspective=a,r.webkitPerspective=a,n.transformOrigin=o,n.mozTransformOrigin=o,n.webkitTransformOrigin=o,r.transform=s,r.webkitTransform=s}},HCameraElement.prototype.createElements=function(){},HCameraElement.prototype.hide=function(){},HCameraElement.prototype.renderFrame=function(){var t,e,r=this._isFirstFrame;if(this.hierarchy)for(e=this.hierarchy.length,t=0;t<e;t+=1)r=this.hierarchy[t].finalTransform.mProp._mdf||r;if(r||this.pe._mdf||this.p&&this.p._mdf||this.px&&(this.px._mdf||this.py._mdf||this.pz._mdf)||this.rx._mdf||this.ry._mdf||this.rz._mdf||this.or._mdf||this.a&&this.a._mdf){if(this.mat.reset(),this.hierarchy)for(t=e=this.hierarchy.length-1;t>=0;t-=1){var n=this.hierarchy[t].finalTransform.mProp;this.mat.translate(-n.p.v[0],-n.p.v[1],n.p.v[2]),this.mat.rotateX(-n.or.v[0]).rotateY(-n.or.v[1]).rotateZ(n.or.v[2]),this.mat.rotateX(-n.rx.v).rotateY(-n.ry.v).rotateZ(n.rz.v),this.mat.scale(1/n.s.v[0],1/n.s.v[1],1/n.s.v[2]),this.mat.translate(n.a.v[0],n.a.v[1],n.a.v[2])}if(this.p?this.mat.translate(-this.p.v[0],-this.p.v[1],this.p.v[2]):this.mat.translate(-this.px.v,-this.py.v,this.pz.v),this.a){var i;i=this.p?[this.p.v[0]-this.a.v[0],this.p.v[1]-this.a.v[1],this.p.v[2]-this.a.v[2]]:[this.px.v-this.a.v[0],this.py.v-this.a.v[1],this.pz.v-this.a.v[2]];var a=Math.sqrt(Math.pow(i[0],2)+Math.pow(i[1],2)+Math.pow(i[2],2)),o=[i[0]/a,i[1]/a,i[2]/a],s=Math.sqrt(o[2]*o[2]+o[0]*o[0]),l=Math.atan2(o[1],s),c=Math.atan2(o[0],-o[2]);this.mat.rotateY(c).rotateX(-l)}this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v),this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]),this.mat.translate(this.globalData.compSize.w/2,this.globalData.compSize.h/2,0),this.mat.translate(0,0,this.pe.v);var u=!this._prevMat.equals(this.mat);if((u||this.pe._mdf)&&this.comp.threeDElements){var h,f,p;for(e=this.comp.threeDElements.length,t=0;t<e;t+=1)if("3d"===(h=this.comp.threeDElements[t]).type){if(u){var d=this.mat.toCSS();(p=h.container.style).transform=d,p.webkitTransform=d}this.pe._mdf&&((f=h.perspectiveElem.style).perspective=this.pe.v+"px",f.webkitPerspective=this.pe.v+"px")}this.mat.clone(this._prevMat)}}this._isFirstFrame=!1},HCameraElement.prototype.prepareFrame=function(t){this.prepareProperties(t,!0)},HCameraElement.prototype.destroy=function(){},HCameraElement.prototype.getBaseElement=function(){return null},extendPrototype([BaseElement,TransformElement,HBaseElement,HSolidElement,HierarchyElement,FrameElement,RenderableElement],HImageElement),HImageElement.prototype.createContent=function(){var t=this.globalData.getAssetsPath(this.assetData),e=new Image;this.data.hasMask?(this.imageElem=createNS("image"),this.imageElem.setAttribute("width",this.assetData.w+"px"),this.imageElem.setAttribute("height",this.assetData.h+"px"),this.imageElem.setAttributeNS("http://www.w3.org/1999/xlink","href",t),this.layerElement.appendChild(this.imageElem),this.baseElement.setAttribute("width",this.assetData.w),this.baseElement.setAttribute("height",this.assetData.h)):this.layerElement.appendChild(e),e.crossOrigin="anonymous",e.src=t,this.data.ln&&this.baseElement.setAttribute("id",this.data.ln)},extendPrototype([BaseRenderer],HybridRendererBase),HybridRendererBase.prototype.buildItem=SVGRenderer.prototype.buildItem,HybridRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;)this.pendingElements.pop().checkParenting()},HybridRendererBase.prototype.appendElementInPos=function(t,e){var r=t.getBaseElement();if(r){var n=this.layers[e];if(n.ddd&&this.supports3d)this.addTo3dContainer(r,e);else if(this.threeDElements)this.addTo3dContainer(r,e);else{for(var i,a,o=0;o<e;)this.elements[o]&&!0!==this.elements[o]&&this.elements[o].getBaseElement&&(a=this.elements[o],i=(this.layers[o].ddd?this.getThreeDContainerByPos(o):a.getBaseElement())||i),o+=1;i?n.ddd&&this.supports3d||this.layerElement.insertBefore(r,i):n.ddd&&this.supports3d||this.layerElement.appendChild(r)}}},HybridRendererBase.prototype.createShape=function(t){return this.supports3d?new HShapeElement(t,this.globalData,this):new SVGShapeElement(t,this.globalData,this)},HybridRendererBase.prototype.createText=function(t){return this.supports3d?new HTextElement(t,this.globalData,this):new SVGTextLottieElement(t,this.globalData,this)},HybridRendererBase.prototype.createCamera=function(t){return this.camera=new HCameraElement(t,this.globalData,this),this.camera},HybridRendererBase.prototype.createImage=function(t){return this.supports3d?new HImageElement(t,this.globalData,this):new IImageElement(t,this.globalData,this)},HybridRendererBase.prototype.createSolid=function(t){return this.supports3d?new HSolidElement(t,this.globalData,this):new ISolidElement(t,this.globalData,this)},HybridRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,HybridRendererBase.prototype.getThreeDContainerByPos=function(t){for(var e=0,r=this.threeDElements.length;e<r;){if(this.threeDElements[e].startPos<=t&&this.threeDElements[e].endPos>=t)return this.threeDElements[e].perspectiveElem;e+=1}return null},HybridRendererBase.prototype.createThreeDContainer=function(t,e){var r,n,i=createTag("div");styleDiv(i);var a=createTag("div");if(styleDiv(a),"3d"===e){(r=i.style).width=this.globalData.compSize.w+"px",r.height=this.globalData.compSize.h+"px";var o="50% 50%";r.webkitTransformOrigin=o,r.mozTransformOrigin=o,r.transformOrigin=o;var s="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";(n=a.style).transform=s,n.webkitTransform=s}i.appendChild(a);var l={container:a,perspectiveElem:i,startPos:t,endPos:t,type:e};return this.threeDElements.push(l),l},HybridRendererBase.prototype.build3dContainers=function(){var t,e,r=this.layers.length,n="";for(t=0;t<r;t+=1)this.layers[t].ddd&&3!==this.layers[t].ty?("3d"!==n&&(n="3d",e=this.createThreeDContainer(t,"3d")),e.endPos=Math.max(e.endPos,t)):("2d"!==n&&(n="2d",e=this.createThreeDContainer(t,"2d")),e.endPos=Math.max(e.endPos,t));for(t=(r=this.threeDElements.length)-1;t>=0;t-=1)this.resizerElem.appendChild(this.threeDElements[t].perspectiveElem)},HybridRendererBase.prototype.addTo3dContainer=function(t,e){for(var r=0,n=this.threeDElements.length;r<n;){if(e<=this.threeDElements[r].endPos){for(var i,a=this.threeDElements[r].startPos;a<e;)this.elements[a]&&this.elements[a].getBaseElement&&(i=this.elements[a].getBaseElement()),a+=1;i?this.threeDElements[r].container.insertBefore(t,i):this.threeDElements[r].container.appendChild(t);break}r+=1}},HybridRendererBase.prototype.configAnimation=function(t){var e=createTag("div"),r=this.animationItem.wrapper,n=e.style;n.width=t.w+"px",n.height=t.h+"px",this.resizerElem=e,styleDiv(e),n.transformStyle="flat",n.mozTransformStyle="flat",n.webkitTransformStyle="flat",this.renderConfig.className&&e.setAttribute("class",this.renderConfig.className),r.appendChild(e),n.overflow="hidden";var i=createNS("svg");i.setAttribute("width","1"),i.setAttribute("height","1"),styleDiv(i),this.resizerElem.appendChild(i);var a=createNS("defs");i.appendChild(a),this.data=t,this.setupGlobalData(t,i),this.globalData.defs=a,this.layers=t.layers,this.layerElement=this.resizerElem,this.build3dContainers(),this.updateContainerSize()},HybridRendererBase.prototype.destroy=function(){var t;this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.animationItem.container=null,this.globalData.defs=null;var e=this.layers?this.layers.length:0;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy&&this.elements[t].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},HybridRendererBase.prototype.updateContainerSize=function(){var t,e,r,n,i=this.animationItem.wrapper.offsetWidth,a=this.animationItem.wrapper.offsetHeight,o=i/a;this.globalData.compSize.w/this.globalData.compSize.h>o?(t=i/this.globalData.compSize.w,e=i/this.globalData.compSize.w,r=0,n=(a-this.globalData.compSize.h*(i/this.globalData.compSize.w))/2):(t=a/this.globalData.compSize.h,e=a/this.globalData.compSize.h,r=(i-this.globalData.compSize.w*(a/this.globalData.compSize.h))/2,n=0);var s=this.resizerElem.style;s.webkitTransform="matrix3d("+t+",0,0,0,0,"+e+",0,0,0,0,1,0,"+r+","+n+",0,1)",s.transform=s.webkitTransform},HybridRendererBase.prototype.renderFrame=SVGRenderer.prototype.renderFrame,HybridRendererBase.prototype.hide=function(){this.resizerElem.style.display="none"},HybridRendererBase.prototype.show=function(){this.resizerElem.style.display="block"},HybridRendererBase.prototype.initItems=function(){if(this.buildAllItems(),this.camera)this.camera.setup();else{var t,e=this.globalData.compSize.w,r=this.globalData.compSize.h,n=this.threeDElements.length;for(t=0;t<n;t+=1){var i=this.threeDElements[t].perspectiveElem.style;i.webkitPerspective=Math.sqrt(Math.pow(e,2)+Math.pow(r,2))+"px",i.perspective=i.webkitPerspective}}},HybridRendererBase.prototype.searchExtraCompositions=function(t){var e,r=t.length,n=createTag("div");for(e=0;e<r;e+=1)if(t[e].xt){var i=this.createComp(t[e],n,this.globalData.comp,null);i.initExpressions(),this.globalData.projectInterface.registerComposition(i)}},extendPrototype([HybridRendererBase,ICompElement,HBaseElement],HCompElement),HCompElement.prototype._createBaseContainerElements=HCompElement.prototype.createContainerElements,HCompElement.prototype.createContainerElements=function(){this._createBaseContainerElements(),this.data.hasMask?(this.svgElement.setAttribute("width",this.data.w),this.svgElement.setAttribute("height",this.data.h),this.transformedElement=this.baseElement):this.transformedElement=this.layerElement},HCompElement.prototype.addTo3dContainer=function(t,e){for(var r,n=0;n<e;)this.elements[n]&&this.elements[n].getBaseElement&&(r=this.elements[n].getBaseElement()),n+=1;r?this.layerElement.insertBefore(t,r):this.layerElement.appendChild(t)},HCompElement.prototype.createComp=function(t){return this.supports3d?new HCompElement(t,this.globalData,this):new SVGCompElement(t,this.globalData,this)},extendPrototype([HybridRendererBase],HybridRenderer),HybridRenderer.prototype.createComp=function(t){return this.supports3d?new HCompElement(t,this.globalData,this):new SVGCompElement(t,this.globalData,this)};var CompExpressionInterface=function(t){function e(e){for(var r=0,n=t.layers.length;r<n;){if(t.layers[r].nm===e||t.layers[r].ind===e)return t.elements[r].layerInterface;r+=1}return null}return Object.defineProperty(e,"_name",{value:t.data.nm}),e.layer=e,e.pixelAspect=1,e.height=t.data.h||t.globalData.compSize.h,e.width=t.data.w||t.globalData.compSize.w,e.pixelAspect=1,e.frameDuration=1/t.globalData.frameRate,e.displayStartTime=0,e.numLayers=t.layers.length,e};function _typeof$2(t){return _typeof$2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$2(t)}function seedRandom(t,e){var r,n=this,i=256,a="random",o=e.pow(i,6),s=e.pow(2,52),l=2*s,c=255;function u(t){var e,r=t.length,n=this,a=0,o=n.i=n.j=0,s=n.S=[];for(r||(t=[r++]);a<i;)s[a]=a++;for(a=0;a<i;a++)s[a]=s[o=c&o+t[a%r]+(e=s[a])],s[o]=e;n.g=function(t){for(var e,r=0,a=n.i,o=n.j,s=n.S;t--;)e=s[a=c&a+1],r=r*i+s[c&(s[a]=s[o=c&o+e])+(s[o]=e)];return n.i=a,n.j=o,r}}function h(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function f(t,e){var r,n=[],i=_typeof$2(t);if(e&&"object"==i)for(r in t)try{n.push(f(t[r],e-1))}catch(t){}return n.length?n:"string"==i?t:t+"\0"}function p(t,e){for(var r,n=t+"",i=0;i<n.length;)e[c&i]=c&(r^=19*e[c&i])+n.charCodeAt(i++);return d(e)}function d(t){return String.fromCharCode.apply(0,t)}e["seed"+a]=function(c,m,y){var v=[],g=p(f((m=!0===m?{entropy:!0}:m||{}).entropy?[c,d(t)]:null===c?function(){try{r;var e=new Uint8Array(i);return(n.crypto||n.msCrypto).getRandomValues(e),d(e)}catch(e){var a=n.navigator,o=a&&a.plugins;return[+new Date,n,o,n.screen,d(t)]}}():c,3),v),b=new u(v),x=function(){for(var t=b.g(6),e=o,r=0;t<s;)t=(t+r)*i,e*=i,r=b.g(1);for(;t>=l;)t/=2,e/=2,r>>>=1;return(t+r)/e};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,p(d(b.S),t),(m.pass||y||function(t,r,n,i){return i&&(i.S&&h(i,b),t.state=function(){return h(b,{})}),n?(e[a]=t,r):t})(x,g,"global"in m?m.global:this==e,m.state)},p(e.random(),t)}function initialize$2(t){seedRandom([],t)}var propTypes={SHAPE:"shape"};function _typeof$1(t){return _typeof$1="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof$1(t)}var ExpressionManager=function(){var ob={},Math=BMMath,window=null,document=null,XMLHttpRequest=null,fetch=null,frames=null,_lottieGlobal={};function resetFrame(){_lottieGlobal={}}function $bm_isInstanceOfArray(t){return t.constructor===Array||t.constructor===Float32Array}function isNumerable(t,e){return"number"===t||e instanceof Number||"boolean"===t||"string"===t}function $bm_neg(t){var e=_typeof$1(t);if("number"===e||t instanceof Number||"boolean"===e)return-t;if($bm_isInstanceOfArray(t)){var r,n=t.length,i=[];for(r=0;r<n;r+=1)i[r]=-t[r];return i}return t.propType?t.v:-t}initialize$2(BMMath);var easeInBez=BezierFactory.getBezierEasing(.333,0,.833,.833,"easeIn").get,easeOutBez=BezierFactory.getBezierEasing(.167,.167,.667,1,"easeOut").get,easeInOutBez=BezierFactory.getBezierEasing(.33,0,.667,1,"easeInOut").get;function sum(t,e){var r=_typeof$1(t),n=_typeof$1(e);if(isNumerable(r,t)&&isNumerable(n,e)||"string"===r||"string"===n)return t+e;if($bm_isInstanceOfArray(t)&&isNumerable(n,e))return(t=t.slice(0))[0]+=e,t;if(isNumerable(r,t)&&$bm_isInstanceOfArray(e))return(e=e.slice(0))[0]=t+e[0],e;if($bm_isInstanceOfArray(t)&&$bm_isInstanceOfArray(e)){for(var i=0,a=t.length,o=e.length,s=[];i<a||i<o;)("number"==typeof t[i]||t[i]instanceof Number)&&("number"==typeof e[i]||e[i]instanceof Number)?s[i]=t[i]+e[i]:s[i]=void 0===e[i]?t[i]:t[i]||e[i],i+=1;return s}return 0}var add=sum;function sub(t,e){var r=_typeof$1(t),n=_typeof$1(e);if(isNumerable(r,t)&&isNumerable(n,e))return"string"===r&&(t=parseInt(t,10)),"string"===n&&(e=parseInt(e,10)),t-e;if($bm_isInstanceOfArray(t)&&isNumerable(n,e))return(t=t.slice(0))[0]-=e,t;if(isNumerable(r,t)&&$bm_isInstanceOfArray(e))return(e=e.slice(0))[0]=t-e[0],e;if($bm_isInstanceOfArray(t)&&$bm_isInstanceOfArray(e)){for(var i=0,a=t.length,o=e.length,s=[];i<a||i<o;)("number"==typeof t[i]||t[i]instanceof Number)&&("number"==typeof e[i]||e[i]instanceof Number)?s[i]=t[i]-e[i]:s[i]=void 0===e[i]?t[i]:t[i]||e[i],i+=1;return s}return 0}function mul(t,e){var r,n,i,a=_typeof$1(t),o=_typeof$1(e);if(isNumerable(a,t)&&isNumerable(o,e))return t*e;if($bm_isInstanceOfArray(t)&&isNumerable(o,e)){for(i=t.length,r=createTypedArray("float32",i),n=0;n<i;n+=1)r[n]=t[n]*e;return r}if(isNumerable(a,t)&&$bm_isInstanceOfArray(e)){for(i=e.length,r=createTypedArray("float32",i),n=0;n<i;n+=1)r[n]=t*e[n];return r}return 0}function div(t,e){var r,n,i,a=_typeof$1(t),o=_typeof$1(e);if(isNumerable(a,t)&&isNumerable(o,e))return t/e;if($bm_isInstanceOfArray(t)&&isNumerable(o,e)){for(i=t.length,r=createTypedArray("float32",i),n=0;n<i;n+=1)r[n]=t[n]/e;return r}if(isNumerable(a,t)&&$bm_isInstanceOfArray(e)){for(i=e.length,r=createTypedArray("float32",i),n=0;n<i;n+=1)r[n]=t/e[n];return r}return 0}function mod(t,e){return"string"==typeof t&&(t=parseInt(t,10)),"string"==typeof e&&(e=parseInt(e,10)),t%e}var $bm_sum=sum,$bm_sub=sub,$bm_mul=mul,$bm_div=div,$bm_mod=mod;function clamp(t,e,r){if(e>r){var n=r;r=e,e=n}return Math.min(Math.max(t,e),r)}function radiansToDegrees(t){return t/degToRads}var radians_to_degrees=radiansToDegrees;function degreesToRadians(t){return t*degToRads}var degrees_to_radians=radiansToDegrees,helperLengthArray=[0,0,0,0,0,0];function length(t,e){if("number"==typeof t||t instanceof Number)return e=e||0,Math.abs(t-e);var r;e||(e=helperLengthArray);var n=Math.min(t.length,e.length),i=0;for(r=0;r<n;r+=1)i+=Math.pow(e[r]-t[r],2);return Math.sqrt(i)}function normalize(t){return div(t,length(t))}function rgbToHsl(t){var e,r,n=t[0],i=t[1],a=t[2],o=Math.max(n,i,a),s=Math.min(n,i,a),l=(o+s)/2;if(o===s)e=0,r=0;else{var c=o-s;switch(r=l>.5?c/(2-o-s):c/(o+s),o){case n:e=(i-a)/c+(i<a?6:0);break;case i:e=(a-n)/c+2;break;case a:e=(n-i)/c+4}e/=6}return[e,r,l,t[3]]}function hue2rgb(t,e,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?t+6*(e-t)*r:r<.5?e:r<2/3?t+(e-t)*(2/3-r)*6:t}function hslToRgb(t){var e,r,n,i=t[0],a=t[1],o=t[2];if(0===a)e=o,n=o,r=o;else{var s=o<.5?o*(1+a):o+a-o*a,l=2*o-s;e=hue2rgb(l,s,i+1/3),r=hue2rgb(l,s,i),n=hue2rgb(l,s,i-1/3)}return[e,r,n,t[3]]}function linear(t,e,r,n,i){if(void 0!==n&&void 0!==i||(n=e,i=r,e=0,r=1),r<e){var a=r;r=e,e=a}if(t<=e)return n;if(t>=r)return i;var o,s=r===e?0:(t-e)/(r-e);if(!n.length)return n+(i-n)*s;var l=n.length,c=createTypedArray("float32",l);for(o=0;o<l;o+=1)c[o]=n[o]+(i[o]-n[o])*s;return c}function random(t,e){if(void 0===e&&(void 0===t?(t=0,e=1):(e=t,t=void 0)),e.length){var r,n=e.length;t||(t=createTypedArray("float32",n));var i=createTypedArray("float32",n),a=BMMath.random();for(r=0;r<n;r+=1)i[r]=t[r]+a*(e[r]-t[r]);return i}return void 0===t&&(t=0),t+BMMath.random()*(e-t)}function createPath(t,e,r,n){var i,a=t.length,o=shapePool.newElement();o.setPathData(!!n,a);var s,l,c=[0,0];for(i=0;i<a;i+=1)s=e&&e[i]?e[i]:c,l=r&&r[i]?r[i]:c,o.setTripleAt(t[i][0],t[i][1],l[0]+t[i][0],l[1]+t[i][1],s[0]+t[i][0],s[1]+t[i][1],i,!0);return o}function initiateExpression(elem,data,property){function noOp(t){return t}if(!elem.globalData.renderConfig.runExpressions)return noOp;var val=data.x,needsVelocity=/velocity(?![\w\d])/.test(val),_needsRandom=-1!==val.indexOf("random"),elemType=elem.data.ty,transform,$bm_transform,content,effect,thisProperty=property;thisProperty.valueAtTime=thisProperty.getValueAtTime,Object.defineProperty(thisProperty,"value",{get:function(){return thisProperty.v}}),elem.comp.frameDuration=1/elem.comp.globalData.frameRate,elem.comp.displayStartTime=0;var inPoint=elem.data.ip/elem.comp.globalData.frameRate,outPoint=elem.data.op/elem.comp.globalData.frameRate,width=elem.data.sw?elem.data.sw:0,height=elem.data.sh?elem.data.sh:0,name=elem.data.nm,loopIn,loop_in,loopOut,loop_out,smooth,toWorld,fromWorld,fromComp,toComp,fromCompToSurface,position,rotation,anchorPoint,scale,thisLayer,thisComp,mask,valueAtTime,velocityAtTime,scoped_bm_rt,expression_function=eval("[function _expression_function(){"+val+";scoped_bm_rt=$bm_rt}]")[0],numKeys=property.kf?data.k.length:0,active=!this.data||!0!==this.data.hd,wiggle=function(t,e){var r,n,i=this.pv.length?this.pv.length:1,a=createTypedArray("float32",i),o=Math.floor(5*time);for(r=0,n=0;r<o;){for(n=0;n<i;n+=1)a[n]+=-e+2*e*BMMath.random();r+=1}var s=5*time,l=s-Math.floor(s),c=createTypedArray("float32",i);if(i>1){for(n=0;n<i;n+=1)c[n]=this.pv[n]+a[n]+(-e+2*e*BMMath.random())*l;return c}return this.pv+a[0]+(-e+2*e*BMMath.random())*l}.bind(this);function loopInDuration(t,e){return loopIn(t,e,!0)}function loopOutDuration(t,e){return loopOut(t,e,!0)}thisProperty.loopIn&&(loopIn=thisProperty.loopIn.bind(thisProperty),loop_in=loopIn),thisProperty.loopOut&&(loopOut=thisProperty.loopOut.bind(thisProperty),loop_out=loopOut),thisProperty.smooth&&(smooth=thisProperty.smooth.bind(thisProperty)),this.getValueAtTime&&(valueAtTime=this.getValueAtTime.bind(this)),this.getVelocityAtTime&&(velocityAtTime=this.getVelocityAtTime.bind(this));var comp=elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface),time,velocity,value,text,textIndex,textTotal,selectorValue;function lookAt(t,e){var r=[e[0]-t[0],e[1]-t[1],e[2]-t[2]],n=Math.atan2(r[0],Math.sqrt(r[1]*r[1]+r[2]*r[2]))/degToRads;return[-Math.atan2(r[1],r[2])/degToRads,n,0]}function easeOut(t,e,r,n,i){return applyEase(easeOutBez,t,e,r,n,i)}function easeIn(t,e,r,n,i){return applyEase(easeInBez,t,e,r,n,i)}function ease(t,e,r,n,i){return applyEase(easeInOutBez,t,e,r,n,i)}function applyEase(t,e,r,n,i,a){void 0===i?(i=r,a=n):e=(e-r)/(n-r),e>1?e=1:e<0&&(e=0);var o=t(e);if($bm_isInstanceOfArray(i)){var s,l=i.length,c=createTypedArray("float32",l);for(s=0;s<l;s+=1)c[s]=(a[s]-i[s])*o+i[s];return c}return(a-i)*o+i}function nearestKey(t){var e,r,n,i=data.k.length;if(data.k.length&&"number"!=typeof data.k[0])if(r=-1,(t*=elem.comp.globalData.frameRate)<data.k[0].t)r=1,n=data.k[0].t;else{for(e=0;e<i-1;e+=1){if(t===data.k[e].t){r=e+1,n=data.k[e].t;break}if(t>data.k[e].t&&t<data.k[e+1].t){t-data.k[e].t>data.k[e+1].t-t?(r=e+2,n=data.k[e+1].t):(r=e+1,n=data.k[e].t);break}}-1===r&&(r=e+1,n=data.k[e].t)}else r=0,n=0;var a={};return a.index=r,a.time=n/elem.comp.globalData.frameRate,a}function key(t){var e,r,n;if(!data.k.length||"number"==typeof data.k[0])throw new Error("The property has no keyframe at index "+t);t-=1,e={time:data.k[t].t/elem.comp.globalData.frameRate,value:[]};var i=Object.prototype.hasOwnProperty.call(data.k[t],"s")?data.k[t].s:data.k[t-1].e;for(n=i.length,r=0;r<n;r+=1)e[r]=i[r],e.value[r]=i[r];return e}function framesToTime(t,e){return e||(e=elem.comp.globalData.frameRate),t/e}function timeToFrames(t,e){return t||0===t||(t=time),e||(e=elem.comp.globalData.frameRate),t*e}function seedRandom(t){BMMath.seedrandom(randSeed+t)}function sourceRectAtTime(){return elem.sourceRectAtTime()}function substring(t,e){return"string"==typeof value?void 0===e?value.substring(t):value.substring(t,e):""}function substr(t,e){return"string"==typeof value?void 0===e?value.substr(t):value.substr(t,e):""}function posterizeTime(t){time=0===t?0:Math.floor(time*t)/t,value=valueAtTime(time)}var index=elem.data.ind,hasParent=!(!elem.hierarchy||!elem.hierarchy.length),parent,randSeed=Math.floor(1e6*Math.random()),globalData=elem.globalData;function executeExpression(t){return value=t,this.frameExpressionId===elem.globalData.frameId&&"textSelector"!==this.propType?value:("textSelector"===this.propType&&(textIndex=this.textIndex,textTotal=this.textTotal,selectorValue=this.selectorValue),thisLayer||(text=elem.layerInterface.text,thisLayer=elem.layerInterface,thisComp=elem.comp.compInterface,toWorld=thisLayer.toWorld.bind(thisLayer),fromWorld=thisLayer.fromWorld.bind(thisLayer),fromComp=thisLayer.fromComp.bind(thisLayer),toComp=thisLayer.toComp.bind(thisLayer),mask=thisLayer.mask?thisLayer.mask.bind(thisLayer):null,fromCompToSurface=fromComp),transform||(transform=elem.layerInterface("ADBE Transform Group"),$bm_transform=transform,transform&&(anchorPoint=transform.anchorPoint)),4!==elemType||content||(content=thisLayer("ADBE Root Vectors Group")),effect||(effect=thisLayer(4)),(hasParent=!(!elem.hierarchy||!elem.hierarchy.length))&&!parent&&(parent=elem.hierarchy[0].layerInterface),time=this.comp.renderedFrame/this.comp.globalData.frameRate,_needsRandom&&seedRandom(randSeed+time),needsVelocity&&(velocity=velocityAtTime(time)),expression_function(),this.frameExpressionId=elem.globalData.frameId,scoped_bm_rt=scoped_bm_rt.propType===propTypes.SHAPE?scoped_bm_rt.v:scoped_bm_rt)}return executeExpression.__preventDeadCodeRemoval=[$bm_transform,anchorPoint,time,velocity,inPoint,outPoint,width,height,name,loop_in,loop_out,smooth,toComp,fromCompToSurface,toWorld,fromWorld,mask,position,rotation,scale,thisComp,numKeys,active,wiggle,loopInDuration,loopOutDuration,comp,lookAt,easeOut,easeIn,ease,nearestKey,key,text,textIndex,textTotal,selectorValue,framesToTime,timeToFrames,sourceRectAtTime,substring,substr,posterizeTime,index,globalData],executeExpression}return ob.initiateExpression=initiateExpression,ob.__preventDeadCodeRemoval=[window,document,XMLHttpRequest,fetch,frames,$bm_neg,add,$bm_sum,$bm_sub,$bm_mul,$bm_div,$bm_mod,clamp,radians_to_degrees,degreesToRadians,degrees_to_radians,normalize,rgbToHsl,hslToRgb,linear,random,createPath,_lottieGlobal],ob.resetFrame=resetFrame,ob}(),Expressions=function(){var t={initExpressions:function(t){var e=0,r=[];t.renderer.compInterface=CompExpressionInterface(t.renderer),t.renderer.globalData.projectInterface.registerComposition(t.renderer),t.renderer.globalData.pushExpression=function(){e+=1},t.renderer.globalData.popExpression=function(){0==(e-=1)&&function(){var t,e=r.length;for(t=0;t<e;t+=1)r[t].release();r.length=0}()},t.renderer.globalData.registerExpressionProperty=function(t){-1===r.indexOf(t)&&r.push(t)}}};return t.resetFrame=ExpressionManager.resetFrame,t}(),MaskManagerInterface=function(){function t(t,e){this._mask=t,this._data=e}return Object.defineProperty(t.prototype,"maskPath",{get:function(){return this._mask.prop.k&&this._mask.prop.getValue(),this._mask.prop}}),Object.defineProperty(t.prototype,"maskOpacity",{get:function(){return this._mask.op.k&&this._mask.op.getValue(),100*this._mask.op.v}}),function(e){var r,n=createSizedArray(e.viewData.length),i=e.viewData.length;for(r=0;r<i;r+=1)n[r]=new t(e.viewData[r],e.masksProperties[r]);return function(t){for(r=0;r<i;){if(e.masksProperties[r].nm===t)return n[r];r+=1}return null}}}(),ExpressionPropertyInterface=function(){var t={pv:0,v:0,mult:1},e={pv:[0,0,0],v:[0,0,0],mult:1};function r(t,e,r){Object.defineProperty(t,"velocity",{get:function(){return e.getVelocityAtTime(e.comp.currentFrame)}}),t.numKeys=e.keyframes?e.keyframes.length:0,t.key=function(n){if(!t.numKeys)return 0;var i;i="s"in e.keyframes[n-1]?e.keyframes[n-1].s:"e"in e.keyframes[n-2]?e.keyframes[n-2].e:e.keyframes[n-2].s;var a="unidimensional"===r?new Number(i):Object.assign({},i);return a.time=e.keyframes[n-1].t/e.elem.comp.globalData.frameRate,a.value="unidimensional"===r?i[0]:i,a},t.valueAtTime=e.getValueAtTime,t.speedAtTime=e.getSpeedAtTime,t.velocityAtTime=e.getVelocityAtTime,t.propertyGroup=e.propertyGroup}function n(){return t}return function(i){return i?"unidimensional"===i.propType?function(e){e&&"pv"in e||(e=t);var n=1/e.mult,i=e.pv*n,a=new Number(i);return a.value=i,r(a,e,"unidimensional"),function(){return e.k&&e.getValue(),i=e.v*n,a.value!==i&&((a=new Number(i)).value=i,r(a,e,"unidimensional")),a}}(i):function(t){t&&"pv"in t||(t=e);var n=1/t.mult,i=t.data&&t.data.l||t.pv.length,a=createTypedArray("float32",i),o=createTypedArray("float32",i);return a.value=o,r(a,t,"multidimensional"),function(){t.k&&t.getValue();for(var e=0;e<i;e+=1)o[e]=t.v[e]*n,a[e]=o[e];return a}}(i):n}}(),TransformExpressionInterface=function(t){function e(t){switch(t){case"scale":case"Scale":case"ADBE Scale":case 6:return e.scale;case"rotation":case"Rotation":case"ADBE Rotation":case"ADBE Rotate Z":case 10:return e.rotation;case"ADBE Rotate X":return e.xRotation;case"ADBE Rotate Y":return e.yRotation;case"position":case"Position":case"ADBE Position":case 2:return e.position;case"ADBE Position_0":return e.xPosition;case"ADBE Position_1":return e.yPosition;case"ADBE Position_2":return e.zPosition;case"anchorPoint":case"AnchorPoint":case"Anchor Point":case"ADBE AnchorPoint":case 1:return e.anchorPoint;case"opacity":case"Opacity":case 11:return e.opacity;default:return null}}var r,n,i,a;return Object.defineProperty(e,"rotation",{get:ExpressionPropertyInterface(t.r||t.rz)}),Object.defineProperty(e,"zRotation",{get:ExpressionPropertyInterface(t.rz||t.r)}),Object.defineProperty(e,"xRotation",{get:ExpressionPropertyInterface(t.rx)}),Object.defineProperty(e,"yRotation",{get:ExpressionPropertyInterface(t.ry)}),Object.defineProperty(e,"scale",{get:ExpressionPropertyInterface(t.s)}),t.p?a=ExpressionPropertyInterface(t.p):(r=ExpressionPropertyInterface(t.px),n=ExpressionPropertyInterface(t.py),t.pz&&(i=ExpressionPropertyInterface(t.pz))),Object.defineProperty(e,"position",{get:function(){return t.p?a():[r(),n(),i?i():0]}}),Object.defineProperty(e,"xPosition",{get:ExpressionPropertyInterface(t.px)}),Object.defineProperty(e,"yPosition",{get:ExpressionPropertyInterface(t.py)}),Object.defineProperty(e,"zPosition",{get:ExpressionPropertyInterface(t.pz)}),Object.defineProperty(e,"anchorPoint",{get:ExpressionPropertyInterface(t.a)}),Object.defineProperty(e,"opacity",{get:ExpressionPropertyInterface(t.o)}),Object.defineProperty(e,"skew",{get:ExpressionPropertyInterface(t.sk)}),Object.defineProperty(e,"skewAxis",{get:ExpressionPropertyInterface(t.sa)}),Object.defineProperty(e,"orientation",{get:ExpressionPropertyInterface(t.or)}),e},LayerExpressionInterface=function(){function t(t){var e=new Matrix;return void 0!==t?this._elem.finalTransform.mProp.getValueAtTime(t).clone(e):this._elem.finalTransform.mProp.applyToMatrix(e),e}function e(t,e){var r=this.getMatrix(e);return r.props[12]=0,r.props[13]=0,r.props[14]=0,this.applyPoint(r,t)}function r(t,e){var r=this.getMatrix(e);return this.applyPoint(r,t)}function n(t,e){var r=this.getMatrix(e);return r.props[12]=0,r.props[13]=0,r.props[14]=0,this.invertPoint(r,t)}function i(t,e){var r=this.getMatrix(e);return this.invertPoint(r,t)}function a(t,e){if(this._elem.hierarchy&&this._elem.hierarchy.length){var r,n=this._elem.hierarchy.length;for(r=0;r<n;r+=1)this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(t)}return t.applyToPointArray(e[0],e[1],e[2]||0)}function o(t,e){if(this._elem.hierarchy&&this._elem.hierarchy.length){var r,n=this._elem.hierarchy.length;for(r=0;r<n;r+=1)this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(t)}return t.inversePoint(e)}function s(t){var e=new Matrix;if(e.reset(),this._elem.finalTransform.mProp.applyToMatrix(e),this._elem.hierarchy&&this._elem.hierarchy.length){var r,n=this._elem.hierarchy.length;for(r=0;r<n;r+=1)this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(e);return e.inversePoint(t)}return e.inversePoint(t)}function l(){return[1,1,1,1]}return function(c){var u;function h(t){switch(t){case"ADBE Root Vectors Group":case"Contents":case 2:return h.shapeInterface;case 1:case 6:case"Transform":case"transform":case"ADBE Transform Group":return u;case 4:case"ADBE Effect Parade":case"effects":case"Effects":return h.effect;case"ADBE Text Properties":return h.textInterface;default:return null}}h.getMatrix=t,h.invertPoint=o,h.applyPoint=a,h.toWorld=r,h.toWorldVec=e,h.fromWorld=i,h.fromWorldVec=n,h.toComp=r,h.fromComp=s,h.sampleImage=l,h.sourceRectAtTime=c.sourceRectAtTime.bind(c),h._elem=c;var f=getDescriptor(u=TransformExpressionInterface(c.finalTransform.mProp),"anchorPoint");return Object.defineProperties(h,{hasParent:{get:function(){return c.hierarchy.length}},parent:{get:function(){return c.hierarchy[0].layerInterface}},rotation:getDescriptor(u,"rotation"),scale:getDescriptor(u,"scale"),position:getDescriptor(u,"position"),opacity:getDescriptor(u,"opacity"),anchorPoint:f,anchor_point:f,transform:{get:function(){return u}},active:{get:function(){return c.isInRange}}}),h.startTime=c.data.st,h.index=c.data.ind,h.source=c.data.refId,h.height=0===c.data.ty?c.data.h:100,h.width=0===c.data.ty?c.data.w:100,h.inPoint=c.data.ip/c.comp.globalData.frameRate,h.outPoint=c.data.op/c.comp.globalData.frameRate,h._name=c.data.nm,h.registerMaskInterface=function(t){h.mask=new MaskManagerInterface(t,c)},h.registerEffectsInterface=function(t){h.effect=t},h}}(),propertyGroupFactory=function(t,e){return function(r){return(r=void 0===r?1:r)<=0?t:e(r-1)}},PropertyInterface=function(t,e){var r={_name:t};return function(t){return(t=void 0===t?1:t)<=0?r:e(t-1)}},EffectsExpressionInterface=function(){function t(r,n,i,a){function o(t){for(var e=r.ef,n=0,i=e.length;n<i;){if(t===e[n].nm||t===e[n].mn||t===e[n].ix)return 5===e[n].ty?c[n]:c[n]();n+=1}throw new Error}var s,l=propertyGroupFactory(o,i),c=[],u=r.ef.length;for(s=0;s<u;s+=1)5===r.ef[s].ty?c.push(t(r.ef[s],n.effectElements[s],n.effectElements[s].propertyGroup,a)):c.push(e(n.effectElements[s],r.ef[s].ty,a,l));return"ADBE Color Control"===r.mn&&Object.defineProperty(o,"color",{get:function(){return c[0]()}}),Object.defineProperties(o,{numProperties:{get:function(){return r.np}},_name:{value:r.nm},propertyGroup:{value:l}}),o.enabled=0!==r.en,o.active=o.enabled,o}function e(t,e,r,n){var i=ExpressionPropertyInterface(t.p);return t.p.setGroupProperty&&t.p.setGroupProperty(PropertyInterface("",n)),function(){return 10===e?r.comp.compInterface(t.p.v):i()}}return{createEffectsInterface:function(e,r){if(e.effectsManager){var n,i=[],a=e.data.ef,o=e.effectsManager.effectElements.length;for(n=0;n<o;n+=1)i.push(t(a[n],e.effectsManager.effectElements[n],r,e));var s=e.data.ef||[],l=function(t){for(n=0,o=s.length;n<o;){if(t===s[n].nm||t===s[n].mn||t===s[n].ix)return i[n];n+=1}return null};return Object.defineProperty(l,"numProperties",{get:function(){return s.length}}),l}return null}}}(),ShapePathInterface=function(t,e,r){var n=e.sh;function i(t){return"Shape"===t||"shape"===t||"Path"===t||"path"===t||"ADBE Vector Shape"===t||2===t?i.path:null}var a=propertyGroupFactory(i,r);return n.setGroupProperty(PropertyInterface("Path",a)),Object.defineProperties(i,{path:{get:function(){return n.k&&n.getValue(),n}},shape:{get:function(){return n.k&&n.getValue(),n}},_name:{value:t.nm},ix:{value:t.ix},propertyIndex:{value:t.ix},mn:{value:t.mn},propertyGroup:{value:r}}),i},ShapeExpressionInterface=function(){function t(t,o,f){var p,d=[],m=t?t.length:0;for(p=0;p<m;p+=1)"gr"===t[p].ty?d.push(e(t[p],o[p],f)):"fl"===t[p].ty?d.push(r(t[p],o[p],f)):"st"===t[p].ty?d.push(i(t[p],o[p],f)):"tm"===t[p].ty?d.push(a(t[p],o[p],f)):"tr"===t[p].ty||("el"===t[p].ty?d.push(s(t[p],o[p],f)):"sr"===t[p].ty?d.push(l(t[p],o[p],f)):"sh"===t[p].ty?d.push(ShapePathInterface(t[p],o[p],f)):"rc"===t[p].ty?d.push(c(t[p],o[p],f)):"rd"===t[p].ty?d.push(u(t[p],o[p],f)):"rp"===t[p].ty?d.push(h(t[p],o[p],f)):"gf"===t[p].ty?d.push(n(t[p],o[p],f)):d.push((t[p],o[p],function(){return null})));return d}function e(e,r,n){var i=function(t){switch(t){case"ADBE Vectors Group":case"Contents":case 2:return i.content;default:return i.transform}};i.propertyGroup=propertyGroupFactory(i,n);var a=function(e,r,n){var i,a=function(t){for(var e=0,r=i.length;e<r;){if(i[e]._name===t||i[e].mn===t||i[e].propertyIndex===t||i[e].ix===t||i[e].ind===t)return i[e];e+=1}return"number"==typeof t?i[t-1]:null};a.propertyGroup=propertyGroupFactory(a,n),i=t(e.it,r.it,a.propertyGroup),a.numProperties=i.length;var s=o(e.it[e.it.length-1],r.it[r.it.length-1],a.propertyGroup);return a.transform=s,a.propertyIndex=e.cix,a._name=e.nm,a}(e,r,i.propertyGroup),s=o(e.it[e.it.length-1],r.it[r.it.length-1],i.propertyGroup);return i.content=a,i.transform=s,Object.defineProperty(i,"_name",{get:function(){return e.nm}}),i.numProperties=e.np,i.propertyIndex=e.ix,i.nm=e.nm,i.mn=e.mn,i}function r(t,e,r){function n(t){return"Color"===t||"color"===t?n.color:"Opacity"===t||"opacity"===t?n.opacity:null}return Object.defineProperties(n,{color:{get:ExpressionPropertyInterface(e.c)},opacity:{get:ExpressionPropertyInterface(e.o)},_name:{value:t.nm},mn:{value:t.mn}}),e.c.setGroupProperty(PropertyInterface("Color",r)),e.o.setGroupProperty(PropertyInterface("Opacity",r)),n}function n(t,e,r){function n(t){return"Start Point"===t||"start point"===t?n.startPoint:"End Point"===t||"end point"===t?n.endPoint:"Opacity"===t||"opacity"===t?n.opacity:null}return Object.defineProperties(n,{startPoint:{get:ExpressionPropertyInterface(e.s)},endPoint:{get:ExpressionPropertyInterface(e.e)},opacity:{get:ExpressionPropertyInterface(e.o)},type:{get:function(){return"a"}},_name:{value:t.nm},mn:{value:t.mn}}),e.s.setGroupProperty(PropertyInterface("Start Point",r)),e.e.setGroupProperty(PropertyInterface("End Point",r)),e.o.setGroupProperty(PropertyInterface("Opacity",r)),n}function i(t,e,r){var n,i=propertyGroupFactory(c,r),a=propertyGroupFactory(l,i);function o(r){Object.defineProperty(l,t.d[r].nm,{get:ExpressionPropertyInterface(e.d.dataProps[r].p)})}var s=t.d?t.d.length:0,l={};for(n=0;n<s;n+=1)o(n),e.d.dataProps[n].p.setGroupProperty(a);function c(t){return"Color"===t||"color"===t?c.color:"Opacity"===t||"opacity"===t?c.opacity:"Stroke Width"===t||"stroke width"===t?c.strokeWidth:null}return Object.defineProperties(c,{color:{get:ExpressionPropertyInterface(e.c)},opacity:{get:ExpressionPropertyInterface(e.o)},strokeWidth:{get:ExpressionPropertyInterface(e.w)},dash:{get:function(){return l}},_name:{value:t.nm},mn:{value:t.mn}}),e.c.setGroupProperty(PropertyInterface("Color",i)),e.o.setGroupProperty(PropertyInterface("Opacity",i)),e.w.setGroupProperty(PropertyInterface("Stroke Width",i)),c}function a(t,e,r){function n(e){return e===t.e.ix||"End"===e||"end"===e?n.end:e===t.s.ix?n.start:e===t.o.ix?n.offset:null}var i=propertyGroupFactory(n,r);return n.propertyIndex=t.ix,e.s.setGroupProperty(PropertyInterface("Start",i)),e.e.setGroupProperty(PropertyInterface("End",i)),e.o.setGroupProperty(PropertyInterface("Offset",i)),n.propertyIndex=t.ix,n.propertyGroup=r,Object.defineProperties(n,{start:{get:ExpressionPropertyInterface(e.s)},end:{get:ExpressionPropertyInterface(e.e)},offset:{get:ExpressionPropertyInterface(e.o)},_name:{value:t.nm}}),n.mn=t.mn,n}function o(t,e,r){function n(e){return t.a.ix===e||"Anchor Point"===e?n.anchorPoint:t.o.ix===e||"Opacity"===e?n.opacity:t.p.ix===e||"Position"===e?n.position:t.r.ix===e||"Rotation"===e||"ADBE Vector Rotation"===e?n.rotation:t.s.ix===e||"Scale"===e?n.scale:t.sk&&t.sk.ix===e||"Skew"===e?n.skew:t.sa&&t.sa.ix===e||"Skew Axis"===e?n.skewAxis:null}var i=propertyGroupFactory(n,r);return e.transform.mProps.o.setGroupProperty(PropertyInterface("Opacity",i)),e.transform.mProps.p.setGroupProperty(PropertyInterface("Position",i)),e.transform.mProps.a.setGroupProperty(PropertyInterface("Anchor Point",i)),e.transform.mProps.s.setGroupProperty(PropertyInterface("Scale",i)),e.transform.mProps.r.setGroupProperty(PropertyInterface("Rotation",i)),e.transform.mProps.sk&&(e.transform.mProps.sk.setGroupProperty(PropertyInterface("Skew",i)),e.transform.mProps.sa.setGroupProperty(PropertyInterface("Skew Angle",i))),e.transform.op.setGroupProperty(PropertyInterface("Opacity",i)),Object.defineProperties(n,{opacity:{get:ExpressionPropertyInterface(e.transform.mProps.o)},position:{get:ExpressionPropertyInterface(e.transform.mProps.p)},anchorPoint:{get:ExpressionPropertyInterface(e.transform.mProps.a)},scale:{get:ExpressionPropertyInterface(e.transform.mProps.s)},rotation:{get:ExpressionPropertyInterface(e.transform.mProps.r)},skew:{get:ExpressionPropertyInterface(e.transform.mProps.sk)},skewAxis:{get:ExpressionPropertyInterface(e.transform.mProps.sa)},_name:{value:t.nm}}),n.ty="tr",n.mn=t.mn,n.propertyGroup=r,n}function s(t,e,r){function n(e){return t.p.ix===e?n.position:t.s.ix===e?n.size:null}var i=propertyGroupFactory(n,r);n.propertyIndex=t.ix;var a="tm"===e.sh.ty?e.sh.prop:e.sh;return a.s.setGroupProperty(PropertyInterface("Size",i)),a.p.setGroupProperty(PropertyInterface("Position",i)),Object.defineProperties(n,{size:{get:ExpressionPropertyInterface(a.s)},position:{get:ExpressionPropertyInterface(a.p)},_name:{value:t.nm}}),n.mn=t.mn,n}function l(t,e,r){function n(e){return t.p.ix===e?n.position:t.r.ix===e?n.rotation:t.pt.ix===e?n.points:t.or.ix===e||"ADBE Vector Star Outer Radius"===e?n.outerRadius:t.os.ix===e?n.outerRoundness:!t.ir||t.ir.ix!==e&&"ADBE Vector Star Inner Radius"!==e?t.is&&t.is.ix===e?n.innerRoundness:null:n.innerRadius}var i=propertyGroupFactory(n,r),a="tm"===e.sh.ty?e.sh.prop:e.sh;return n.propertyIndex=t.ix,a.or.setGroupProperty(PropertyInterface("Outer Radius",i)),a.os.setGroupProperty(PropertyInterface("Outer Roundness",i)),a.pt.setGroupProperty(PropertyInterface("Points",i)),a.p.setGroupProperty(PropertyInterface("Position",i)),a.r.setGroupProperty(PropertyInterface("Rotation",i)),t.ir&&(a.ir.setGroupProperty(PropertyInterface("Inner Radius",i)),a.is.setGroupProperty(PropertyInterface("Inner Roundness",i))),Object.defineProperties(n,{position:{get:ExpressionPropertyInterface(a.p)},rotation:{get:ExpressionPropertyInterface(a.r)},points:{get:ExpressionPropertyInterface(a.pt)},outerRadius:{get:ExpressionPropertyInterface(a.or)},outerRoundness:{get:ExpressionPropertyInterface(a.os)},innerRadius:{get:ExpressionPropertyInterface(a.ir)},innerRoundness:{get:ExpressionPropertyInterface(a.is)},_name:{value:t.nm}}),n.mn=t.mn,n}function c(t,e,r){function n(e){return t.p.ix===e?n.position:t.r.ix===e?n.roundness:t.s.ix===e||"Size"===e||"ADBE Vector Rect Size"===e?n.size:null}var i=propertyGroupFactory(n,r),a="tm"===e.sh.ty?e.sh.prop:e.sh;return n.propertyIndex=t.ix,a.p.setGroupProperty(PropertyInterface("Position",i)),a.s.setGroupProperty(PropertyInterface("Size",i)),a.r.setGroupProperty(PropertyInterface("Rotation",i)),Object.defineProperties(n,{position:{get:ExpressionPropertyInterface(a.p)},roundness:{get:ExpressionPropertyInterface(a.r)},size:{get:ExpressionPropertyInterface(a.s)},_name:{value:t.nm}}),n.mn=t.mn,n}function u(t,e,r){function n(e){return t.r.ix===e||"Round Corners 1"===e?n.radius:null}var i=propertyGroupFactory(n,r),a=e;return n.propertyIndex=t.ix,a.rd.setGroupProperty(PropertyInterface("Radius",i)),Object.defineProperties(n,{radius:{get:ExpressionPropertyInterface(a.rd)},_name:{value:t.nm}}),n.mn=t.mn,n}function h(t,e,r){function n(e){return t.c.ix===e||"Copies"===e?n.copies:t.o.ix===e||"Offset"===e?n.offset:null}var i=propertyGroupFactory(n,r),a=e;return n.propertyIndex=t.ix,a.c.setGroupProperty(PropertyInterface("Copies",i)),a.o.setGroupProperty(PropertyInterface("Offset",i)),Object.defineProperties(n,{copies:{get:ExpressionPropertyInterface(a.c)},offset:{get:ExpressionPropertyInterface(a.o)},_name:{value:t.nm}}),n.mn=t.mn,n}return function(e,r,n){var i;function a(t){if("number"==typeof t)return 0===(t=void 0===t?1:t)?n:i[t-1];for(var e=0,r=i.length;e<r;){if(i[e]._name===t)return i[e];e+=1}return null}return a.propertyGroup=propertyGroupFactory(a,(function(){return n})),i=t(e,r,a.propertyGroup),a.numProperties=i.length,a._name="Contents",a}}(),TextExpressionInterface=function(t){var e;function r(t){return"ADBE Text Document"===t?r.sourceText:null}return Object.defineProperty(r,"sourceText",{get:function(){t.textProperty.getValue();var r=t.textProperty.currentData.t;return e&&r===e.value||((e=new String(r)).value=r||new String(r),Object.defineProperty(e,"style",{get:function(){return{fillColor:t.textProperty.currentData.fc}}})),e}}),r};function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}var FootageInterface=(dataInterfaceFactory=function(t){function e(t){return"Outline"===t?e.outlineInterface():null}return e._name="Outline",e.outlineInterface=function(t){var e="",r=t.getFootageData();function n(t){if(r[t])return e=t,"object"===_typeof(r=r[t])?n:r;var i=t.indexOf(e);if(-1!==i){var a=parseInt(t.substr(i+e.length),10);return"object"===_typeof(r=r[a])?n:r}return""}return function(){return e="",r=t.getFootageData(),n}}(t),e},function(t){function e(t){return"Data"===t?e.dataInterface:null}return e._name="Data",e.dataInterface=dataInterfaceFactory(t),e}),dataInterfaceFactory,interfaces={layer:LayerExpressionInterface,effects:EffectsExpressionInterface,comp:CompExpressionInterface,shape:ShapeExpressionInterface,text:TextExpressionInterface,footage:FootageInterface};function getInterface(t){return interfaces[t]||null}var expressionHelpers={searchExpressions:function(t,e,r){e.x&&(r.k=!0,r.x=!0,r.initiateExpression=ExpressionManager.initiateExpression,r.effectsSequence.push(r.initiateExpression(t,e,r).bind(r)))},getSpeedAtTime:function(t){var e=this.getValueAtTime(t),r=this.getValueAtTime(t+-.01),n=0;if(e.length){var i;for(i=0;i<e.length;i+=1)n+=Math.pow(r[i]-e[i],2);n=100*Math.sqrt(n)}else n=0;return n},getVelocityAtTime:function(t){if(void 0!==this.vel)return this.vel;var e,r,n=-.001,i=this.getValueAtTime(t),a=this.getValueAtTime(t+n);if(i.length)for(e=createTypedArray("float32",i.length),r=0;r<i.length;r+=1)e[r]=(a[r]-i[r])/n;else e=(a-i)/n;return e},getValueAtTime:function(t){return t*=this.elem.globalData.frameRate,(t-=this.offsetTime)!==this._cachingAtTime.lastFrame&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastFrame<t?this._cachingAtTime.lastIndex:0,this._cachingAtTime.value=this.interpolateValue(t,this._cachingAtTime),this._cachingAtTime.lastFrame=t),this._cachingAtTime.value},getStaticValueAtTime:function(){return this.pv},setGroupProperty:function(t){this.propertyGroup=t}};function addPropertyDecorator(){function t(t,e,r){if(!this.k||!this.keyframes)return this.pv;t=t?t.toLowerCase():"";var n,i,a,o,s,l=this.comp.renderedFrame,c=this.keyframes,u=c[c.length-1].t;if(l<=u)return this.pv;if(r?i=u-(n=e?Math.abs(u-this.elem.comp.globalData.frameRate*e):Math.max(0,u-this.elem.data.ip)):((!e||e>c.length-1)&&(e=c.length-1),n=u-(i=c[c.length-1-e].t)),"pingpong"===t){if(Math.floor((l-i)/n)%2!=0)return this.getValueAtTime((n-(l-i)%n+i)/this.comp.globalData.frameRate,0)}else{if("offset"===t){var h=this.getValueAtTime(i/this.comp.globalData.frameRate,0),f=this.getValueAtTime(u/this.comp.globalData.frameRate,0),p=this.getValueAtTime(((l-i)%n+i)/this.comp.globalData.frameRate,0),d=Math.floor((l-i)/n);if(this.pv.length){for(o=(s=new Array(h.length)).length,a=0;a<o;a+=1)s[a]=(f[a]-h[a])*d+p[a];return s}return(f-h)*d+p}if("continue"===t){var m=this.getValueAtTime(u/this.comp.globalData.frameRate,0),y=this.getValueAtTime((u-.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(o=(s=new Array(m.length)).length,a=0;a<o;a+=1)s[a]=m[a]+(m[a]-y[a])*((l-u)/this.comp.globalData.frameRate)/5e-4;return s}return m+(l-u)/.001*(m-y)}}return this.getValueAtTime(((l-i)%n+i)/this.comp.globalData.frameRate,0)}function e(t,e,r){if(!this.k)return this.pv;t=t?t.toLowerCase():"";var n,i,a,o,s,l=this.comp.renderedFrame,c=this.keyframes,u=c[0].t;if(l>=u)return this.pv;if(r?i=u+(n=e?Math.abs(this.elem.comp.globalData.frameRate*e):Math.max(0,this.elem.data.op-u)):((!e||e>c.length-1)&&(e=c.length-1),n=(i=c[e].t)-u),"pingpong"===t){if(Math.floor((u-l)/n)%2==0)return this.getValueAtTime(((u-l)%n+u)/this.comp.globalData.frameRate,0)}else{if("offset"===t){var h=this.getValueAtTime(u/this.comp.globalData.frameRate,0),f=this.getValueAtTime(i/this.comp.globalData.frameRate,0),p=this.getValueAtTime((n-(u-l)%n+u)/this.comp.globalData.frameRate,0),d=Math.floor((u-l)/n)+1;if(this.pv.length){for(o=(s=new Array(h.length)).length,a=0;a<o;a+=1)s[a]=p[a]-(f[a]-h[a])*d;return s}return p-(f-h)*d}if("continue"===t){var m=this.getValueAtTime(u/this.comp.globalData.frameRate,0),y=this.getValueAtTime((u+.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(o=(s=new Array(m.length)).length,a=0;a<o;a+=1)s[a]=m[a]+(m[a]-y[a])*(u-l)/.001;return s}return m+(m-y)*(u-l)/.001}}return this.getValueAtTime((n-((u-l)%n+u))/this.comp.globalData.frameRate,0)}function r(t,e){if(!this.k)return this.pv;if(t=.5*(t||.4),(e=Math.floor(e||5))<=1)return this.pv;var r,n,i=this.comp.renderedFrame/this.comp.globalData.frameRate,a=i-t,o=e>1?(i+t-a)/(e-1):1,s=0,l=0;for(r=this.pv.length?createTypedArray("float32",this.pv.length):0;s<e;){if(n=this.getValueAtTime(a+s*o),this.pv.length)for(l=0;l<this.pv.length;l+=1)r[l]+=n[l];else r+=n;s+=1}if(this.pv.length)for(l=0;l<this.pv.length;l+=1)r[l]/=e;else r/=e;return r}function n(t){this._transformCachingAtTime||(this._transformCachingAtTime={v:new Matrix});var e=this._transformCachingAtTime.v;if(e.cloneFromProps(this.pre.props),this.appliedTransformations<1){var r=this.a.getValueAtTime(t);e.translate(-r[0]*this.a.mult,-r[1]*this.a.mult,r[2]*this.a.mult)}if(this.appliedTransformations<2){var n=this.s.getValueAtTime(t);e.scale(n[0]*this.s.mult,n[1]*this.s.mult,n[2]*this.s.mult)}if(this.sk&&this.appliedTransformations<3){var i=this.sk.getValueAtTime(t),a=this.sa.getValueAtTime(t);e.skewFromAxis(-i*this.sk.mult,a*this.sa.mult)}if(this.r&&this.appliedTransformations<4){var o=this.r.getValueAtTime(t);e.rotate(-o*this.r.mult)}else if(!this.r&&this.appliedTransformations<4){var s=this.rz.getValueAtTime(t),l=this.ry.getValueAtTime(t),c=this.rx.getValueAtTime(t),u=this.or.getValueAtTime(t);e.rotateZ(-s*this.rz.mult).rotateY(l*this.ry.mult).rotateX(c*this.rx.mult).rotateZ(-u[2]*this.or.mult).rotateY(u[1]*this.or.mult).rotateX(u[0]*this.or.mult)}if(this.data.p&&this.data.p.s){var h=this.px.getValueAtTime(t),f=this.py.getValueAtTime(t);if(this.data.p.z){var p=this.pz.getValueAtTime(t);e.translate(h*this.px.mult,f*this.py.mult,-p*this.pz.mult)}else e.translate(h*this.px.mult,f*this.py.mult,0)}else{var d=this.p.getValueAtTime(t);e.translate(d[0]*this.p.mult,d[1]*this.p.mult,-d[2]*this.p.mult)}return e}function i(){return this.v.clone(new Matrix)}var a=TransformPropertyFactory.getTransformProperty;TransformPropertyFactory.getTransformProperty=function(t,e,r){var o=a(t,e,r);return o.dynamicProperties.length?o.getValueAtTime=n.bind(o):o.getValueAtTime=i.bind(o),o.setGroupProperty=expressionHelpers.setGroupProperty,o};var o=PropertyFactory.getProp;PropertyFactory.getProp=function(n,i,a,s,l){var c=o(n,i,a,s,l);c.kf?c.getValueAtTime=expressionHelpers.getValueAtTime.bind(c):c.getValueAtTime=expressionHelpers.getStaticValueAtTime.bind(c),c.setGroupProperty=expressionHelpers.setGroupProperty,c.loopOut=t,c.loopIn=e,c.smooth=r,c.getVelocityAtTime=expressionHelpers.getVelocityAtTime.bind(c),c.getSpeedAtTime=expressionHelpers.getSpeedAtTime.bind(c),c.numKeys=1===i.a?i.k.length:0,c.propertyIndex=i.ix;var u=0;return 0!==a&&(u=createTypedArray("float32",1===i.a?i.k[0].s.length:i.k.length)),c._cachingAtTime={lastFrame:initialDefaultFrame,lastIndex:0,value:u},expressionHelpers.searchExpressions(n,i,c),c.k&&l.addDynamicProperty(c),c};var s=ShapePropertyFactory.getConstructorFunction(),l=ShapePropertyFactory.getKeyframedConstructorFunction();function c(){}c.prototype={vertices:function(t,e){this.k&&this.getValue();var r,n=this.v;void 0!==e&&(n=this.getValueAtTime(e,0));var i=n._length,a=n[t],o=n.v,s=createSizedArray(i);for(r=0;r<i;r+=1)s[r]="i"===t||"o"===t?[a[r][0]-o[r][0],a[r][1]-o[r][1]]:[a[r][0],a[r][1]];return s},points:function(t){return this.vertices("v",t)},inTangents:function(t){return this.vertices("i",t)},outTangents:function(t){return this.vertices("o",t)},isClosed:function(){return this.v.c},pointOnPath:function(t,e){var r=this.v;void 0!==e&&(r=this.getValueAtTime(e,0)),this._segmentsLength||(this._segmentsLength=bez.getSegmentsLength(r));for(var n,i=this._segmentsLength,a=i.lengths,o=i.totalLength*t,s=0,l=a.length,c=0;s<l;){if(c+a[s].addedLength>o){var u=s,h=r.c&&s===l-1?0:s+1,f=(o-c)/a[s].addedLength;n=bez.getPointInSegment(r.v[u],r.v[h],r.o[u],r.i[h],f,a[s]);break}c+=a[s].addedLength,s+=1}return n||(n=r.c?[r.v[0][0],r.v[0][1]]:[r.v[r._length-1][0],r.v[r._length-1][1]]),n},vectorOnPath:function(t,e,r){1==t?t=this.v.c:0==t&&(t=.999);var n=this.pointOnPath(t,e),i=this.pointOnPath(t+.001,e),a=i[0]-n[0],o=i[1]-n[1],s=Math.sqrt(Math.pow(a,2)+Math.pow(o,2));return 0===s?[0,0]:"tangent"===r?[a/s,o/s]:[-o/s,a/s]},tangentOnPath:function(t,e){return this.vectorOnPath(t,e,"tangent")},normalOnPath:function(t,e){return this.vectorOnPath(t,e,"normal")},setGroupProperty:expressionHelpers.setGroupProperty,getValueAtTime:expressionHelpers.getStaticValueAtTime},extendPrototype([c],s),extendPrototype([c],l),l.prototype.getValueAtTime=function(t){return this._cachingAtTime||(this._cachingAtTime={shapeValue:shapePool.clone(this.pv),lastIndex:0,lastTime:initialDefaultFrame}),t*=this.elem.globalData.frameRate,(t-=this.offsetTime)!==this._cachingAtTime.lastTime&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastTime<t?this._caching.lastIndex:0,this._cachingAtTime.lastTime=t,this.interpolateShape(t,this._cachingAtTime.shapeValue,this._cachingAtTime)),this._cachingAtTime.shapeValue},l.prototype.initiateExpression=ExpressionManager.initiateExpression;var u=ShapePropertyFactory.getShapeProp;ShapePropertyFactory.getShapeProp=function(t,e,r,n,i){var a=u(t,e,r,n,i);return a.propertyIndex=e.ix,a.lock=!1,3===r?expressionHelpers.searchExpressions(t,e.pt,a):4===r&&expressionHelpers.searchExpressions(t,e.ks,a),a.k&&t.addDynamicProperty(a),a}}function initialize$1(){addPropertyDecorator()}function addDecorator(){TextProperty.prototype.getExpressionValue=function(t,e){var r=this.calculateExpression(e);if(t.t!==r){var n={};return this.copyData(n,t),n.t=r.toString(),n.__complete=!1,n}return t},TextProperty.prototype.searchProperty=function(){var t=this.searchKeyframes(),e=this.searchExpressions();return this.kf=t||e,this.kf},TextProperty.prototype.searchExpressions=function(){return this.data.d.x?(this.calculateExpression=ExpressionManager.initiateExpression.bind(this)(this.elem,this.data.d,this),this.addEffect(this.getExpressionValue.bind(this)),!0):null}}function initialize(){addDecorator()}function SVGComposableEffect(){}SVGComposableEffect.prototype={createMergeNode:function(t,e){var r,n,i=createNS("feMerge");for(i.setAttribute("result",t),n=0;n<e.length;n+=1)(r=createNS("feMergeNode")).setAttribute("in",e[n]),i.appendChild(r),i.appendChild(r);return i}};var linearFilterValue="0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0";function SVGTintFilter(t,e,r,n,i){this.filterManager=e;var a=createNS("feColorMatrix");a.setAttribute("type","matrix"),a.setAttribute("color-interpolation-filters","linearRGB"),a.setAttribute("values",linearFilterValue+" 1 0"),this.linearFilter=a,a.setAttribute("result",n+"_tint_1"),t.appendChild(a),(a=createNS("feColorMatrix")).setAttribute("type","matrix"),a.setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),a.setAttribute("result",n+"_tint_2"),t.appendChild(a),this.matrixFilter=a;var o=this.createMergeNode(n,[i,n+"_tint_1",n+"_tint_2"]);t.appendChild(o)}function SVGFillFilter(t,e,r,n){this.filterManager=e;var i=createNS("feColorMatrix");i.setAttribute("type","matrix"),i.setAttribute("color-interpolation-filters","sRGB"),i.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),i.setAttribute("result",n),t.appendChild(i),this.matrixFilter=i}function SVGStrokeEffect(t,e,r){this.initialized=!1,this.filterManager=e,this.elem=r,this.paths=[]}function SVGTritoneFilter(t,e,r,n){this.filterManager=e;var i=createNS("feColorMatrix");i.setAttribute("type","matrix"),i.setAttribute("color-interpolation-filters","linearRGB"),i.setAttribute("values","0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"),t.appendChild(i);var a=createNS("feComponentTransfer");a.setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("result",n),this.matrixFilter=a;var o=createNS("feFuncR");o.setAttribute("type","table"),a.appendChild(o),this.feFuncR=o;var s=createNS("feFuncG");s.setAttribute("type","table"),a.appendChild(s),this.feFuncG=s;var l=createNS("feFuncB");l.setAttribute("type","table"),a.appendChild(l),this.feFuncB=l,t.appendChild(a)}function SVGProLevelsFilter(t,e,r,n){this.filterManager=e;var i=this.filterManager.effectElements,a=createNS("feComponentTransfer");(i[10].p.k||0!==i[10].p.v||i[11].p.k||1!==i[11].p.v||i[12].p.k||1!==i[12].p.v||i[13].p.k||0!==i[13].p.v||i[14].p.k||1!==i[14].p.v)&&(this.feFuncR=this.createFeFunc("feFuncR",a)),(i[17].p.k||0!==i[17].p.v||i[18].p.k||1!==i[18].p.v||i[19].p.k||1!==i[19].p.v||i[20].p.k||0!==i[20].p.v||i[21].p.k||1!==i[21].p.v)&&(this.feFuncG=this.createFeFunc("feFuncG",a)),(i[24].p.k||0!==i[24].p.v||i[25].p.k||1!==i[25].p.v||i[26].p.k||1!==i[26].p.v||i[27].p.k||0!==i[27].p.v||i[28].p.k||1!==i[28].p.v)&&(this.feFuncB=this.createFeFunc("feFuncB",a)),(i[31].p.k||0!==i[31].p.v||i[32].p.k||1!==i[32].p.v||i[33].p.k||1!==i[33].p.v||i[34].p.k||0!==i[34].p.v||i[35].p.k||1!==i[35].p.v)&&(this.feFuncA=this.createFeFunc("feFuncA",a)),(this.feFuncR||this.feFuncG||this.feFuncB||this.feFuncA)&&(a.setAttribute("color-interpolation-filters","sRGB"),t.appendChild(a)),(i[3].p.k||0!==i[3].p.v||i[4].p.k||1!==i[4].p.v||i[5].p.k||1!==i[5].p.v||i[6].p.k||0!==i[6].p.v||i[7].p.k||1!==i[7].p.v)&&((a=createNS("feComponentTransfer")).setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("result",n),t.appendChild(a),this.feFuncRComposed=this.createFeFunc("feFuncR",a),this.feFuncGComposed=this.createFeFunc("feFuncG",a),this.feFuncBComposed=this.createFeFunc("feFuncB",a))}function SVGDropShadowEffect(t,e,r,n,i){var a=e.container.globalData.renderConfig.filterSize,o=e.data.fs||a;t.setAttribute("x",o.x||a.x),t.setAttribute("y",o.y||a.y),t.setAttribute("width",o.width||a.width),t.setAttribute("height",o.height||a.height),this.filterManager=e;var s=createNS("feGaussianBlur");s.setAttribute("in","SourceAlpha"),s.setAttribute("result",n+"_drop_shadow_1"),s.setAttribute("stdDeviation","0"),this.feGaussianBlur=s,t.appendChild(s);var l=createNS("feOffset");l.setAttribute("dx","25"),l.setAttribute("dy","0"),l.setAttribute("in",n+"_drop_shadow_1"),l.setAttribute("result",n+"_drop_shadow_2"),this.feOffset=l,t.appendChild(l);var c=createNS("feFlood");c.setAttribute("flood-color","#00ff00"),c.setAttribute("flood-opacity","1"),c.setAttribute("result",n+"_drop_shadow_3"),this.feFlood=c,t.appendChild(c);var u=createNS("feComposite");u.setAttribute("in",n+"_drop_shadow_3"),u.setAttribute("in2",n+"_drop_shadow_2"),u.setAttribute("operator","in"),u.setAttribute("result",n+"_drop_shadow_4"),t.appendChild(u);var h=this.createMergeNode(n,[n+"_drop_shadow_4",i]);t.appendChild(h)}extendPrototype([SVGComposableEffect],SVGTintFilter),SVGTintFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,n=this.filterManager.effectElements[2].p.v/100;this.linearFilter.setAttribute("values",linearFilterValue+" "+n+" 0"),this.matrixFilter.setAttribute("values",r[0]-e[0]+" 0 0 0 "+e[0]+" "+(r[1]-e[1])+" 0 0 0 "+e[1]+" "+(r[2]-e[2])+" 0 0 0 "+e[2]+" 0 0 0 1 0")}},SVGFillFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[2].p.v,r=this.filterManager.effectElements[6].p.v;this.matrixFilter.setAttribute("values","0 0 0 0 "+e[0]+" 0 0 0 0 "+e[1]+" 0 0 0 0 "+e[2]+" 0 0 0 "+r+" 0")}},SVGStrokeEffect.prototype.initialize=function(){var t,e,r,n,i=this.elem.layerElement.children||this.elem.layerElement.childNodes;for(1===this.filterManager.effectElements[1].p.v?(n=this.elem.maskManager.masksProperties.length,r=0):n=1+(r=this.filterManager.effectElements[0].p.v-1),(e=createNS("g")).setAttribute("fill","none"),e.setAttribute("stroke-linecap","round"),e.setAttribute("stroke-dashoffset",1);r<n;r+=1)t=createNS("path"),e.appendChild(t),this.paths.push({p:t,m:r});if(3===this.filterManager.effectElements[10].p.v){var a=createNS("mask"),o=createElementID();a.setAttribute("id",o),a.setAttribute("mask-type","alpha"),a.appendChild(e),this.elem.globalData.defs.appendChild(a);var s=createNS("g");for(s.setAttribute("mask","url("+getLocationHref()+"#"+o+")");i[0];)s.appendChild(i[0]);this.elem.layerElement.appendChild(s),this.masker=a,e.setAttribute("stroke","#fff")}else if(1===this.filterManager.effectElements[10].p.v||2===this.filterManager.effectElements[10].p.v){if(2===this.filterManager.effectElements[10].p.v)for(i=this.elem.layerElement.children||this.elem.layerElement.childNodes;i.length;)this.elem.layerElement.removeChild(i[0]);this.elem.layerElement.appendChild(e),this.elem.layerElement.removeAttribute("mask"),e.setAttribute("stroke","#fff")}this.initialized=!0,this.pathMasker=e},SVGStrokeEffect.prototype.renderFrame=function(t){var e;this.initialized||this.initialize();var r,n,i=this.paths.length;for(e=0;e<i;e+=1)if(-1!==this.paths[e].m&&(r=this.elem.maskManager.viewData[this.paths[e].m],n=this.paths[e].p,(t||this.filterManager._mdf||r.prop._mdf)&&n.setAttribute("d",r.lastPath),t||this.filterManager.effectElements[9].p._mdf||this.filterManager.effectElements[4].p._mdf||this.filterManager.effectElements[7].p._mdf||this.filterManager.effectElements[8].p._mdf||r.prop._mdf)){var a;if(0!==this.filterManager.effectElements[7].p.v||100!==this.filterManager.effectElements[8].p.v){var o=.01*Math.min(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v),s=.01*Math.max(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v),l=n.getTotalLength();a="0 0 0 "+l*o+" ";var c,u=l*(s-o),h=1+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v*.01,f=Math.floor(u/h);for(c=0;c<f;c+=1)a+="1 "+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v*.01+" ";a+="0 "+10*l+" 0 0"}else a="1 "+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v*.01;n.setAttribute("stroke-dasharray",a)}if((t||this.filterManager.effectElements[4].p._mdf)&&this.pathMasker.setAttribute("stroke-width",2*this.filterManager.effectElements[4].p.v),(t||this.filterManager.effectElements[6].p._mdf)&&this.pathMasker.setAttribute("opacity",this.filterManager.effectElements[6].p.v),(1===this.filterManager.effectElements[10].p.v||2===this.filterManager.effectElements[10].p.v)&&(t||this.filterManager.effectElements[3].p._mdf)){var p=this.filterManager.effectElements[3].p.v;this.pathMasker.setAttribute("stroke","rgb("+bmFloor(255*p[0])+","+bmFloor(255*p[1])+","+bmFloor(255*p[2])+")")}},SVGTritoneFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,n=this.filterManager.effectElements[2].p.v,i=n[0]+" "+r[0]+" "+e[0],a=n[1]+" "+r[1]+" "+e[1],o=n[2]+" "+r[2]+" "+e[2];this.feFuncR.setAttribute("tableValues",i),this.feFuncG.setAttribute("tableValues",a),this.feFuncB.setAttribute("tableValues",o)}},SVGProLevelsFilter.prototype.createFeFunc=function(t,e){var r=createNS(t);return r.setAttribute("type","table"),e.appendChild(r),r},SVGProLevelsFilter.prototype.getTableValue=function(t,e,r,n,i){for(var a,o,s=0,l=Math.min(t,e),c=Math.max(t,e),u=Array.call(null,{length:256}),h=0,f=i-n,p=e-t;s<=256;)o=(a=s/256)<=l?p<0?i:n:a>=c?p<0?n:i:n+f*Math.pow((a-t)/p,1/r),u[h]=o,h+=1,s+=256/255;return u.join(" ")},SVGProLevelsFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e,r=this.filterManager.effectElements;this.feFuncRComposed&&(t||r[3].p._mdf||r[4].p._mdf||r[5].p._mdf||r[6].p._mdf||r[7].p._mdf)&&(e=this.getTableValue(r[3].p.v,r[4].p.v,r[5].p.v,r[6].p.v,r[7].p.v),this.feFuncRComposed.setAttribute("tableValues",e),this.feFuncGComposed.setAttribute("tableValues",e),this.feFuncBComposed.setAttribute("tableValues",e)),this.feFuncR&&(t||r[10].p._mdf||r[11].p._mdf||r[12].p._mdf||r[13].p._mdf||r[14].p._mdf)&&(e=this.getTableValue(r[10].p.v,r[11].p.v,r[12].p.v,r[13].p.v,r[14].p.v),this.feFuncR.setAttribute("tableValues",e)),this.feFuncG&&(t||r[17].p._mdf||r[18].p._mdf||r[19].p._mdf||r[20].p._mdf||r[21].p._mdf)&&(e=this.getTableValue(r[17].p.v,r[18].p.v,r[19].p.v,r[20].p.v,r[21].p.v),this.feFuncG.setAttribute("tableValues",e)),this.feFuncB&&(t||r[24].p._mdf||r[25].p._mdf||r[26].p._mdf||r[27].p._mdf||r[28].p._mdf)&&(e=this.getTableValue(r[24].p.v,r[25].p.v,r[26].p.v,r[27].p.v,r[28].p.v),this.feFuncB.setAttribute("tableValues",e)),this.feFuncA&&(t||r[31].p._mdf||r[32].p._mdf||r[33].p._mdf||r[34].p._mdf||r[35].p._mdf)&&(e=this.getTableValue(r[31].p.v,r[32].p.v,r[33].p.v,r[34].p.v,r[35].p.v),this.feFuncA.setAttribute("tableValues",e))}},extendPrototype([SVGComposableEffect],SVGDropShadowEffect),SVGDropShadowEffect.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){if((t||this.filterManager.effectElements[4].p._mdf)&&this.feGaussianBlur.setAttribute("stdDeviation",this.filterManager.effectElements[4].p.v/4),t||this.filterManager.effectElements[0].p._mdf){var e=this.filterManager.effectElements[0].p.v;this.feFlood.setAttribute("flood-color",rgbToHex(Math.round(255*e[0]),Math.round(255*e[1]),Math.round(255*e[2])))}if((t||this.filterManager.effectElements[1].p._mdf)&&this.feFlood.setAttribute("flood-opacity",this.filterManager.effectElements[1].p.v/255),t||this.filterManager.effectElements[2].p._mdf||this.filterManager.effectElements[3].p._mdf){var r=this.filterManager.effectElements[3].p.v,n=(this.filterManager.effectElements[2].p.v-90)*degToRads,i=r*Math.cos(n),a=r*Math.sin(n);this.feOffset.setAttribute("dx",i),this.feOffset.setAttribute("dy",a)}}};var _svgMatteSymbols=[];function SVGMatte3Effect(t,e,r){this.initialized=!1,this.filterManager=e,this.filterElem=t,this.elem=r,r.matteElement=createNS("g"),r.matteElement.appendChild(r.layerElement),r.matteElement.appendChild(r.transformedElement),r.baseElement=r.matteElement}function SVGGaussianBlurEffect(t,e,r,n){t.setAttribute("x","-100%"),t.setAttribute("y","-100%"),t.setAttribute("width","300%"),t.setAttribute("height","300%"),this.filterManager=e;var i=createNS("feGaussianBlur");i.setAttribute("result",n),t.appendChild(i),this.feGaussianBlur=i}function TransformEffect(){}function SVGTransformEffect(t,e){this.init(e)}function CVTransformEffect(t){this.init(t)}return SVGMatte3Effect.prototype.findSymbol=function(t){for(var e=0,r=_svgMatteSymbols.length;e<r;){if(_svgMatteSymbols[e]===t)return _svgMatteSymbols[e];e+=1}return null},SVGMatte3Effect.prototype.replaceInParent=function(t,e){var r=t.layerElement.parentNode;if(r){for(var n,i=r.children,a=0,o=i.length;a<o&&i[a]!==t.layerElement;)a+=1;a<=o-2&&(n=i[a+1]);var s=createNS("use");s.setAttribute("href","#"+e),n?r.insertBefore(s,n):r.appendChild(s)}},SVGMatte3Effect.prototype.setElementAsMask=function(t,e){if(!this.findSymbol(e)){var r=createElementID(),n=createNS("mask");n.setAttribute("id",e.layerId),n.setAttribute("mask-type","alpha"),_svgMatteSymbols.push(e);var i=t.globalData.defs;i.appendChild(n);var a=createNS("symbol");a.setAttribute("id",r),this.replaceInParent(e,r),a.appendChild(e.layerElement),i.appendChild(a);var o=createNS("use");o.setAttribute("href","#"+r),n.appendChild(o),e.data.hd=!1,e.show()}t.setMatte(e.layerId)},SVGMatte3Effect.prototype.initialize=function(){for(var t=this.filterManager.effectElements[0].p.v,e=this.elem.comp.elements,r=0,n=e.length;r<n;)e[r]&&e[r].data.ind===t&&this.setElementAsMask(this.elem,e[r]),r+=1;this.initialized=!0},SVGMatte3Effect.prototype.renderFrame=function(){this.initialized||this.initialize()},SVGGaussianBlurEffect.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=.3*this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,n=3==r?0:e,i=2==r?0:e;this.feGaussianBlur.setAttribute("stdDeviation",n+" "+i);var a=1==this.filterManager.effectElements[2].p.v?"wrap":"duplicate";this.feGaussianBlur.setAttribute("edgeMode",a)}},TransformEffect.prototype.init=function(t){this.effectsManager=t,this.type=effectTypes.TRANSFORM_EFFECT,this.matrix=new Matrix,this.opacity=-1,this._mdf=!1,this._opMdf=!1},TransformEffect.prototype.renderFrame=function(t){if(this._opMdf=!1,this._mdf=!1,t||this.effectsManager._mdf){var e=this.effectsManager.effectElements,r=e[0].p.v,n=e[1].p.v,i=1===e[2].p.v,a=e[3].p.v,o=i?a:e[4].p.v,s=e[5].p.v,l=e[6].p.v,c=e[7].p.v;this.matrix.reset(),this.matrix.translate(-r[0],-r[1],r[2]),this.matrix.scale(.01*o,.01*a,1),this.matrix.rotate(-c*degToRads),this.matrix.skewFromAxis(-s*degToRads,(l+90)*degToRads),this.matrix.translate(n[0],n[1],0),this._mdf=!0,this.opacity!==e[8].p.v&&(this.opacity=e[8].p.v,this._opMdf=!0)}},extendPrototype([TransformEffect],SVGTransformEffect),extendPrototype([TransformEffect],CVTransformEffect),registerRenderer("canvas",CanvasRenderer),registerRenderer("html",HybridRenderer),registerRenderer("svg",SVGRenderer),ShapeModifiers.registerModifier("tm",TrimModifier),ShapeModifiers.registerModifier("pb",PuckerAndBloatModifier),ShapeModifiers.registerModifier("rp",RepeaterModifier),ShapeModifiers.registerModifier("rd",RoundCornersModifier),ShapeModifiers.registerModifier("zz",ZigZagModifier),ShapeModifiers.registerModifier("op",OffsetPathModifier),setExpressionsPlugin(Expressions),setExpressionInterfaces(getInterface),initialize$1(),initialize(),registerEffect$1(20,SVGTintFilter,!0),registerEffect$1(21,SVGFillFilter,!0),registerEffect$1(22,SVGStrokeEffect,!1),registerEffect$1(23,SVGTritoneFilter,!0),registerEffect$1(24,SVGProLevelsFilter,!0),registerEffect$1(25,SVGDropShadowEffect,!0),registerEffect$1(28,SVGMatte3Effect,!1),registerEffect$1(29,SVGGaussianBlurEffect,!0),registerEffect$1(35,SVGTransformEffect,!1),registerEffect(35,CVTransformEffect),lottie},module.exports=factory())},2694:(t,e,r)=>{var n=r(6925);function i(){}function a(){}a.resetWarningCache=i,t.exports=function(){function t(t,e,r,i,a,o){if(o!==n){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function e(){return t}t.isRequired=t;var r={array:t,bigint:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:a,resetWarningCache:i};return r.PropTypes=r,r}},5556:(t,e,r)=>{t.exports=r(2694)()},6925:t=>{t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},3049:(t,e,r)=>{var n=f(r(5505)),i=f(r(6007)),a=f(r(9506)),o=f(r(7588)),s=f(r(539)),l=f(r(7714)),c=f(r(1609)),u=f(r(5556)),h=f(r(9891));function f(t){return t&&t.__esModule?t:{default:t}}var p=function(t){function e(){var t,r,n,o;(0,a.default)(this,e);for(var l=arguments.length,c=Array(l),u=0;u<l;u++)c[u]=arguments[u];return r=n=(0,s.default)(this,(t=e.__proto__||(0,i.default)(e)).call.apply(t,[this].concat(c))),n.handleClickToPause=function(){n.anim.isPaused?n.anim.play():n.anim.pause()},o=r,(0,s.default)(n,o)}return(0,l.default)(e,t),(0,o.default)(e,[{key:"componentDidMount",value:function(){var t=this.props,e=t.options,r=t.eventListeners,i=e.loop,a=e.autoplay,o=e.animationData,s=e.rendererSettings,l=e.segments;this.options={container:this.el,renderer:"svg",loop:!1!==i,autoplay:!1!==a,segments:!1!==l,animationData:o,rendererSettings:s},this.options=(0,n.default)({},this.options,e),this.anim=h.default.loadAnimation(this.options),this.registerEvents(r)}},{key:"componentWillUpdate",value:function(t){this.options.animationData!==t.options.animationData&&(this.deRegisterEvents(this.props.eventListeners),this.destroy(),this.options=(0,n.default)({},this.options,t.options),this.anim=h.default.loadAnimation(this.options),this.registerEvents(t.eventListeners))}},{key:"componentDidUpdate",value:function(){this.props.isStopped?this.stop():this.props.segments?this.playSegments():this.play(),this.pause(),this.setSpeed(),this.setDirection()}},{key:"componentWillUnmount",value:function(){this.deRegisterEvents(this.props.eventListeners),this.destroy(),this.options.animationData=null,this.anim=null}},{key:"setSpeed",value:function(){this.anim.setSpeed(this.props.speed)}},{key:"setDirection",value:function(){this.anim.setDirection(this.props.direction)}},{key:"play",value:function(){this.anim.play()}},{key:"playSegments",value:function(){this.anim.playSegments(this.props.segments)}},{key:"stop",value:function(){this.anim.stop()}},{key:"pause",value:function(){(this.props.isPaused&&!this.anim.isPaused||!this.props.isPaused&&this.anim.isPaused)&&this.anim.pause()}},{key:"destroy",value:function(){this.anim.destroy()}},{key:"registerEvents",value:function(t){var e=this;t.forEach((function(t){e.anim.addEventListener(t.eventName,t.callback)}))}},{key:"deRegisterEvents",value:function(t){var e=this;t.forEach((function(t){e.anim.removeEventListener(t.eventName,t.callback)}))}},{key:"render",value:function(){var t=this,e=this.props,r=e.width,i=e.height,a=e.ariaRole,o=e.ariaLabel,s=e.isClickToPauseDisabled,l=e.title,u=function(t){return"number"==typeof t?t+"px":t||"100%"},h=(0,n.default)({width:u(r),height:u(i),overflow:"hidden",margin:"0 auto",outline:"none"},this.props.style),f=s?function(){return null}:this.handleClickToPause;return c.default.createElement("div",{ref:function(e){t.el=e},style:h,onClick:f,title:l,role:a,"aria-label":o,tabIndex:"0"})}}]),e}(c.default.Component);e.A=p,p.propTypes={eventListeners:u.default.arrayOf(u.default.object),options:u.default.object.isRequired,height:u.default.oneOfType([u.default.string,u.default.number]),width:u.default.oneOfType([u.default.string,u.default.number]),isStopped:u.default.bool,isPaused:u.default.bool,speed:u.default.number,segments:u.default.arrayOf(u.default.number),direction:u.default.number,ariaRole:u.default.string,ariaLabel:u.default.string,isClickToPauseDisabled:u.default.bool,title:u.default.string,style:u.default.string},p.defaultProps={eventListeners:[],isStopped:!1,isPaused:!1,speed:1,ariaRole:"button",ariaLabel:"animation",isClickToPauseDisabled:!1,title:""}},1609:t=>{t.exports=window.React}},__webpack_module_cache__={};function __webpack_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var r=__webpack_module_cache__[t]={exports:{}};return __webpack_modules__[t].call(r.exports,r,r.exports,__webpack_require__),r.exports}__webpack_require__.amdO={},__webpack_require__.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(e,{a:e}),e},__webpack_require__.d=(t,e)=>{for(var r in e)__webpack_require__.o(e,r)&&!__webpack_require__.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},__webpack_require__.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),__webpack_require__.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var __webpack_exports__={};(()=>{__webpack_require__.d(__webpack_exports__,{A:()=>Es});const t=window.ReactDOM;var e=__webpack_require__.n(t),r=__webpack_require__(1609),n=__webpack_require__.n(r);const i=window.Blueprint.Core,a=window.Blueprint.Select;function o(){return o=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},o.apply(this,arguments)}function s(t){var e=Object.create(null);return function(r){return void 0===e[r]&&(e[r]=t(r)),e[r]}}var l=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,c=s((function(t){return l.test(t)||111===t.charCodeAt(0)&&110===t.charCodeAt(1)&&t.charCodeAt(2)<91})),u=function(){function t(t){var e=this;this._insertTag=function(t){var r;r=0===e.tags.length?e.insertionPoint?e.insertionPoint.nextSibling:e.prepend?e.container.firstChild:e.before:e.tags[e.tags.length-1].nextSibling,e.container.insertBefore(t,r),e.tags.push(t)},this.isSpeedy=void 0===t.speedy||t.speedy,this.tags=[],this.ctr=0,this.nonce=t.nonce,this.key=t.key,this.container=t.container,this.prepend=t.prepend,this.insertionPoint=t.insertionPoint,this.before=null}var e=t.prototype;return e.hydrate=function(t){t.forEach(this._insertTag)},e.insert=function(t){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(t){var e=document.createElement("style");return e.setAttribute("data-emotion",t.key),void 0!==t.nonce&&e.setAttribute("nonce",t.nonce),e.appendChild(document.createTextNode("")),e.setAttribute("data-s",""),e}(this));var e=this.tags[this.tags.length-1];if(this.isSpeedy){var r=function(t){if(t.sheet)return t.sheet;for(var e=0;e<document.styleSheets.length;e++)if(document.styleSheets[e].ownerNode===t)return document.styleSheets[e]}(e);try{r.insertRule(t,r.cssRules.length)}catch(t){}}else e.appendChild(document.createTextNode(t));this.ctr++},e.flush=function(){this.tags.forEach((function(t){return t.parentNode&&t.parentNode.removeChild(t)})),this.tags=[],this.ctr=0},t}(),h=Math.abs,f=String.fromCharCode,p=Object.assign;function d(t){return t.trim()}function m(t,e,r){return t.replace(e,r)}function y(t,e){return t.indexOf(e)}function v(t,e){return 0|t.charCodeAt(e)}function g(t,e,r){return t.slice(e,r)}function b(t){return t.length}function x(t){return t.length}function w(t,e){return e.push(t),t}var E=1,k=1,S=0,_=0,P=0,C="";function A(t,e,r,n,i,a,o){return{value:t,root:e,parent:r,type:n,props:i,children:a,line:E,column:k,length:o,return:""}}function T(t,e){return p(A("",null,null,"",null,null,0),t,{length:-t.length},e)}function M(){return P=_>0?v(C,--_):0,k--,10===P&&(k=1,E--),P}function D(){return P=_<S?v(C,_++):0,k++,10===P&&(k=1,E++),P}function L(){return v(C,_)}function O(){return _}function F(t,e){return g(C,t,e)}function I(t){switch(t){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function j(t){return E=k=1,S=b(C=t),_=0,[]}function N(t){return C="",t}function B(t){return d(F(_-1,V(91===t?t+2:40===t?t+1:t)))}function R(t){for(;(P=L())&&P<33;)D();return I(t)>2||I(P)>3?"":" "}function G(t,e){for(;--e&&D()&&!(P<48||P>102||P>57&&P<65||P>70&&P<97););return F(t,O()+(e<6&&32==L()&&32==D()))}function V(t){for(;D();)switch(P){case t:return _;case 34:case 39:34!==t&&39!==t&&V(P);break;case 40:41===t&&V(t);break;case 92:D()}return _}function z(t,e){for(;D()&&t+P!==57&&(t+P!==84||47!==L()););return"/*"+F(e,_-1)+"*"+f(47===t?t:D())}function H(t){for(;!I(L());)D();return F(t,_)}var $="-ms-",U="-moz-",q="-webkit-",W="comm",Y="rule",X="decl",Z="@keyframes";function J(t,e){for(var r="",n=x(t),i=0;i<n;i++)r+=e(t[i],i,t,e)||"";return r}function K(t,e,r,n){switch(t.type){case"@layer":if(t.children.length)break;case"@import":case X:return t.return=t.return||t.value;case W:return"";case Z:return t.return=t.value+"{"+J(t.children,n)+"}";case Y:t.value=t.props.join(",")}return b(r=J(t.children,n))?t.return=t.value+"{"+r+"}":""}function Q(t){return N(tt("",null,null,null,[""],t=j(t),0,[0],t))}function tt(t,e,r,n,i,a,o,s,l){for(var c=0,u=0,h=o,p=0,d=0,g=0,x=1,E=1,k=1,S=0,_="",P=i,C=a,A=n,T=_;E;)switch(g=S,S=D()){case 40:if(108!=g&&58==v(T,h-1)){-1!=y(T+=m(B(S),"&","&\f"),"&\f")&&(k=-1);break}case 34:case 39:case 91:T+=B(S);break;case 9:case 10:case 13:case 32:T+=R(g);break;case 92:T+=G(O()-1,7);continue;case 47:switch(L()){case 42:case 47:w(rt(z(D(),O()),e,r),l);break;default:T+="/"}break;case 123*x:s[c++]=b(T)*k;case 125*x:case 59:case 0:switch(S){case 0:case 125:E=0;case 59+u:-1==k&&(T=m(T,/\f/g,"")),d>0&&b(T)-h&&w(d>32?nt(T+";",n,r,h-1):nt(m(T," ","")+";",n,r,h-2),l);break;case 59:T+=";";default:if(w(A=et(T,e,r,c,u,i,s,_,P=[],C=[],h),a),123===S)if(0===u)tt(T,e,A,A,P,a,h,s,C);else switch(99===p&&110===v(T,3)?100:p){case 100:case 108:case 109:case 115:tt(t,A,A,n&&w(et(t,A,A,0,0,i,s,_,i,P=[],h),C),i,C,h,s,n?P:C);break;default:tt(T,A,A,A,[""],C,0,s,C)}}c=u=d=0,x=k=1,_=T="",h=o;break;case 58:h=1+b(T),d=g;default:if(x<1)if(123==S)--x;else if(125==S&&0==x++&&125==M())continue;switch(T+=f(S),S*x){case 38:k=u>0?1:(T+="\f",-1);break;case 44:s[c++]=(b(T)-1)*k,k=1;break;case 64:45===L()&&(T+=B(D())),p=L(),u=h=b(_=T+=H(O())),S++;break;case 45:45===g&&2==b(T)&&(x=0)}}return a}function et(t,e,r,n,i,a,o,s,l,c,u){for(var f=i-1,p=0===i?a:[""],y=x(p),v=0,b=0,w=0;v<n;++v)for(var E=0,k=g(t,f+1,f=h(b=o[v])),S=t;E<y;++E)(S=d(b>0?p[E]+" "+k:m(k,/&\f/g,p[E])))&&(l[w++]=S);return A(t,e,r,0===i?Y:s,l,c,u)}function rt(t,e,r){return A(t,e,r,W,f(P),g(t,2,-2),0)}function nt(t,e,r,n){return A(t,e,r,X,g(t,0,n),g(t,n+1,-1),n)}var it=function(t,e,r){for(var n=0,i=0;n=i,i=L(),38===n&&12===i&&(e[r]=1),!I(i);)D();return F(t,_)},at=new WeakMap,ot=function(t){if("rule"===t.type&&t.parent&&!(t.length<1)){for(var e=t.value,r=t.parent,n=t.column===r.column&&t.line===r.line;"rule"!==r.type;)if(!(r=r.parent))return;if((1!==t.props.length||58===e.charCodeAt(0)||at.get(r))&&!n){at.set(t,!0);for(var i=[],a=function(t,e){return N(function(t,e){var r=-1,n=44;do{switch(I(n)){case 0:38===n&&12===L()&&(e[r]=1),t[r]+=it(_-1,e,r);break;case 2:t[r]+=B(n);break;case 4:if(44===n){t[++r]=58===L()?"&\f":"",e[r]=t[r].length;break}default:t[r]+=f(n)}}while(n=D());return t}(j(t),e))}(e,i),o=r.props,s=0,l=0;s<a.length;s++)for(var c=0;c<o.length;c++,l++)t.props[l]=i[s]?a[s].replace(/&\f/g,o[c]):o[c]+" "+a[s]}}},st=function(t){if("decl"===t.type){var e=t.value;108===e.charCodeAt(0)&&98===e.charCodeAt(2)&&(t.return="",t.value="")}};function lt(t,e){switch(function(t,e){return 45^v(t,0)?(((e<<2^v(t,0))<<2^v(t,1))<<2^v(t,2))<<2^v(t,3):0}(t,e)){case 5103:return q+"print-"+t+t;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return q+t+t;case 5349:case 4246:case 4810:case 6968:case 2756:return q+t+U+t+$+t+t;case 6828:case 4268:return q+t+$+t+t;case 6165:return q+t+$+"flex-"+t+t;case 5187:return q+t+m(t,/(\w+).+(:[^]+)/,q+"box-$1$2"+$+"flex-$1$2")+t;case 5443:return q+t+$+"flex-item-"+m(t,/flex-|-self/,"")+t;case 4675:return q+t+$+"flex-line-pack"+m(t,/align-content|flex-|-self/,"")+t;case 5548:return q+t+$+m(t,"shrink","negative")+t;case 5292:return q+t+$+m(t,"basis","preferred-size")+t;case 6060:return q+"box-"+m(t,"-grow","")+q+t+$+m(t,"grow","positive")+t;case 4554:return q+m(t,/([^-])(transform)/g,"$1"+q+"$2")+t;case 6187:return m(m(m(t,/(zoom-|grab)/,q+"$1"),/(image-set)/,q+"$1"),t,"")+t;case 5495:case 3959:return m(t,/(image-set\([^]*)/,q+"$1$`$1");case 4968:return m(m(t,/(.+:)(flex-)?(.*)/,q+"box-pack:$3"+$+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+q+t+t;case 4095:case 3583:case 4068:case 2532:return m(t,/(.+)-inline(.+)/,q+"$1$2")+t;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(b(t)-1-e>6)switch(v(t,e+1)){case 109:if(45!==v(t,e+4))break;case 102:return m(t,/(.+:)(.+)-([^]+)/,"$1"+q+"$2-$3$1"+U+(108==v(t,e+3)?"$3":"$2-$3"))+t;case 115:return~y(t,"stretch")?lt(m(t,"stretch","fill-available"),e)+t:t}break;case 4949:if(115!==v(t,e+1))break;case 6444:switch(v(t,b(t)-3-(~y(t,"!important")&&10))){case 107:return m(t,":",":"+q)+t;case 101:return m(t,/(.+:)([^;!]+)(;|!.+)?/,"$1"+q+(45===v(t,14)?"inline-":"")+"box$3$1"+q+"$2$3$1"+$+"$2box$3")+t}break;case 5936:switch(v(t,e+11)){case 114:return q+t+$+m(t,/[svh]\w+-[tblr]{2}/,"tb")+t;case 108:return q+t+$+m(t,/[svh]\w+-[tblr]{2}/,"tb-rl")+t;case 45:return q+t+$+m(t,/[svh]\w+-[tblr]{2}/,"lr")+t}return q+t+$+t+t}return t}var ct=[function(t,e,r,n){if(t.length>-1&&!t.return)switch(t.type){case X:t.return=lt(t.value,t.length);break;case Z:return J([T(t,{value:m(t.value,"@","@"+q)})],n);case Y:if(t.length)return function(t,e){return t.map(e).join("")}(t.props,(function(e){switch(function(t,e){return(t=/(::plac\w+|:read-\w+)/.exec(t))?t[0]:t}(e)){case":read-only":case":read-write":return J([T(t,{props:[m(e,/:(read-\w+)/,":-moz-$1")]})],n);case"::placeholder":return J([T(t,{props:[m(e,/:(plac\w+)/,":"+q+"input-$1")]}),T(t,{props:[m(e,/:(plac\w+)/,":-moz-$1")]}),T(t,{props:[m(e,/:(plac\w+)/,$+"input-$1")]})],n)}return""}))}}],ut=function(t){var e=t.key;if("css"===e){var r=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(r,(function(t){-1!==t.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(t),t.setAttribute("data-s",""))}))}var n,i,a=t.stylisPlugins||ct,o={},s=[];n=t.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+e+' "]'),(function(t){for(var e=t.getAttribute("data-emotion").split(" "),r=1;r<e.length;r++)o[e[r]]=!0;s.push(t)}));var l,c,h,f,p=[K,(f=function(t){l.insert(t)},function(t){t.root||(t=t.return)&&f(t)})],d=(c=[ot,st].concat(a,p),h=x(c),function(t,e,r,n){for(var i="",a=0;a<h;a++)i+=c[a](t,e,r,n)||"";return i});i=function(t,e,r,n){l=r,J(Q(t?t+"{"+e.styles+"}":e.styles),d),n&&(m.inserted[e.name]=!0)};var m={key:e,sheet:new u({key:e,container:n,nonce:t.nonce,speedy:t.speedy,prepend:t.prepend,insertionPoint:t.insertionPoint}),nonce:t.nonce,inserted:o,registered:{},insert:i};return m.sheet.hydrate(s),m},ht={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},ft=/[A-Z]|^ms/g,pt=/_EMO_([^_]+?)_([^]*?)_EMO_/g,dt=function(t){return 45===t.charCodeAt(1)},mt=function(t){return null!=t&&"boolean"!=typeof t},yt=s((function(t){return dt(t)?t:t.replace(ft,"-$&").toLowerCase()})),vt=function(t,e){switch(t){case"animation":case"animationName":if("string"==typeof e)return e.replace(pt,(function(t,e,r){return bt={name:e,styles:r,next:bt},e}))}return 1===ht[t]||dt(t)||"number"!=typeof e||0===e?e:e+"px"};function gt(t,e,r){if(null==r)return"";if(void 0!==r.__emotion_styles)return r;switch(typeof r){case"boolean":return"";case"object":if(1===r.anim)return bt={name:r.name,styles:r.styles,next:bt},r.name;if(void 0!==r.styles){var n=r.next;if(void 0!==n)for(;void 0!==n;)bt={name:n.name,styles:n.styles,next:bt},n=n.next;return r.styles+";"}return function(t,e,r){var n="";if(Array.isArray(r))for(var i=0;i<r.length;i++)n+=gt(t,e,r[i])+";";else for(var a in r){var o=r[a];if("object"!=typeof o)null!=e&&void 0!==e[o]?n+=a+"{"+e[o]+"}":mt(o)&&(n+=yt(a)+":"+vt(a,o)+";");else if(!Array.isArray(o)||"string"!=typeof o[0]||null!=e&&void 0!==e[o[0]]){var s=gt(t,e,o);switch(a){case"animation":case"animationName":n+=yt(a)+":"+s+";";break;default:n+=a+"{"+s+"}"}}else for(var l=0;l<o.length;l++)mt(o[l])&&(n+=yt(a)+":"+vt(a,o[l])+";")}return n}(t,e,r);case"function":if(void 0!==t){var i=bt,a=r(t);return bt=i,gt(t,e,a)}}if(null==e)return r;var o=e[r];return void 0!==o?o:r}var bt,xt=/label:\s*([^\s;\n{]+)\s*(;|$)/g,wt=!!r.useInsertionEffect&&r.useInsertionEffect,Et=wt||function(t){return t()},kt=(wt||r.useLayoutEffect,r.createContext("undefined"!=typeof HTMLElement?ut({key:"css"}):null));kt.Provider;var St=r.createContext({}),_t=function(t,e,r){var n=t.key+"-"+e.name;!1===r&&void 0===t.registered[n]&&(t.registered[n]=e.styles)},Pt=c,Ct=function(t){return"theme"!==t},At=function(t){return"string"==typeof t&&t.charCodeAt(0)>96?Pt:Ct},Tt=function(t,e,r){var n;if(e){var i=e.shouldForwardProp;n=t.__emotion_forwardProp&&i?function(e){return t.__emotion_forwardProp(e)&&i(e)}:i}return"function"!=typeof n&&r&&(n=t.__emotion_forwardProp),n},Mt=function(t){var e=t.cache,r=t.serialized,n=t.isStringTag;return _t(e,r,n),Et((function(){return function(t,e,r){_t(t,e,r);var n=t.key+"-"+e.name;if(void 0===t.inserted[e.name]){var i=e;do{t.insert(e===i?"."+n:"",i,t.sheet,!0),i=i.next}while(void 0!==i)}}(e,r,n)})),null},Dt=function t(e,n){var i,a,s=e.__emotion_real===e,l=s&&e.__emotion_base||e;void 0!==n&&(i=n.label,a=n.target);var c=Tt(e,n,s),u=c||At(l),h=!u("as");return function(){var f=arguments,p=s&&void 0!==e.__emotion_styles?e.__emotion_styles.slice(0):[];if(void 0!==i&&p.push("label:"+i+";"),null==f[0]||void 0===f[0].raw)p.push.apply(p,f);else{p.push(f[0][0]);for(var d=f.length,m=1;m<d;m++)p.push(f[m],f[0][m])}var y,v=(y=function(t,e,n){var i,o,s,f,d=h&&t.as||l,m="",y=[],v=t;if(null==t.theme){for(var g in v={},t)v[g]=t[g];v.theme=r.useContext(St)}"string"==typeof t.className?(i=e.registered,o=y,s=t.className,f="",s.split(" ").forEach((function(t){void 0!==i[t]?o.push(i[t]+";"):f+=t+" "})),m=f):null!=t.className&&(m=t.className+" ");var b=function(t,e,r){if(1===t.length&&"object"==typeof t[0]&&null!==t[0]&&void 0!==t[0].styles)return t[0];var n=!0,i="";bt=void 0;var a=t[0];null==a||void 0===a.raw?(n=!1,i+=gt(r,e,a)):i+=a[0];for(var o=1;o<t.length;o++)i+=gt(r,e,t[o]),n&&(i+=a[o]);xt.lastIndex=0;for(var s,l="";null!==(s=xt.exec(i));)l+="-"+s[1];var c=function(t){for(var e,r=0,n=0,i=t.length;i>=4;++n,i-=4)e=1540483477*(65535&(e=255&t.charCodeAt(n)|(255&t.charCodeAt(++n))<<8|(255&t.charCodeAt(++n))<<16|(255&t.charCodeAt(++n))<<24))+(59797*(e>>>16)<<16),r=1540483477*(65535&(e^=e>>>24))+(59797*(e>>>16)<<16)^1540483477*(65535&r)+(59797*(r>>>16)<<16);switch(i){case 3:r^=(255&t.charCodeAt(n+2))<<16;case 2:r^=(255&t.charCodeAt(n+1))<<8;case 1:r=1540483477*(65535&(r^=255&t.charCodeAt(n)))+(59797*(r>>>16)<<16)}return(((r=1540483477*(65535&(r^=r>>>13))+(59797*(r>>>16)<<16))^r>>>15)>>>0).toString(36)}(i)+l;return{name:c,styles:i,next:bt}}(p.concat(y),e.registered,v);m+=e.key+"-"+b.name,void 0!==a&&(m+=" "+a);var x=h&&void 0===c?At(d):u,w={};for(var E in t)h&&"as"===E||x(E)&&(w[E]=t[E]);return w.className=m,w.ref=n,r.createElement(r.Fragment,null,r.createElement(Mt,{cache:e,serialized:b,isStringTag:"string"==typeof d}),r.createElement(d,w))},(0,r.forwardRef)((function(t,e){var n=(0,r.useContext)(kt);return y(t,n,e)})));return v.displayName=void 0!==i?i:"Styled("+("string"==typeof l?l:l.displayName||l.name||"Component")+")",v.defaultProps=e.defaultProps,v.__emotion_real=v,v.__emotion_base=l,v.__emotion_styles=p,v.__emotion_forwardProp=c,Object.defineProperty(v,"toString",{value:function(){return"."+a}}),v.withComponent=function(e,r){return t(e,o({},n,r,{shouldForwardProp:Tt(v,r,!0)})).apply(void 0,p)},v}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(t){Dt[t]=Dt(t)}));var Lt=__webpack_require__(1828),Ot=__webpack_require__(8825);function Ft(t){return Ft="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ft(t)}function It(){It=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Ft(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Ft(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function jt(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Nt(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){jt(a,n,i,o,s,"next",t)}function s(t){jt(a,n,i,o,s,"throw",t)}o(void 0)}))}}var Bt=function(){var t=Nt(It().mark((function t(e){var r,n,i,a,o,s,l,c,u,h;return It().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.dataPageTitle,n=e.data,i=e.selectedTag,t.next=3,(0,Ut.j$)(r);case 3:return t.next=5,(0,Ut.Lv)(r,"cache",-1,{open:!1,heading:3});case 5:return a=t.sent,t.next=8,(0,Ut.$v)(a,"[[".concat(i,"]]"),-1,{open:!1});case 8:o=t.sent,s=0,l=Object.keys(n);case 10:if(!(s<l.length)){t.next=25;break}return c=l[s],t.next=14,(0,Ut.eo)(o,"".concat(c,"::"),{exactMatch:!1});case 14:if(!(u=t.sent)){t.next=18;break}return t.next=18,window.roamAlphaAPI.deleteBlock({block:{uid:u}});case 18:return h=n[c],Ot.$P(h)&&(h=Lt.wF(h)),t.next=22,(0,Ut.Q6)(o,"".concat(c,":: ").concat(h),-1);case 22:s++,t.next=10;break;case 25:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),Rt=function(){var t=Nt(It().mark((function t(e){var r,n,i,a,o,s;return It().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.dataPageTitle,n=e.selectedTag,i=e.toDeleteKeyId,t.next=3,(0,Ut.j$)(r);case 3:return t.next=5,(0,Ut.Lv)(r,"cache",-1,{open:!1,heading:3});case 5:return a=t.sent,t.next=8,(0,Ut.$v)(a,"[[".concat(n,"]]"),-1,{open:!1});case 8:return o=t.sent,t.next=11,(0,Ut.eo)(o,"".concat(i,"::"),{exactMatch:!1});case 11:if(!(s=t.sent)){t.next=15;break}return t.next=15,window.roamAlphaAPI.deleteBlock({block:{uid:s}});case 15:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),Gt=__webpack_require__(1614),Vt=function(t){return JSON.parse(JSON.stringify(t))},zt=function(t){return t.Finished="finished",t.Partial="partial",t.Unstarted="unstarted",t}({}),Ht=function(t){return t.Normal="normal",t.AnswerFirst="answerFirst",t}({}),$t={tags:{},combinedToday:{status:zt.Unstarted,due:0,new:0,dueUids:[],newUids:[],completed:0,completedUids:[],completedDue:0,completedDueUids:[],completedNew:0,completedNewUids:[]}},Ut=__webpack_require__(5729);function qt(t){return qt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},qt(t)}function Wt(t){return function(t){if(Array.isArray(t))return te(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||Qt(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Yt(){Yt=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==qt(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(qt(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Xt(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Zt(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Xt(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=qt(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=qt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==qt(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Xt(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Jt(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Kt(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=Qt(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){s=!0,a=t},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw a}}}}function Qt(t,e){if(t){if("string"==typeof t)return te(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?te(t,e):void 0}}function te(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var ee=function(t){var e,r=t.tagsList,n=t.cachedData,i=Vt($t),a=Kt(r);try{for(a.s();!(e=a.n()).done;){var o=e.value,s=null==n?void 0:n[o];i.tags[o]={status:zt.Unstarted,completed:0,due:0,new:0,newUids:[],dueUids:[],completedUids:[],completedDue:0,completedNew:0,completedDueUids:[],completedNewUids:[],renderMode:(null==s?void 0:s.renderMode)||Ht.Normal}}}catch(t){a.e(t)}finally{a.f()}return i},re=function(t){var e,r=t.today,n=Kt(t.tagsList);try{for(n.s();!(e=n.n()).done;){var i=e.value,a=r.tags[i].completed,o=r.tags[i].new+r.tags[i].due;r.tags[i].status=0===o?zt.Finished:a>0?zt.Partial:zt.Unstarted}}catch(t){n.e(t)}finally{n.f()}var s=r.combinedToday.completed,l=r.combinedToday.new+r.combinedToday.due;r.combinedToday.status=0===l?zt.Finished:s>0?zt.Partial:zt.Unstarted},ne=function(){var t,e=(t=Yt().mark((function t(e){var r,n,i,a,o,s;return Yt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=e.today,n=e.tagsList,i=e.sessionData,a=Kt(n),t.prev=2,s=Yt().mark((function t(){var e,n,a,s,l,c;return Yt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e=o.value,n=0,a=[],s=[],l=[],c=i[e],Object.keys(c).forEach((function(t){var e=c[t],r=e[e.length-1];if(r&&Ot.ro(r.dateCreated,new Date)){var i=1===e.length,o=!i,u=i;n++,a.push(t),o&&s.push(t),u&&l.push(t)}})),r.tags[e]=Zt(Zt({},r.tags[e]||{}),{},{completed:n,completedUids:a,completedDueUids:s,completedNewUids:l,completedDue:s.length,completedNew:l.length});case 8:case"end":return t.stop()}}),t)})),a.s();case 5:if((o=a.n()).done){t.next=9;break}return t.delegateYield(s(),"t0",7);case 7:t.next=5;break;case 9:t.next=14;break;case 11:t.prev=11,t.t1=t.catch(2),a.e(t.t1);case 14:return t.prev=14,a.f(),t.finish(14);case 17:return t.abrupt("return",r);case 18:case"end":return t.stop()}}),t,null,[[2,11,14,17]])})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Jt(a,n,i,o,s,"next",t)}function s(t){Jt(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(t){return e.apply(this,arguments)}}(),ie=function(t){var e=t.today,r=t.tagsList,n=Vt($t);e.combinedToday=n.combinedToday;var i,a=Kt(r);try{for(a.s();!(i=a.n()).done;){var o=i.value;e.combinedToday.due+=e.tags[o].due,e.combinedToday.new+=e.tags[o].new,e.combinedToday.dueUids=e.combinedToday.dueUids.concat(e.tags[o].dueUids),e.combinedToday.newUids=e.combinedToday.newUids.concat(e.tags[o].newUids),e.combinedToday.completed+=e.tags[o].completed,e.combinedToday.completedUids=e.combinedToday.completedUids.concat(e.tags[o].completedUids),e.combinedToday.completedDue+=e.tags[o].completedDue,e.combinedToday.completedDueUids=e.combinedToday.completedDueUids.concat(e.tags[o].completedDueUids),e.combinedToday.completedNew+=e.tags[o].completedNew,e.combinedToday.completedNewUids=e.combinedToday.completedNewUids.concat(e.tags[o].completedNewUids)}}catch(t){a.e(t)}finally{a.f()}e.combinedToday.dueUids=Wt(new Set(e.combinedToday.dueUids)),e.combinedToday.newUids=Wt(new Set(e.combinedToday.newUids)),e.combinedToday.completedUids=Wt(new Set(e.combinedToday.completedUids)),e.combinedToday.completedDueUids=Wt(new Set(e.combinedToday.completedDueUids)),e.combinedToday.completedNewUids=Wt(new Set(e.combinedToday.completedNewUids)),e.combinedToday.due=e.combinedToday.dueUids.length,e.combinedToday.new=e.combinedToday.newUids.length,e.combinedToday.completed=e.combinedToday.completedUids.length,e.combinedToday.completedDue=e.combinedToday.completedDueUids.length,e.combinedToday.completedNew=e.combinedToday.completedNewUids.length},ae=function(t){var e,r=t.today,n=t.tagsList,i=t.cardUids,a=t.pluginPageData,o=t.priorityOrder,s=oe(void 0===o?[]:o),l=Kt(n);try{var c=function(){var t=e.value,n=i[t],o=[];if(n.forEach((function(t){a[t]&&a[t].length||(o.push(t),a[t]=[(0,Ut.cb)()])})),s){var l=function(t){var e;return null!==(e=s.get(t))&&void 0!==e?e:Number.MAX_SAFE_INTEGER};o.sort((function(t,e){return l(t)-l(e)}))}r.tags[t]=Zt(Zt({},r.tags[t]),{},{newUids:o,new:o.length})};for(l.s();!(e=l.n()).done;)c()}catch(t){l.e(t)}finally{l.f()}},oe=function(t){if(!t||0===t.length)return null;var e=new Map;return t.forEach((function(t,r){return e.set(t,r)})),e},se=function(t){var e,r=t.today,n=t.tagsList,i=t.sessionData,a=t.isCramming,o=t.priorityOrder,s=void 0===o?[]:o,l=oe(s),c=Kt(n);try{var u=function(){var t=e.value,n=function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],n=[];if(!Object.keys(t).length)return n;var i=oe(r),a=new Date;if(Object.keys(t).forEach((function(r){var i=t[r],o=i[i.length-1];if(o){var s=o.nextDueDate;(e||s&&s<=a)&&n.push(r)}})),i){var o=function(t){var e;return null!==(e=i.get(t))&&void 0!==e?e:Number.MAX_SAFE_INTEGER};n.sort((function(t,e){return o(t)-o(e)}))}return n}(i[t],a,s);if(l){var o=function(t){var e;return null!==(e=l.get(t))&&void 0!==e?e:Number.MAX_SAFE_INTEGER};n.sort((function(t,e){return o(t)-o(e)}))}r.tags[t]=Zt(Zt({},r.tags[t]),{},{dueUids:n,due:n.length})};for(c.s();!(e=c.n()).done;)u()}catch(t){c.e(t)}finally{c.f()}},le=__webpack_require__(3435);function ce(t){return ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ce(t)}function ue(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||fe(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function he(t){return function(t){if(Array.isArray(t))return pe(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||fe(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function fe(t,e){if(t){if("string"==typeof t)return pe(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?pe(t,e):void 0}}function pe(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function de(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,me(n.key),n)}}function me(t){var e=function(t,e){if("object"!=ce(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=ce(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==ce(e)?e:String(e)}var ye=function(){function t(){var e,r,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),e=this,(r=me(r="isDirty"))in e?Object.defineProperty(e,r,{value:false,enumerable:!0,configurable:!0,writable:!0}):e[r]=false,this.order=he(n)}var e,r,n;return e=t,r=[{key:"getSortedUids",value:function(){return he(this.order)}},{key:"insert",value:function(t,e){this.remove(t);var r=e?this.order.indexOf(e):-1;-1===r?this.order.push(t):this.order.splice(r,0,t),this.isDirty=!0}},{key:"moveTo",value:function(t,e){this.remove(t);var r=Math.max(0,Math.min(this.order.length,e));this.order.splice(r,0,t),this.isDirty=!0}},{key:"moveCard",value:function(t,e){this.moveTo(t,e)}},{key:"remove",value:function(t){var e=this.order.indexOf(t);-1!==e&&(this.order.splice(e,1),this.isDirty=!0)}},{key:"getIndex",value:function(t){return this.order.indexOf(t)}},{key:"getUidAt",value:function(t){return this.order[t]}},{key:"serialize",value:function(){return he(this.order)}},{key:"addMissing",value:function(t){var e;if(0!==t.length){var r=new Set(this.order),n=t.filter((function(t){return!r.has(t)}));(e=this.order).push.apply(e,he(n))}}},{key:"cleanup",value:function(t){var e=new Set(t);this.order=this.order.filter((function(t){return e.has(t)}))}},{key:"removeOrphanedUids",value:function(t){var e=new Set(t);this.order=this.order.filter((function(t){return!e.has(t)}))}},{key:"getCount",value:function(){return this.order.length}},{key:"has",value:function(t){return this.order.includes(t)}},{key:"moveToTop",value:function(t){this.moveTo(t,0)}},{key:"moveToBottom",value:function(t){this.moveTo(t,this.order.length)}},{key:"batchMove",value:function(t){var e=t.sort((function(t,e){return t.newIndex-e.newIndex})),r=new Set(e.map((function(t){return t.uid})));this.order=this.order.filter((function(t){return!r.has(t)}));var n,i=function(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=fe(t))){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){s=!0,a=t},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw a}}}}(e);try{for(i.s();!(n=i.n()).done;){var a=n.value,o=a.uid,s=a.newIndex,l=Math.max(0,Math.min(this.order.length,s));this.order.splice(l,0,o)}}catch(t){i.e(t)}finally{i.f()}this.isDirty=!0}},{key:"getCardPosition",value:function(t){var e=this.order.indexOf(t);return-1===e?this.order.length:e+1}},{key:"hasUnsavedChanges",value:function(){return this.isDirty}},{key:"markAsSaved",value:function(){this.isDirty=!1}},{key:"getDeckPositions",value:function(t){var e=this,r=[];return Object.entries(t).forEach((function(t){var n=ue(t,2),i=n[0],a=n[1];if(a.length>0){var o=e.order.findIndex((function(t){return a.includes(t)}));r.push({deckName:i,position:-1===o?e.order.length:o+1,cardCount:a.length})}})),r.sort((function(t,e){return t.position-e.position}))}},{key:"setOrder",value:function(t){this.order=he(t),this.isDirty=!0}},{key:"addCards",value:function(t){var e,r=new Set(this.order),n=t.filter((function(t){return!r.has(t)}));n.length>0&&((e=this.order).push.apply(e,he(n)),this.isDirty=!0)}},{key:"removeCards",value:function(t){var e=new Set(t),r=this.order.length;this.order=this.order.filter((function(t){return e.has(t)})),this.order.length!==r&&(this.isDirty=!0)}},{key:"moveDeck",value:function(t,e){var r;this.order=this.order.filter((function(e){return!t.includes(e)})),(r=this.order).splice.apply(r,[e,0].concat(he(t))),this.isDirty=!0}},{key:"getStats",value:function(){return{totalCards:this.order.length,hasUnsavedChanges:this.isDirty}}}],n=[{key:"fromSerialized",value:function(e){return new t(e)}},{key:"fromFloatMap",value:function(e){return new t(Object.entries(e).sort((function(t,e){return e[1]-t[1]})).map((function(t){return ue(t,1)[0]})))}}],r&&de(e.prototype,r),n&&de(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function ve(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||Se(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ge(t){return ge="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ge(t)}function be(){be=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==ge(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(ge(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function xe(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function we(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?xe(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=ge(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=ge(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==ge(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):xe(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Ee(t){return function(t){if(Array.isArray(t))return _e(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||Se(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ke(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=Se(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){s=!0,a=t},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw a}}}}function Se(t,e){if(t){if("string"==typeof t)return _e(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_e(t,e):void 0}}function _e(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function Pe(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Ce(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Pe(a,n,i,o,s,"next",t)}function s(t){Pe(a,n,i,o,s,"throw",t)}o(void 0)}))}}var Ae=new Map,Te=function(t){return Ae.has(t)||Ae.set(t,{isInProgress:!1,lastTime:0,debounceMs:1e3}),Ae.get(t)},Me=function(){var t=Ce(be().mark((function t(e){var r,n,i,a,o,s,l,c,u,h,f,p,d;return be().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=e.tagsList,n=e.dataPageTitle,e.dailyLimit,i=e.isGlobalMixedMode,a=void 0!==i&&i,t.prev=1,o=ee({tagsList:r,cachedData:{}}),s=0,l=ke(r),t.prev=5,l.s();case 7:if((c=l.n()).done){t.next=18;break}return h=c.value,t.next=11,Fe(h,n);case 11:f=t.sent,p=Ie(h),d=[].concat(Ee(f),p),s+=d.length,o.tags[h]=we(we({},o.tags[h]),{},{due:0,new:0,completed:0,dueUids:[],newUids:[],renderMode:(null===(u=o.tags[h])||void 0===u?void 0:u.renderMode)||"normal",status:"notStarted"});case 16:t.next=7;break;case 18:t.next=23;break;case 20:t.prev=20,t.t0=t.catch(5),l.e(t.t0);case 23:return t.prev=23,l.f(),t.finish(23);case 26:return a&&ie({today:o,tagsList:r}),t.abrupt("return",{todayStats:o,allCardsCount:s});case 30:return t.prev=30,t.t1=t.catch(1),console.error("🚀 [getQuickStats] 快速统计失败:",t.t1),t.abrupt("return",{todayStats:ee({tagsList:r,cachedData:{}}),allCardsCount:0});case 34:case"end":return t.stop()}}),t,null,[[1,30],[5,20,23,26]])})));return function(e){return t.apply(this,arguments)}}(),De=function(){var t=Ce(be().mark((function t(e){var r,n,i,a,o,s,l,c,u,h,f,p,d,m,y,v,g,b,x,w,E,k,S,_,P,C;return be().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.tagsList,n=e.dataPageTitle,i=e.dailyLimit,a=e.isCramming,o=e.cachedData,s=e.defaultPriority,l=void 0===s?70:s,c=e.isGlobalMixedMode,u=void 0!==c&&c,t.next=3,Ge({dataPageTitle:n,limitToLatest:!1});case 3:h=t.sent,f=ee({tagsList:r,cachedData:o}),p={},d={},m=ke(r),t.prev=8,m.s();case 10:if((y=m.n()).done){t.next=21;break}return v=y.value,t.next=14,He({pluginPageData:h,tag:v,dataPageTitle:n});case 14:g=t.sent,b=g.sessionData,x=g.cardUids,p[v]=b,d[v]=x;case 19:t.next=10;break;case 21:t.next=26;break;case 23:t.prev=23,t.t0=t.catch(8),m.e(t.t0);case 26:return t.prev=26,m.f(),t.finish(26);case 29:w=new Set,E=ke(r);try{for(E.s();!(k=E.n()).done;)S=k.value,d[S].forEach((function(t){return w.add(t)}))}catch(t){E.e(t)}finally{E.f()}return _=Math.max(1,w.size),t.next=35,Le(w,n,l);case 35:return P=t.sent,C=P.getSortedUids(),t.next=39,ne({today:f,tagsList:r,sessionData:p});case 39:return ae({today:f,tagsList:r,cardUids:d,pluginPageData:h,priorityOrder:C}),se({today:f,tagsList:r,sessionData:p,isCramming:a,priorityOrder:C}),ie({today:f,tagsList:r}),$e({today:f,dailyLimit:i,tagsList:r,isCramming:a,isGlobalMixedMode:u,priorityOrder:C}),ie({today:f,tagsList:r}),re({today:f,tagsList:r}),t.abrupt("return",{practiceData:h,todayStats:f,allCardsCount:_,priorityOrder:C,priorityManager:P,allCardUids:Array.from(w),cardUids:d});case 46:case"end":return t.stop()}}),t,null,[[8,23,26,29]])})));return function(e){return t.apply(this,arguments)}}(),Le=function(){var t=Ce(be().mark((function t(e,r,n){var i,a,o,s,l,c,u,h,f,p,d,m,y;return be().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=Te(r),a=Date.now(),t.next=4,(0,le.loadPriorityOrder)({dataPageTitle:r});case 4:if(!((o=t.sent)&&"object"===ge(o)&&!Array.isArray(o)&&Object.keys(o).length>0)){t.next=10;break}return s=ye.fromFloatMap(o),t.next=9,(0,le.savePriorityOrder)({dataPageTitle:r,priorityOrder:s.serialize()});case 9:return t.abrupt("return",s);case 10:if(l=o&&Array.isArray(o)&&o.length>0?ye.fromSerialized(o):ye.fromSerialized([]),!(i.isInProgress||a-i.lastTime<i.debounceMs)){t.next=13;break}return t.abrupt("return",l);case 13:if(i.isInProgress=!0,i.lastTime=a,t.prev=15,c=new Set(l.getSortedUids()),0!==(u=Array.from(e).filter((function(t){return!c.has(t)}))).length){t.next=20;break}return t.abrupt("return",l);case 20:if(u.length>0)for(h=u.sort(),f=l.getSortedUids(),p=f.length+h.length,d=Math.floor(p*(1-n/100)),m=0;m<h.length;m++)l.moveTo(h[m],d+m);if(!((y=l.serialize()).length>0)){t.next=25;break}return t.next=25,(0,le.savePriorityOrder)({dataPageTitle:r,priorityOrder:y});case 25:return t.abrupt("return",l);case 28:throw t.prev=28,t.t0=t.catch(15),console.error("🎯 优先级管理器更新失败:",t.t0),i.lastTime=0,t.t0;case 33:return t.prev=33,i.isInProgress=!1,t.finish(33);case 36:case"end":return t.stop()}}),t,null,[[15,28,33,36]])})));return function(e,r,n){return t.apply(this,arguments)}}(),Oe=function(t){return'[\n  :find ?page\n  :where\n    [?page :node/title "'.concat(t,'"]\n]')},Fe=function(){var t=Ce(be().mark((function t(e,r){var n,i,a;return be().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=window.roamAlphaAPI.q(Oe(r)),i=n.length?n[0][0]:"",a=window.roamAlphaAPI.q("[\n  :find ?refUid\n  :in $ ?tag ?dataPage\n  :where\n    [?tagPage :node/title ?tag]\n    [?tagRefs :block/refs ?tagPage]\n    [?tagRefs :block/uid ?refUid]\n    [?tagRefs :block/page ?homePage]\n    [(!= ?homePage ?dataPage)]\n  ]",e,i),t.abrupt("return",a.map((function(t){return t[0]})));case 4:case"end":return t.stop()}}),t)})));return function(e,r){return t.apply(this,arguments)}}(),Ie=function(t){var e=(0,Ut.$y)(t);return e.length?e[0][0].children.filter((function(t){return!!t.string})).map((function(t){return t.uid})):[]},je=function(t,e){var r,n,i,a=ke((n=e,i=n.children.some((function(t){return t.string.includes("reviewMode")}))?n.children:[].concat(Ee(n.children),[{order:n.children.length,string:"reviewMode:: ".concat(Gt.Z.DefaultSpacedInterval)}]),we(we({},n),{},{children:i})).children);try{for(a.s();!(r=a.n()).done;){var o=r.value,s=ve((0,Lt.fU)(o.string),2),l=s[0],c=s[1];"nextDueDate"===l?t[l]=(0,Lt.CO)((0,Lt.m7)(c,"[[","]]")):"true"===c||"false"===c?t[l]="true"===c:Lt.kf(c)?t[l]=Number(c):t[l]=c}}catch(t){a.e(t)}finally{a.f()}},Ne=function(t){var e;return(null===(e=t.map((function(t){return t[0]}))[0].children)||void 0===e?void 0:e.reduce((function(t,e){var r=(0,Lt.m7)(e.string,"((","))");if(t[r]={},!e.children)return t;var n=e.children.find((function(t){return 0===t.order}));return t[r].dateCreated=(0,Lt.CO)((0,Lt.m7)(n.string,"[[","]]")),n.children?(je(t[r],n),t):t}),{}))||{}},Be=function(t){var e;return(null===(e=t.map((function(t){return t[0]}))[0].children)||void 0===e?void 0:e.reduce((function(t,e){var r=(0,Lt.m7)(e.string,"((","))");if(t[r]=[],!e.children)return t;var n,i=ke(e.children);try{for(i.s();!(n=i.n()).done;){var a=n.value,o={refUid:r,dateCreated:(0,Lt.CO)((0,Lt.m7)(a.string,"[[","]]"))};if(!a.children)return t;je(o,a),t[r].push(o)}}catch(t){i.e(t)}finally{i.f()}return t}),{}))||{}},Re=function(){var t=Ce(be().mark((function t(e){var r,n;return be().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.dataPageTitle,n=e.blockName,t.next=3,window.roamAlphaAPI.q("[\n  :find (pull ?pluginPageChildren [\n    :block/string\n    :block/children\n    :block/order\n    {:block/children ...}])\n    :in $ ?pageTitle ?dataBlockName\n    :where\n    [?page :node/title ?pageTitle]\n    [?page :block/children ?pluginPageChildren]\n    [?pluginPageChildren :block/string ?dataBlockName]\n  ]",r,n);case 3:return t.abrupt("return",t.sent);case 4:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),Ge=function(){var t=Ce(be().mark((function t(e){var r,n,i,a;return be().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.dataPageTitle,n=e.limitToLatest,i=void 0===n||n,t.next=3,Re({dataPageTitle:r,blockName:"data"});case 3:if((a=t.sent).length){t.next=6;break}return t.abrupt("return",{});case 6:return t.abrupt("return",i?Ne(a):Be(a));case 7:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),Ve=function(t){var e=t.map((function(t){return t[0]}))[0].children;return e&&e.length&&null!=e&&e.length&&e.reduce((function(t,e){var r;return t[(0,Lt.m7)(e.string,"[[","]]")]=(null===(r=e.children)||void 0===r?void 0:r.reduce((function(t,e){if(!e.string)return t;var r=ve(e.string.split("::").map((function(t){return t.trim()})),2),n=r[0],i=r[1],a=(0,Lt.CO)(i);return t[n]=a||i,t}),{}))||{},t}),{})||{}},ze=function(){var t=Ce(be().mark((function t(e){var r,n;return be().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.dataPageTitle,t.next=3,Re({dataPageTitle:r,blockName:"cache"});case 3:if((n=t.sent).length){t.next=6;break}return t.abrupt("return",{});case 6:return t.abrupt("return",Ve(n));case 7:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),He=function(){var t=Ce(be().mark((function t(e){var r,n,i,a,o,s,l;return be().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.pluginPageData,n=e.tag,i=e.dataPageTitle,t.next=3,Fe(n,i);case 3:return a=t.sent,o=Ie(n),s=a.concat(o),l=Object.keys(r).reduce((function(t,e){return s.indexOf(e)>-1&&(t[e]=r[e]),t}),{}),t.abrupt("return",{sessionData:l,cardUids:s});case 8:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),$e=function(t){var e=t.today,r=t.dailyLimit,n=t.tagsList,i=t.isCramming,a=t.isGlobalMixedMode,o=t.priorityOrder,s=e.combinedToday.due+e.combinedToday.new;if(r&&s&&!i&&a){var l,c=new Set,u=new Set,h=ke(n);try{for(h.s();!(l=h.n()).done;){var f=l.value,p=e.tags[f];(p.completedDueUids||[]).forEach((function(t){return c.add(t)})),(p.completedNewUids||[]).forEach((function(t){return u.add(t)}))}}catch(t){h.e(t)}finally{h.f()}var d,m=c.size+u.size,y=Math.max(0,r-m),v=1===y?0:Math.max(0,Math.floor(.25*y)),g=y-v,b=new Map(o.map((function(t,e){return[t,e]}))),x=function(t){return Ee(t).sort((function(t,e){var r,n;return(null!==(r=b.get(t))&&void 0!==r?r:Number.MAX_SAFE_INTEGER)-(null!==(n=b.get(e))&&void 0!==n?n:Number.MAX_SAFE_INTEGER)}))},w=[],E=[],k=ke(n);try{for(k.s();!(d=k.n()).done;){var S=d.value,_=e.tags[S].dueUids.filter((function(t){return!c.has(t)})),P=e.tags[S].newUids.filter((function(t){return!u.has(t)}));w.push.apply(w,Ee(_)),E.push.apply(E,Ee(P))}}catch(t){k.e(t)}finally{k.f()}var C=x(w),A=x(E),T=C.slice(0,g),M=A.slice(0,v);if(T.length<g){var D=g-T.length,L=A.filter((function(t){return!M.includes(t)})).slice(0,D);M=M.concat(L)}if(M.length<v){var O=v-M.length,F=C.filter((function(t){return!T.includes(t)})).slice(0,O);T=T.concat(F)}var I,j=new Set(T),N=new Set(M),B=ke(n);try{for(B.s();!(I=B.n()).done;){var R=I.value,G=e.tags[R],V=G.dueUids.filter((function(t){return j.has(t)})),z=G.newUids.filter((function(t){return N.has(t)}));e.tags[R]=we(we({},G),{},{dueUids:V,newUids:z,due:V.length,new:z.length})}}catch(t){B.e(t)}finally{B.f()}}};function Ue(t){return Ue="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ue(t)}function qe(t,e,r){var n;return n=function(t,e){if("object"!=Ue(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=Ue(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e),(e="symbol"==Ue(n)?n:String(n))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function We(t){return We="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},We(t)}function Ye(){Ye=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==We(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(We(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Xe(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Ze(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Xe(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=We(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=We(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==We(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Xe(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Je(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Ke(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Qe(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Qe(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Qe(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}qe(qe(qe(qe({},"r/1",{oldDisplayButtonText:"Again",memoDisplayButtonText:"Forgot",memoGrade:0}),"r/2",{oldDisplayButtonText:"Hard",memoDisplayButtonText:"Hard",memoGrade:3}),"r/3",{oldDisplayButtonText:"Good",memoDisplayButtonText:"Good",memoGrade:4}),"r/4",{oldDisplayButtonText:"Easy",memoDisplayButtonText:"Perfect",memoGrade:5});var tr=new Map;const er=function(t){var e=t.refUid,n=Ke(r.useState({}),2),i=n[0],a=n[1],o=Ke(r.useState(!1),2),s=o[0],l=o[1],c=Ke(r.useState(0),2),u=c[0],h=c[1],f=r.useCallback((function(){e&&(function(t){tr.delete(t)}(e),h((function(t){return t+1})))}),[e]);return r.useEffect((function(){if(e){var t=function(){var t,r=(t=Ye().mark((function t(){var r;return Ye().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return l(!0),t.prev=1,t.next=4,(0,Ut.YD)(e);case 4:r=t.sent,tr.set(e,r),a(Ze(Ze({},r),{},{refUid:e})),t.next=12;break;case 9:t.prev=9,t.t0=t.catch(1),console.error("🔍 [BlockInfo] 获取block信息失败:",t.t0);case 12:return t.prev=12,l(!1),t.finish(12);case 15:case"end":return t.stop()}}),t,null,[[1,9,12,15]])})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Je(a,n,i,o,s,"next",t)}function s(t){Je(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(){return r.apply(this,arguments)}}();t()}}),[e,u]),{blockInfo:i,isLoading:s,refreshBlockInfo:f}};var rr=void 0,nr=function(t){return new Promise((function(e){return setTimeout(e,t)}))},ir=__webpack_require__(3049);const ar=JSON.parse('{"v":"4.8.0","meta":{"g":"LottieFiles AE 3.1.1","a":"setya.play@gmail.com","k":"Dancing Book","d":"Dancing Book","tc":"Green Lottie"},"fr":30,"ip":0,"op":120,"w":634,"h":619,"nm":"03","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"tl1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[118,222.75,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[204.89,267.485,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[169,105.75,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[204.89,267.485,0],"to":[0,0,0],"ti":[0,0,0]},{"t":120,"s":[118,222.75,0]}],"ix":2},"a":{"a":0,"k":[17.522,17.522,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-9.539],[9.539,0],[0,9.539],[-9.539,0]],"o":[[0,9.539],[-9.539,0],[0,-9.539],[9.539,0]],"v":[[17.272,0],[0,17.272],[-17.272,0],[0,-17.272]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[17.522,17.522],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"A 3","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[187.369,210.494,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":0,"s":[{"i":[[0,0],[22.5,88]],"o":[[-3,41],[0,0]],"v":[[-201.5,-83],[-295,-83]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":30,"s":[{"i":[[0,0],[-76.375,87.583]],"o":[[-25.994,66.543],[0,0]],"v":[[-172.884,-14.244],[-217.595,-44.106]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":60,"s":[{"i":[[0,0],[-10.507,91.391]],"o":[[-26.286,10.88],[0,0]],"v":[[-198.209,-84.649],[-292.592,-162.835]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":90,"s":[{"i":[[0,0],[-84.871,73.158]],"o":[[-42.763,79.596],[0,0]],"v":[[-171.867,-13.618],[-210.432,-48.87]],"c":false}]},{"t":120,"s":[{"i":[[0,0],[22.5,88]],"o":[[-3,41],[0,0]],"v":[[-201.5,-83],[-295,-83]],"c":false}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":5,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":3,"ty":4,"nm":"pipi","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[112.353,123.49,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[145.853,195.99,0],"to":[0,0,0],"ti":[0,0,0]},{"t":480,"s":[112.353,123.49,0]}],"ix":2},"a":{"a":0,"k":[78.343,3.81,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-0.983],[7.53,0],[0,0.983],[-7.53,0]],"o":[[0,0.983],[-7.53,0],[0,-0.983],[7.53,0]],"v":[[13.635,0],[0,1.78],[-13.635,0],[0,-1.78]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.210503641764,0.925490196078,0.776534615311,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[142.802,2.03],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-0.983],[7.53,0],[0,0.983],[-7.53,0]],"o":[[0,0.983],[-7.53,0],[0,-0.983],[7.53,0]],"v":[[13.635,0],[0,1.78],[-13.635,0],[0,-1.78]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.210503641764,0.925490196078,0.776534615311,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[13.884,5.591],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":4,"ty":4,"nm":"mlt","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[117.66,146.199,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[153.16,222.699,0],"to":[0,0,0],"ti":[0,0,0]},{"t":480,"s":[117.66,146.199,0]}],"ix":2},"a":{"a":0,"k":[34.609,26.648,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[21.103,-2.238],[0,0],[-24.433,2.125]],"o":[[0,0],[-24.891,2.639],[0,0],[23.667,-2.058]],"v":[[27.533,-18.99],[2.599,-0.235],[-29.572,-15.543],[1.073,-0.373]],"c":true}]},{"t":480,"s":[{"i":[[-1.051,-5.95],[19.262,-0.093],[-1.682,8.497],[-19.462,0.501]],"o":[[2,11.327],[-19.492,0.094],[1.577,-7.967],[10.228,-0.263]],"v":[[26.951,-19.58],[2.764,11.878],[-26.553,-17.914],[2.445,-23.873]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"st","c":{"a":0,"k":[0.073356396544,0.623529411765,0.508910055722,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":3,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[34.609,26.649],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":5,"ty":4,"nm":"mata","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[109.492,98.752,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[149.992,171.252,0],"to":[0,0,0],"ti":[0,0,0]},{"t":480,"s":[109.492,98.752,0]}],"ix":2},"a":{"a":0,"k":[57.588,8.163,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"t":480,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[107.012,8.163],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[-1.295,-2.695],[2.379,0],[1.26,2.622],[-2.699,0]],"o":[[1.031,2.145],[-2.909,0],[-1.169,-2.432],[2.99,0]],"v":[[7.117,8.463],[0,7.913],[-8.709,8.463],[-1.267,5.277]],"c":true}]},{"t":480,"s":[{"i":[[0,-4.37],[4.37,0],[0,4.37],[-4.37,0]],"o":[[0,4.37],[-4.37,0],[0,-4.37],[4.37,0]],"v":[[7.913,0],[0,7.913],[-7.913,0],[0,-7.913]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[8.163,8.163],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":6,"ty":4,"nm":"DEPAN","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":0,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":30,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":60,"s":[9]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":90,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":120,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":150,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":180,"s":[9]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":210,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":240,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":270,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":300,"s":[9]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":330,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":360,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":390,"s":[-5]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":420,"s":[9]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":450,"s":[-5]},{"t":480,"s":[0]}],"ix":10},"p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":0,"s":[339.061,358.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":30,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":60,"s":[351.061,348.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":90,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":120,"s":[339.061,358.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":150,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":180,"s":[351.061,348.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":210,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":240,"s":[339.061,358.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":270,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":300,"s":[351.061,348.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":330,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":360,"s":[339.061,358.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":390,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":420,"s":[351.061,348.247,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":450,"s":[347.161,351.747,0],"to":[0,0,0],"ti":[0,0,0]},{"t":480,"s":[339.061,358.247,0]}],"ix":2},"a":{"a":0,"k":[111.43,259.241,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-60.714,-54.053],[-85.041,195.998],[109.315,185.423],[121.553,172.257],[142.26,-53.328],[131.319,-63.564]],"c":true}]},{"t":480,"s":[{"i":[[0,0],[0,0],[0,0],[0.911,7.242],[0,0],[5.636,0.331]],"o":[[0,0],[0,0],[7.289,0.38],[0,0],[-0.705,-5.602],[0,0]],"v":[[-111.589,-129.678],[-86.916,119.623],[98.44,129.298],[110.678,116.132],[82.385,-108.703],[71.444,-118.939]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.113725490196,0.866666666667,0.709803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[111.839,129.928],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":7,"ty":4,"nm":"A 2","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[415,309.5,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":0,"s":[{"i":[[0,0],[76,-63.5]],"o":[[0,0],[0,0]],"v":[[-18,64],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":30,"s":[{"i":[[0,0],[84,-49]],"o":[[0,0],[0,0]],"v":[[7.5,71.5],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":60,"s":[{"i":[[0,0],[79,-65]],"o":[[0,0],[0,0]],"v":[[-9,61],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":90,"s":[{"i":[[0,0],[85.5,-54.5]],"o":[[0,0],[0,0]],"v":[[4.322,65.143],[-37,201.5]],"c":false}]},{"t":120,"s":[{"i":[[0,0],[76,-63.5]],"o":[[0,0],[0,0]],"v":[[-18,64],[-37,201.5]],"c":false}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":8,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":8,"ty":4,"nm":"A","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[317,309.5,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":0,"s":[{"i":[[0,0],[61,-82]],"o":[[0,0],[0,0]],"v":[[-42,57.5],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":30,"s":[{"i":[[0,0],[91,-45]],"o":[[0,0],[0,0]],"v":[[-10.5,81.5],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":60,"s":[{"i":[[0,0],[45,-80]],"o":[[0,0],[0,0]],"v":[[-31,36],[-37,201.5]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":90,"s":[{"i":[[0,0],[93,-43.5]],"o":[[0,0],[0,0]],"v":[[-14.678,75.643],[-37,201.5]],"c":false}]},{"t":120,"s":[{"i":[[0,0],[61,-82]],"o":[[0,0],[0,0]],"v":[[-42,57.5],[-37,201.5]],"c":false}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":8,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":9,"ty":4,"nm":"sp2","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[375.268,512.462,0],"ix":2},"a":{"a":0,"k":[0.25,7.554,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-4.034],[10.603,0],[0,4.034],[-10.602,0]],"o":[[0,4.034],[-10.602,0],[0,-4.034],[10.603,0]],"v":[[19.198,0],[0,7.304],[-19.198,0],[0,-7.304]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[19.448,7.554],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":10,"ty":4,"nm":"sp1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[276.7,512.087,0],"ix":2},"a":{"a":0,"k":[0.25,7.554,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-4.034],[10.603,0],[0,4.034],[-10.602,0]],"o":[[0,4.034],[-10.602,0],[0,-4.034],[10.603,0]],"v":[[19.198,0],[0,7.304],[-19.198,0],[0,-7.304]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[19.448,7.554],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":11,"ty":4,"nm":"tl2","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[515.75,199.25,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[501.145,281.399,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[537.75,145.25,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[501.145,281.399,0],"to":[0,0,0],"ti":[0,0,0]},{"t":120,"s":[515.75,199.25,0]}],"ix":2},"a":{"a":0,"k":[19.865,19.865,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-3.68,-8.801],[-8.801,3.68],[3.68,8.8],[8.801,-3.679]],"o":[[3.68,8.801],[8.8,-3.679],[-3.68,-8.801],[-8.8,3.68]],"v":[[-15.935,6.662],[6.663,15.935],[15.935,-6.662],[-6.663,-15.935]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[19.865,19.865],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":12,"ty":4,"nm":"buku Outlines","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[87.445,149.649,0],"ix":2},"a":{"a":0,"k":[131.136,149.649,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[-41.819,-12.88],[0,0],[10.489,38.175]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[19.568,-108.622],[60.447,-68.535],[36.37,181.515],[-7.361,143.91]],"c":true}]},{"t":480,"s":[{"i":[[0,0],[-34.44,1.029],[0,0],[6.943,-27.757]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[-34.182,-105.872],[9.509,-143.91],[34.182,105.39],[-7.361,143.91]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[34.432,144.16],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.888,-0.827],[-14.925,0.243],[-14.92,0.325],[-14.904,0.571],[0,0],[-7.443,0.434],[7.468,-0.037],[0,0],[14.92,-0.331],[14.905,-0.572]],"o":[[14.941,0.007],[14.925,-0.243],[14.909,-0.489],[0,0],[7.447,-0.373],[-7.472,-0.024],[0,0],[-14.925,0.249],[-14.909,0.494],[-14.905,0.572]],"v":[[-79.234,29.669],[-34.44,29.212],[10.319,28.219],[55.048,26.757],[77.402,25.86],[99.743,24.75],[77.339,24.87],[54.949,25.203],[10.19,26.201],[-34.539,27.666]],"c":true}]},{"t":480,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-89.488,-3.764],[-44.695,-3.068],[0.064,-1.552],[44.793,0.678],[67.147,2.045],[89.488,3.739],[67.085,3.556],[44.694,3.048],[-0.065,1.526],[-44.794,-0.709]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[136.215,277.268],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.9,-0.729],[-14.928,0.146],[-14.925,0.228],[-14.912,0.473],[0,0],[-7.449,0.385],[7.469,0.012],[0,0],[14.924,-0.233],[14.913,-0.474]],"o":[[14.94,0.104],[14.929,-0.146],[14.916,-0.391],[0,0],[7.453,-0.324],[-7.471,-0.073],[0,0],[-14.929,0.151],[-14.915,0.397],[-14.912,0.474]],"v":[[-79.267,40.598],[-34.469,40.435],[10.304,39.733],[55.053,38.565],[77.419,37.814],[99.776,36.851],[77.371,36.824],[54.978,37.01],[10.205,37.715],[-34.544,38.888]],"c":true}]},{"t":480,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-89.521,-2.835],[-44.724,-2.585],[0.049,-1.516],[44.799,0.267],[67.164,1.411],[89.521,2.882],[67.117,2.923],[44.724,2.638],[-0.049,1.563],[-44.799,-0.225]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[145.762,270.299],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.871,-0.948],[-14.919,0.366],[-14.914,0.448],[-14.892,0.693],[0,0],[-7.434,0.495],[7.468,-0.098],[0,0],[14.912,-0.453],[14.893,-0.694]],"o":[[14.94,-0.115],[14.92,-0.366],[14.898,-0.611],[0,0],[7.439,-0.433],[-7.471,0.037],[0,0],[-14.919,0.371],[-14.898,0.616],[-14.893,0.694]],"v":[[-79.18,55.225],[-34.399,54.402],[10.339,53.042],[55.036,51.214],[77.372,50.134],[99.689,48.841],[77.289,49.145],[54.908,49.661],[10.171,51.025],[-34.526,52.856]],"c":true}]},{"t":480,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-89.434,-4.869],[-44.654,-3.614],[0.085,-1.539],[44.782,1.249],[67.118,2.896],[89.434,4.868],[67.035,4.405],[44.653,3.618],[-0.084,1.537],[-44.78,-1.256]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[158.049,262.27],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[13.601,16.693],[0,0],[-0.651,-0.135],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-71.214,51.492],[-110.486,30.868],[108.288,33.178],[114.766,33.197],[121.334,43.766]],"c":true}]},{"t":480,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-73.581,-19.633],[-113.205,12.493],[103.421,19.553],[108.399,15.572],[113.205,-9.609]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[142.196,269.183],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[-0.449,-2.681],[2.913,-0.188],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0.482,2.879],[-58.386,3.76],[0,0]],"v":[[-114.514,16.979],[-114.771,15.962],[112.536,24.113],[123.099,25.524],[130.778,30.521],[124.599,36.726],[-71.058,47.137]],"c":true}]},{"t":480,"s":[{"i":[[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[39.173,0.662]],"o":[[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-39.173,-0.662]],"v":[[-117.227,8.542],[-114.359,12.291],[111.948,20.426],[117.261,14.587],[114.69,-17.666],[111.511,-20.461],[-75.709,-29.176]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[144.347,278.508],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":13,"ty":4,"nm":"buku Outlines 2","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[87.445,149.649,0],"ix":2},"a":{"a":0,"k":[131.136,149.649,0],"ix":1},"s":{"a":0,"k":[100,-100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.888,1.261],[-14.925,-0.379],[-14.92,-0.496],[-14.904,-0.871],[0,0],[-7.443,-0.662],[7.468,0.057],[0,0],[14.92,0.505],[14.904,0.879]],"o":[[14.941,-0.01],[14.925,0.371],[14.909,0.746],[0,0],[7.447,0.569],[-7.472,0.036],[0,0],[-14.925,-0.38],[-14.909,-0.754],[-14.905,-0.872]],"v":[[-62.698,-30.599],[-17.904,-29.903],[26.855,-28.387],[71.584,-26.157],[93.938,-24.79],[116.279,-23.096],[93.875,-23.279],[71.485,-23.787],[26.726,-25.309],[-18.003,-27.544]],"c":true}]},{"t":480,"s":[{"i":[[14.932,-0.129],[-14.918,-0.45],[-14.921,-0.369],[-14.926,-0.125],[0,0],[-7.467,0.085],[7.457,0.308],[0,0],[14.921,0.363],[14.927,0.124]],"o":[[14.913,0.697],[14.918,0.45],[14.924,0.206],[0,0],[7.466,-0.024],[-7.456,-0.369],[0,0],[-14.919,-0.444],[-14.924,-0.201],[-14.927,-0.124]],"v":[[-89.519,-36.326],[-44.768,-34.706],[-0.006,-33.619],[44.767,-32.995],[67.158,-32.847],[89.554,-32.912],[67.182,-33.829],[44.804,-34.535],[0.042,-35.619],[-44.732,-36.239]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[136.215,277.268],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.9,1.112],[-14.928,-0.23],[-14.925,-0.348],[-14.912,-0.721],[0,0],[-7.449,-0.588],[7.469,-0.018],[0,0],[14.924,0.356],[14.913,0.73]],"o":[[14.94,-0.159],[14.929,0.222],[14.916,0.597],[0,0],[7.453,0.494],[-7.471,0.112],[0,0],[-14.929,-0.23],[-14.915,-0.605],[-14.912,-0.723]],"v":[[-62.731,-29.669],[-17.933,-29.42],[26.84,-28.35],[71.589,-26.568],[93.955,-25.423],[116.312,-23.953],[93.907,-23.912],[71.514,-24.197],[26.741,-25.272],[-18.008,-27.06]],"c":true}]},{"t":480,"s":[{"i":[[14.936,-0.031],[-14.913,-0.546],[-14.917,-0.465],[-14.926,-0.222],[0,0],[-7.469,0.036],[7.454,0.357],[0,0],[14.917,0.459],[14.927,0.221]],"o":[[14.903,0.794],[14.914,0.546],[14.922,0.303],[0,0],[7.467,0.025],[-7.451,-0.418],[0,0],[-14.914,-0.541],[-14.922,-0.298],[-14.926,-0.221]],"v":[[-107.915,-25.044],[-63.187,-23.134],[-18.436,-21.757],[26.331,-20.843],[48.721,-20.55],[71.121,-20.469],[48.76,-21.531],[26.392,-22.382],[-18.359,-23.756],[-63.127,-24.667]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[145.762,270.299],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[14.871,1.446],[-14.919,-0.565],[-14.914,-0.683],[-14.892,-1.057],[0,0],[-7.434,-0.755],[7.468,0.15],[0,0],[14.912,0.691],[14.892,1.065]],"o":[[14.94,0.176],[14.92,0.558],[14.898,0.932],[0,0],[7.439,0.661],[-7.471,-0.057],[0,0],[-14.919,-0.566],[-14.898,-0.94],[-14.893,-1.058]],"v":[[-62.644,-31.703],[-17.863,-30.448],[26.875,-28.373],[71.572,-25.585],[93.908,-23.938],[116.225,-21.966],[93.825,-22.429],[71.444,-23.216],[26.707,-25.297],[-17.99,-28.09]],"c":true}]},{"t":480,"s":[{"i":[[14.926,-0.249],[-14.923,-0.328],[-14.925,-0.247],[-14.925,-0.004],[0,0],[-7.463,0.145],[7.463,0.248],[0,0],[14.924,0.242],[14.926,0.003]],"o":[[14.922,0.577],[14.924,0.328],[14.924,0.085],[0,0],[7.463,-0.084],[-7.46,-0.309],[0,0],[-14.924,-0.323],[-14.924,-0.08],[-14.926,-0.003]],"v":[[-130.928,-9.958],[-86.159,-8.701],[-41.386,-7.976],[3.388,-7.716],[25.776,-7.75],[48.165,-7.996],[25.78,-8.731],[3.396,-9.256],[-41.377,-9.977],[-86.151,-10.234]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117706897,0.898039275525,0.901960844152,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[158.049,262.27],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0,0],[9.875,-24.094],[0,0],[-0.453,2.371],[0,0]],"o":[[0,0],[0,0],[2.413,0.079],[0,0],[0,0]],"v":[[-46.791,-46.467],[-86.415,-14.341],[130.211,-7.281],[135.189,-11.263],[139.995,-36.444]],"c":true}]},{"t":480,"s":[{"i":[[0,0],[9.087,-24.402],[0,0],[-0.376,2.384],[0,0]],"o":[[0,0],[0,0],[2.414,0.001],[0,0],[0,0]],"v":[[-100.371,-43.753],[-138.93,-10.356],[77.811,-10.339],[82.657,-14.48],[86.642,-39.804]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[142.196,269.183],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":0,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":30,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":60,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":90,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":120,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":150,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":180,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":210,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":240,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":270,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":300,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":330,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":360,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":390,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":420,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]},{"i":{"x":0.45,"y":1},"o":{"x":0.55,"y":0},"t":450,"s":[{"i":[[0.545,-0.61],[2.069,-8.595],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.448,1.864],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-81.094,-35.697],[-90.437,-18.293],[-87.569,-14.544],[138.738,-6.409],[144.051,-12.248],[141.48,-44.501],[138.301,-47.296],[-78.981,-36.698]],"c":true}]},{"t":480,"s":[{"i":[[0.545,-0.61],[0.151,-8.411],[-1.916,-0.069],[0,0],[0.415,3.171],[0,0],[1.641,-0.08],[0,0]],"o":[[-2.079,2.331],[-0.034,1.917],[0,0],[3.195,0.115],[0,0],[-0.131,-1.637],[0,0],[-0.817,0.04]],"v":[[-139.344,-39.197],[-142.437,-19.793],[-139.569,-16.044],[86.738,-7.909],[92.051,-13.748],[89.48,-46.001],[86.301,-48.796],[-137.231,-40.198]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.074509803922,0.623529411765,0.509803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[144.347,278.508],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":14,"ty":4,"nm":"Shape Layer 1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[342,510,0],"ix":2},"a":{"a":0,"k":[25,200.5,0],"ix":1},"s":{"a":0,"k":[100,30,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[244,244],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"st","c":{"a":0,"k":[0.490195988674,0,0.180391992307,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":0,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[0.894117647059,0.898039215686,0.901960784314,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[25,200.5],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Ellipse 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0},{"ddd":0,"ind":15,"ty":4,"nm":"A 4","parent":11,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":9,"ix":10},"p":{"a":0,"k":[-84.216,186.894,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":0,"s":[{"i":[[0,0],[54.728,40.444]],"o":[[9.576,38.861],[0,0]],"v":[[75.275,-181.115],[-10.22,-128.976]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":30,"s":[{"i":[[0,0],[22.5,88]],"o":[[18.587,75.802],[0,0]],"v":[[76.863,-182.172],[11.005,-160.722]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":60,"s":[{"i":[[0,0],[75.196,9.865]],"o":[[15.193,45.565],[0,0]],"v":[[77.121,-180.648],[-5.782,-88.168]],"c":false}]},{"i":{"x":0.49,"y":1},"o":{"x":0.51,"y":0},"t":90,"s":[{"i":[[0,0],[22.5,88]],"o":[[22.937,66.507],[0,0]],"v":[[75.212,-181.404],[12.726,-149.858]],"c":false}]},{"t":120,"s":[{"i":[[0,0],[54.728,40.444]],"o":[[9.576,38.861],[0,0]],"v":[[75.275,-181.115],[-10.22,-128.976]],"c":false}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.133333333333,0.121568627451,0.121568627451,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":5,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Shape 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2701,"st":0,"bm":0}],"markers":[]}');var or,sr,lr,cr=["className","wrapperClassName"];function ur(){return ur=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},ur.apply(this,arguments)}const hr=Dt((function(t){var e=t.className,r=t.wrapperClassName,n=function(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}(t,cr);return React.createElement(i.Tooltip,ur({className:r,popoverClassName:e},n))}))(or||(sr=["\n  &.bp3-tooltip .bp3-popover-content {\n    font-size: 12px;\n    padding: 2px 5px;\n  }\n"],lr||(lr=sr.slice(0)),or=Object.freeze(Object.defineProperties(sr,{raw:{value:Object.freeze(lr)}})))),fr="@media (min-width: 1024px)",pr="@media (min-width: 1280px)",dr="@media (max-width: 768px) and (orientation: portrait)";var mr=function(t){!function(t){(arguments.length>1&&void 0!==arguments[1]?arguments[1]:[]).forEach((function(e){return t.dispatchEvent(new MouseEvent(e,{view:window,bubbles:!0,cancelable:!0,buttons:1}))}))}(t,["mouseenter","mouseover","mousedown","click","mouseup"])};function yr(t){return yr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},yr(t)}function vr(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function gr(){gr=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==yr(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(yr(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function br(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function xr(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?br(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=yr(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=yr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==yr(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):br(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function wr(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Er(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){wr(a,n,i,o,s,"next",t)}function s(t){wr(a,n,i,o,s,"throw",t)}o(void 0)}))}}function kr(t){return Array.from(t.childNodes).filter((function(t){return 3===t.nodeType&&t.textContent.trim().length>1}))}function Sr(t,e){for(var r=kr(t),n=0;n<r.length;){var i=r[n],a=i.textContent,o=e.exec(a);if(o){var s=o[0],l=o.index,c=l+s.length,u=a.slice(0,l),h=a.slice(c),f=document.createElement("span");f.classList.add("roam-memo-cloze"),f.textContent=s;var p=document.createTextNode(u),d=document.createTextNode(h);i.parentNode.insertBefore(p,i),i.parentNode.insertBefore(f,i),i.parentNode.insertBefore(d,i),i.parentNode.removeChild(i),r=kr(t)}else n++}}const _r=function(t){var e,n,i=t.renderedBlockElm,a=t.hasClozeCallback,o=(e=r.useState({default:void 0,custom:void 0}),n=2,function(t){if(Array.isArray(t))return t}(e)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(e,n)||function(t,e){if(t){if("string"==typeof t)return vr(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?vr(t,e):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=o[0],l=o[1];r.useEffect((function(){Er(gr().mark((function t(){var e;return gr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(i){t.next=2;break}return t.abrupt("return");case 2:e=i.querySelectorAll(".rm-highlight"),l((function(){return xr(xr({},s),{},{default:e.length})}));case 4:case"end":return t.stop()}}),t)})))()}),[i]),function(t){var e=t.renderedBlockElm,n=t.setClozeCounts;r.useEffect((function(){Er(gr().mark((function t(){var r,i,a,o;return gr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return");case 2:if(r=e.querySelector(".rm-block-main .dont-unfocus-block span")){t.next=5;break}return t.abrupt("return");case 5:i=new RegExp("".concat("{","(.+?)").concat("}"),"gs"),a=new RegExp(i,"gs"),Sr(r,a),o=e.querySelectorAll(".roam-memo-cloze"),n((function(t){return xr(xr({},t),{},{custom:o.length})}));case 12:case"end":return t.stop()}}),t)})))()}),[e])}({renderedBlockElm:i,setClozeCounts:l}),r.useEffect((function(){if(!Object.values(s).every((function(t){return void 0===t}))){var t=Object.values(s).reduce((function(t,e){return t+e}),0);a(t>0)}}),[s])};function Pr(t){return Pr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Pr(t)}var Cr,Ar,Tr;function Mr(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}function Dr(){Dr=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Pr(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Pr(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Lr(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Or(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Fr(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Fr(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Fr(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var Ir=Dt.div(Cr||(Cr=Mr(["\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1000;\n  background: rgba(255, 255, 255, 0.9);\n  padding: 8px 16px;\n  border-radius: 4px;\n  font-size: 14px;\n  color: #666;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n"]))),jr=Dt.div(Ar||(Ar=Mr(["\n  // To align bullet on the left + ref count on the right correctly\n  position: relative;\n  left: -14px;\n  width: calc(100% + 19px);\n  opacity: ",";\n  transition: opacity 0.2s ease-in-out;\n\n  & .rm-block-children {\n    /* 🚀 FLASH FIX V3: 使用 visibility + opacity 代替 display，避免闪烁 */\n    visibility: ",";\n    opacity: ",";\n    height: ",";\n    overflow: ",";\n    transition: opacity 0.15s ease-in-out, height 0.15s ease-in-out;\n    display: flex; /* 保持 flex 布局，不改变 display */\n  }\n\n  & .rm-block-separator {\n    min-width: unset; // Keeping roam block from expanding 100\n  }\n\n  & .rm-highlight,\n  .roam-memo-cloze {\n    background-color: ",";\n    color: ",";\n    overflow: hidden;\n    border-radius: 2px;\n    padding: 0;\n    margin: 0;\n    /* 🚀 FLASH FIX V3: 添加平滑过渡效果 */\n    transition: background-color 0.15s ease-in-out, color 0.15s ease-in-out;\n  }\n"])),(function(t){return t.isLoading?.5:1}),(function(t){return t.showAnswers?"visible":"hidden"}),(function(t){return t.showAnswers?1:0}),(function(t){return t.showAnswers?"auto":"0"}),(function(t){return t.showAnswers?"visible":"hidden"}),(function(t){return t.showAnswers?"transparent":"#e1e3e5"}),(function(t){return t.showAnswers?"inherit":"transparent"})),Nr=function(t){var e=t.breadcrumbs,n=e.map((function(t,r){return{current:r===e.length-1,text:t.title||t.string}}));return r.createElement(Br,{className:"rm-zoom zoom-path-view"},n.map((function(t,e){return r.createElement("div",{key:e,className:"rm-zoom-item"},r.createElement("span",{className:"rm-zoom-item-content"},t.text)," ",e!==n.length-1&&r.createElement(i.Icon,{icon:"chevron-right"}))})))},Br=Dt.div(Tr||(Tr=Mr(["\n  opacity: 0.7;\n  margin-left: 8px !important;\n  margin-top: -4px !important;\n\n  &.rm-zoom-item {\n    cursor: auto !important;\n  }\n"])));const Rr=function(t){var e=t.refUid,n=t.showAnswers,i=t.setHasCloze,a=t.breadcrumbs,o=t.showBreadcrumbs,s=r.useRef(null),l=Or(r.useState(null),2),c=l[0],u=l[1],h=Or(r.useState(!1),2),f=h[0],p=h[1];_r({renderedBlockElm:c,hasClozeCallback:i});var d=Or(r.useState(0),2),m=d[0],y=d[1],v=r.useRef(e),g=r.useRef(null);r.useEffect((function(){v.current=e}),[e]);var b=r.useRef(null),x=r.useCallback((function(){y((function(t){return t+1}))}),[]);return r.useEffect((function(){var t=function(){var t,e=(t=Dr().mark((function t(){var e,r,n,i;return Dr().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e=v.current,s.current){t.next=3;break}return t.abrupt("return");case 3:return p(!0),t.prev=4,t.next=7,window.roamAlphaAPI.ui.components.unmountNode({el:s.current});case 7:return t.next=9,window.roamAlphaAPI.ui.components.renderBlock({uid:e,el:s.current});case 9:if(r=s.current.querySelector(".rm-block"),u(r),!(null==r?void 0:r.classList.contains("rm-block--closed"))){t.next=18;break}return n=s.current.querySelector(".block-expand .rm-caret"),mr(n),t.next=17,nr(50);case 17:mr(n);case 18:g.current&&g.current.disconnect(),i=new MutationObserver((function(t){t.forEach((function(t){"childList"===t.type&&t.addedNodes.length>0&&t.addedNodes.forEach((function(t){if(t instanceof HTMLElement){var e=t.querySelectorAll("textarea");e.length>0&&e.forEach((function(t){t.removeEventListener("blur",x),t.addEventListener("blur",x)}))}}))}))})),i.observe(s.current,{childList:!0,subtree:!0}),g.current=i;case 22:return t.prev=22,p(!1),t.finish(22);case 25:case"end":return t.stop()}}),t,null,[[4,,22,25]])})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Lr(a,n,i,o,s,"next",t)}function s(t){Lr(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(){return e.apply(this,arguments)}}(),e=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:300,r=new Map;return function(n){for(var i=arguments.length,a=new Array(i>1?i-1:0),o=1;o<i;o++)a[o-1]=arguments[o];r.has(n)&&clearTimeout(r.get(n));var s=setTimeout((function(){r.delete(n),t.apply(rr,a)}),e);r.set(n,s)}}(t,50);return b.current=function(){return e(v.current)},function(){b.current=null,g.current&&(g.current.disconnect(),g.current=null)}}),[x]),r.useEffect((function(){b.current&&b.current()}),[e,m]),r.createElement("div",null,a&&o&&r.createElement(Nr,{breadcrumbs:a}),f&&r.createElement(Ir,null,"加载中..."),r.createElement(jr,{ref:s,showAnswers:n,isLoading:f}))};var Gr=__webpack_require__(9153);function Vr(t){return Vr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Vr(t)}var zr=["dateCreated","reviewMode","schedulingAlgorithm"],Hr=["nextDueDateFromNow"];function $r(){$r=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Vr(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Vr(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Ur(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function qr(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Wr(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?qr(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=Vr(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=Vr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==Vr(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):qr(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Yr(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}var Xr=function(t){var e=t.dateCreated,r=t.reviewMode,n=t.schedulingAlgorithm,i=void 0===n?"SM2":n,a=Yr(t,zr),o={reviewMode:r};if(r===Gt.Z.FixedInterval){var s=a.intervalMultiplier,l=a.intervalMultiplierType,c=new Date,u=null;return l===Gt.D.Days?u=Ot.fi(c,s):l===Gt.D.Weeks?u=Ot.fi(c,7*s):l===Gt.D.Months?u=Ot.fi(c,30*s):l===Gt.D.Years&&(u=Ot.fi(c,365*s)),Wr(Wr({},o),{},{reviewMode:Gt.Z.FixedInterval,intervalMultiplier:s,intervalMultiplierType:l,nextDueDate:u,nextDueDateFromNow:Ot.kM(u)})}var h,f=a.grade,p=a.interval,d=a.repetitions,m=a.eFactor,y=a.fsrsState;if("FSRS"===i){var v={interval:p,repetition:d,efactor:m,fsrsState:y};h=(0,Gr.fsrsAlgorithm)(v,f)}else h=function(t,e){var r,n,i;return 0===e?(r=0,n=0,i=t.efactor):e<3?(r=1,n=0,i=t.efactor):(0===t.repetition?(r=1,n=1):1===t.repetition?(r=6,n=2):(r=Math.round(t.interval*t.efactor),n=t.repetition+1),(i=t.efactor+(.1-(5-e)*(.08+.02*(5-e))))<1.3&&(i=1.3)),{interval:r,repetition:n,efactor:i}}({interval:p,repetition:d,efactor:m},f);var g=Ot.fi(e,h.interval);return Wr(Wr(Wr({},o),{},{reviewMode:Gt.Z.DefaultSpacedInterval,grade:f,repetitions:h.repetition,interval:h.interval,eFactor:h.efactor},"FSRS"===i&&h.fsrsState&&{fsrsState:h.fsrsState}),{},{dateCreated:e,nextDueDate:g,nextDueDateFromNow:Ot.kM(g)})};const Zr=function(){var t,e=(t=$r().mark((function t(e){var r,n,i,a,o,s,l,c,u,h,f,p,d,m,y,v,g;return $r().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=e.refUid,n=e.dataPageTitle,i=e.dateCreated,a=e.isCramming,o=e.isDryRun,s=e.grade,l=e.reviewMode,c=e.eFactor,u=e.interval,h=e.repetitions,f=e.intervalMultiplier,p=e.intervalMultiplierType,d=e.fsrsEnabled,m=void 0!==d&&d,y=e.fsrsState,(v=Xr({dateCreated:i,reviewMode:l,grade:s,eFactor:c,interval:u,repetitions:h,intervalMultiplier:f,intervalMultiplierType:p,schedulingAlgorithm:m?"FSRS":"SM2",fsrsState:y})).nextDueDateFromNow,g=Yr(v,Hr),o||a){t.next=7;break}return t.next=5,(0,le.savePracticeData)(Wr({refUid:r,dataPageTitle:n,dateCreated:i},g));case 5:t.next=8;break;case 7:case 8:return t.abrupt("return",g);case 9:case"end":return t.stop()}}),t)})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Ur(a,n,i,o,s,"next",t)}function s(t){Ur(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(t){return e.apply(this,arguments)}}();var Jr,Kr=Dt.span(Jr||(Jr=function(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}(["\n  background-color: ",";\n  color: #abbbc9;\n  text-transform: uppercase;\n  font-size: 9px;\n  padding: 1px 2px;\n  border-radius: 2px;\n  position: relative;\n  top: -0.5px;\n"])),(function(t){return"light"===t.kind?"rgba(138, 155, 168, 0.2)":"rgba(138, 155, 168, 0.1)"}));const Qr=Kr;function tn(t){return tn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},tn(t)}var en,rn,nn,an,on=["tooltipText","wrapperClassName"];function sn(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}function ln(){ln=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==tn(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(tn(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function cn(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function un(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return hn(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?hn(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function hn(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var fn=function(t){var e=t.activateButtonFn,n=t.showAnswerFn,i=t.activeButtonKey;return r.createElement(r.Fragment,null,r.createElement("div",{className:"flex-shrink-0"}),r.createElement("div",{className:"flex-1 flex justify-center"},r.createElement(kn,{className:"text-base font-medium py-1",intent:"none",onClick:function(){e("space-button",n)},active:"space-button"===i,outlined:!0},"Show Answer"," ",r.createElement("span",{className:"ml-2"},r.createElement(Qr,null,"SPACE")))),r.createElement("div",{className:"flex-shrink-0"}))},pn=function(t){var e=t.onStartCrammingClick,n=t.onCloseCallback;return r.createElement(r.Fragment,null,r.createElement("div",{className:"flex-shrink-0"}),r.createElement("div",{className:"flex-1 flex justify-center gap-4"},r.createElement(hr,{content:"Review all cards without waiting for scheduling",placement:"top"},r.createElement(i.Button,{className:"text-base font-medium py-1",intent:"none",onClick:e,outlined:!0},"Continue Cramming")),r.createElement(i.Button,{className:"text-base font-medium py-1",intent:"primary",onClick:n,outlined:!0},"Close")),r.createElement("div",{className:"flex-shrink-0"}))},dn=function(t){t.activateButtonFn;var e=t.activeButtonKey,n=t.skipFn,a=t.gradeFn,o=t.intervalEstimates,s=t.intervalPractice,l=t.isIntervalEditorOpen,c=t.toggleIntervalEditorOpen,u=r.useContext(wa),h=u.reviewMode,f=u.setReviewModeOverride,p=h===Gt.Z.FixedInterval;return r.createElement(r.Fragment,null,r.createElement("div",{className:"flex-shrink-0"},r.createElement(kn,{key:"skip-button",className:"text-base font-medium py-1",tooltipText:"Skip for now",onClick:function(){return n()},active:"skip-button"===e,outlined:!0},"Skip"," ",r.createElement("span",{className:"ml-2"},r.createElement(Qr,null,"S")))),r.createElement("div",{className:"flex-1 flex justify-center gap-2 flex-wrap"},p?r.createElement(vn,{activeButtonKey:e,intervalPractice:s,isIntervalEditorOpen:l,toggleIntervalEditorOpen:c,intervalEstimates:o}):r.createElement(gn,{activeButtonKey:e,gradeFn:a,intervalEstimates:o})),r.createElement("div",{className:"flex-shrink-0"},r.createElement(wn,{className:"flex items-center justify-center gap-1 bg-gray-50 px-2 py-1 rounded-md border border-gray-200",style:{minWidth:"100px"}},r.createElement("span",{className:"text-xs ".concat(p?"text-gray-400":"text-blue-600 font-medium")},"AUTO"),r.createElement(i.Switch,{className:"mb-0",style:{transform:"scale(0.9)"},checked:p,onChange:function(){void 0!==f&&f((function(t){if(void 0===t)return h===Gt.Z.DefaultSpacedInterval?Gt.Z.FixedInterval:Gt.Z.DefaultSpacedInterval}))},"data-testid":"review-mode-switch"}),r.createElement("span",{className:"text-xs ".concat(p?"text-blue-600 font-medium":"text-gray-400")},"FIX"))))},mn=function(){var t=r.useContext(wa),e=t.intervalMultiplier,n=t.intervalMultiplierType,a=t.setIntervalMultiplier,o=t.setIntervalMultiplierType,s=[{value:Gt.D.Days,label:"Days"},{value:Gt.D.Weeks,label:"Weeks"},{value:Gt.D.Months,label:"Months"},{value:Gt.D.Years,label:"Years"}];return r.createElement("div",{className:"flex p-2 items-center w-80 justify-evenly"},r.createElement("div",{className:""},"Every"),r.createElement("div",{className:"w-24"},r.createElement(i.NumericInput,{min:1,max:365,stepSize:1,majorStepSize:30,minorStepSize:1,value:e,onValueChange:function(t){isNaN(t)||a(t)},fill:!0})),r.createElement("div",{className:"bp3-html-select"},r.createElement("select",{value:n,onChange:function(t){return o(t.currentTarget.value)}},s.map((function(t){return r.createElement("option",{key:t.value,value:t.value,selected:t.value===n},t.label)}))),r.createElement("span",{className:"bp3-icon bp3-icon-double-caret-vertical"})))},yn=function(t){var e=t.intervalMultiplier,n=t.intervalMultiplierType,i="";if(1===e)switch(n){case Gt.D.Weeks:i+="Weekly";break;case Gt.D.Months:i+="Monthly";break;case Gt.D.Years:i+="Yearly";break;default:i+="Daily"}return r.createElement(r.Fragment,null,"Review"," ",r.createElement("span",{className:"font-medium mr-3"},i||r.createElement(r.Fragment,null,"Every ",e," ",n)))},vn=function(t){var e=t.activeButtonKey,n=t.intervalPractice,a=t.isIntervalEditorOpen,o=t.toggleIntervalEditorOpen,s=t.intervalEstimates,l=r.useContext(wa),c=l.intervalMultiplier,u=l.intervalMultiplierType;return s?r.createElement(r.Fragment,null,r.createElement(i.Popover,{isOpen:a,onInteraction:function(t){!t&&a&&o()}},r.createElement(kn,{icon:"time",className:"text-base font-normal py-1",intent:"default",onClick:o,tooltipText:"Change Interval",active:"change-interval-button"===e,outlined:!0},r.createElement("span",{className:"ml-2"},r.createElement(yn,{intervalMultiplier:c,intervalMultiplierType:u}),r.createElement(Qr,null,"E"))),r.createElement(mn,null)),r.createElement(kn,{icon:"tick",className:"text-base font-medium py-1",intent:"success",onClick:function(){return n()},tooltipText:"Review ".concat(s[0].nextDueDateFromNow),active:"next-button"===e,outlined:!0},"Next"," ",r.createElement("span",{className:"ml-2"},r.createElement(Qr,null,"SPACE")))):(console.error("Interval estimates not set"),null)},gn=function(t){var e,n,i,a,o=t.activeButtonKey,s=t.gradeFn,l=t.intervalEstimates;return l?r.createElement(r.Fragment,null,r.createElement(kn,{key:"forget-button",className:"text-base font-medium py-1",intent:"danger",tooltipText:"Review ".concat(null===(e=l[0])||void 0===e?void 0:e.nextDueDateFromNow),onClick:function(){return s(0)},active:"forgot-button"===o,outlined:!0},"Forgot"," ",r.createElement("span",{className:"ml-2"},r.createElement(Qr,null,"X"))),r.createElement(kn,{className:"text-base font-medium py-1",intent:"warning",onClick:function(){return s(2)},tooltipText:"Review ".concat(null===(n=l[2])||void 0===n?void 0:n.nextDueDateFromNow),active:"hard-button"===o,outlined:!0},"Hard"," ",r.createElement("span",{className:"ml-2"},r.createElement(Qr,null,"H"))),r.createElement(kn,{className:"text-base font-medium py-1",intent:"primary",onClick:function(){return s(4)},tooltipText:"Review ".concat(null===(i=l[4])||void 0===i?void 0:i.nextDueDateFromNow),active:"good-button"===o,outlined:!0},"Good"," ",r.createElement("span",{className:"ml-2"},r.createElement(Qr,null,"G"))),r.createElement(kn,{className:"text-base font-medium py-1",intent:"success",onClick:function(){return s(5)},tooltipText:"Review ".concat(null===(a=l[5])||void 0===a?void 0:a.nextDueDateFromNow),active:"perfect-button"===o,outlined:!0},"Perfect"," ",r.createElement("span",{className:"ml-2"},r.createElement(Qr,null,"SPACE")))):(console.error("Interval estimates not set"),null)},bn=Dt.div(en||(en=sn(["\n  background-color: #f6f9fd;\n  min-height: 50px;\n  border-top: 1px solid rgba(16, 22, 26, 0.1);\n\n  & .bp3-button-text {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n"]))),xn=Dt.div(rn||(rn=sn(["\n  &.bp3-dialog-footer-actions .bp3-button {\n    margin-left: 0;\n  }\n\n  /* 📱 Mobile portrait: Skip & Toggle share first row, grading controls second row */\n  "," {\n    /* ❶ 重点：改成 grid，而不是 flex-column */\n    display: grid !important;\n    grid-template-columns: 1fr 1fr;\n    grid-template-areas:\n      'skip  toggle'\n      'middle middle';\n    gap: 0.5rem;\n\n    /* ❷ 给 3 个直接子元素绑定网格区域 */\n    & > :nth-child(1) { grid-area: skip;   }   /* Skip */\n    & > :nth-child(2) { grid-area: middle; }   /* 中间评分按钮组 */\n    & > :nth-child(3) { grid-area: toggle; justify-self: end; } /* AUTO/FIX */\n\n    /* 字号、滚动等原有细节保持不变 */\n    & .bp3-button {\n      font-size: clamp(12px, 3vw, 14px);\n      padding: 0.3rem 0.5rem;\n      min-height: 44px; /* maintain tap target */\n    }\n    & > .flex-1 {\n      flex-wrap: nowrap;\n      overflow-x: auto;\n      -webkit-overflow-scrolling: touch;\n      gap: 0.25rem;\n    }\n  }\n"])),dr),wn=Dt.div(nn||(nn=sn([""]))),En=Dt(i.Button)(an||(an=sn([""]))),kn=function(t){var e=t.tooltipText,n=t.wrapperClassName,i=void 0===n?"":n,a=function(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}(t,on);return r.createElement(hr,{content:e,placement:"top",wrapperClassName:i},r.createElement(En,a))};const Sn=function(t){var e=t.setShowAnswers,n=t.showAnswers,a=t.refUid,o=t.onPracticeClick,s=t.onSkipClick,l=t.onPrevClick,c=t.isDone,u=t.hasCards,h=t.onCloseCallback,f=t.currentCardData,p=t.onStartCrammingClick,d=t.fsrsEnabled,m=void 0!==d&&d,y=r.useContext(wa),v=y.reviewMode,g=y.intervalMultiplier,b=y.intervalMultiplierType,x=un(r.useState(!1),2),w=x[0],E=x[1],k=function(){return E((function(t){return!t}))},S=un(r.useState(null),2),_=S[0],P=S[1],C=function(){var t,e=(t=ln().mark((function t(e,r){var n;return ln().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return P(e),n="skip-button"===e?50:100,t.next=4,nr(n);case 4:r(),P(null);case 6:case"end":return t.stop()}}),t)})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){cn(a,n,i,o,s,"next",t)}function s(t){cn(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(t,r){return e.apply(this,arguments)}}(),A=r.useMemo((function(){return function(){e(!0)}}),[e]),T=r.useMemo((function(){return function(t){var e;switch(t){case 0:e="forgot-button";break;case 2:e="hard-button";break;case 4:e="good-button";break;case 5:e="perfect-button"}C(e,(function(){return o({grade:t,refUid:a})}))}}),[o,a]),M=r.useMemo((function(){return function(){C("next-button",(function(){return o({refUid:a})}))}}),[o,a]),D=r.useMemo((function(){return function(){C("skip-button",(function(){return s()}))}}),[s]),L=r.useMemo((function(){return[{combo:"space",global:!0,label:"Primary Action Trigger",onKeyDown:function(){n?v===Gt.Z.FixedInterval?M():T(5):C("space-button",A)}},{combo:"S",global:!0,label:"Skip",onKeyDown:D},{combo:"right",global:!0,label:"Skip",onKeyDown:D},{combo:"left",global:!0,label:"Previous",onKeyDown:l},{combo:"X",global:!0,label:"Forgot (Grade 0)",onKeyDown:function(){return T(0)},disabled:v===Gt.Z.FixedInterval},{combo:"H",global:!0,label:"Grade 2",onKeyDown:function(){return T(2)},disabled:v===Gt.Z.FixedInterval},{combo:"G",global:!0,label:"Grade 4",onKeyDown:function(){return T(4)},disabled:v!==Gt.Z.DefaultSpacedInterval},{combo:"E",global:!0,label:"Edit Interval",onKeyDown:k,disabled:v!==Gt.Z.FixedInterval}]}),[D,l,v,n,A,M,T]),O=i.useHotkeys(L),F=O.handleKeyDown,I=O.handleKeyUp,j=r.useMemo((function(){if(f){if(v){for(var t=[0,1,2,3,4,5],e=f.interval,r=f.repetitions,n=f.eFactor,i=f.fsrsState,a={},o=v===Gt.Z.FixedInterval?1:t.length,s=0;s<o;s++){var l=t[s],c=Xr({grade:l,interval:e,repetitions:r,eFactor:n,fsrsState:i,dateCreated:new Date,reviewMode:v,intervalMultiplier:g,intervalMultiplierType:b,schedulingAlgorithm:m?"FSRS":"SM2"});a[l]=c}return a}console.error("Review mode not set")}}),[f,g,b,v,m]);return r.createElement(bn,{className:"bp3-multistep-dialog-footer flex items-center justify-center rounded-b-md p-0",onKeyDown:F,onKeyUp:I},r.createElement(xn,{className:"bp3-dialog-footer-actions flex items-center justify-between w-full mx-5 my-3","data-testid":"footer-actions-wrapper"},c||!u?r.createElement(pn,{onStartCrammingClick:p,onCloseCallback:h}):n?r.createElement(dn,{activateButtonFn:C,activeButtonKey:_,skipFn:D,gradeFn:T,intervalEstimates:j,intervalPractice:M,isIntervalEditorOpen:w,toggleIntervalEditorOpen:k}):r.createElement(fn,{activateButtonFn:C,showAnswerFn:A,activeButtonKey:_})))};var _n,Pn,Cn,An,Tn,Mn;function Dn(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}function Ln(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var On=Dt.div(_n||(_n=Dn(["\n  padding: 12px 16px;\n  background: #f5f8fa;\n  border-top: 1px solid #e1e8ed;\n"]))),Fn=Dt.div(Pn||(Pn=Dn(["\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n"]))),In=Dt.span(Cn||(Cn=Dn(["\n  font-size: 14px;\n  font-weight: 500;\n  color: #182026;\n"]))),jn=Dt.span(An||(An=Dn(["\n  font-size: 12px;\n  color: #5c7080;\n"]))),Nn=Dt.div(Tn||(Tn=Dn(["\n  margin: 0 8px 12px 8px;\n"]))),Bn=Dt.div(Mn||(Mn=Dn(["\n  display: flex;\n  justify-content: center;\n  gap: 8px;\n"])));const Rn=function(t){var e,n,a=t.currentPosition,o=t.totalCards,s=t.onPositionChange,l=t.disabled,c=void 0!==l&&l,u=(e=r.useState(a),n=2,function(t){if(Array.isArray(t))return t}(e)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(e,n)||function(t,e){if(t){if("string"==typeof t)return Ln(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Ln(t,e):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),h=u[0],f=u[1];r.useEffect((function(){f(a)}),[a]);var p=Math.round((o-a+1)/o*100);return r.createElement(On,null,r.createElement(Fn,null,r.createElement(In,null,"卡片优先级"),r.createElement(jn,null,"位置: ",a,"/",o," | 优先级: ",p,"%")),r.createElement(Nn,null,r.createElement(i.Slider,{min:1,max:o,stepSize:1,value:h,onChange:function(t){f(t)},onRelease:function(t){s(t)},disabled:c,labelRenderer:function(t){return"".concat(t)},labelStepSize:Math.max(1,Math.floor(o/5))})),r.createElement(Bn,null,r.createElement(i.Button,{icon:"chevron-up",minimal:!0,small:!0,disabled:c||a<=1,onClick:function(){return s(Math.max(1,a-1))},title:"提高优先级"}),r.createElement(i.Button,{icon:"chevron-down",minimal:!0,small:!0,disabled:c||a>=o,onClick:function(){return s(Math.min(o,a+1))},title:"降低优先级"})))};function Gn(t){return Gn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Gn(t)}function Vn(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function zn(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Vn(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=Gn(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=Gn(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==Gn(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Vn(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Hn(t){return function(t){if(Array.isArray(t))return Un(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||$n(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function $n(t,e){if(t){if("string"==typeof t)return Un(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Un(t,e):void 0}}function Un(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var qn,Wn,Yn,Xn,Zn={maxDays:30,priorityRange:100,dotSize:4,canvasWidth:800,canvasHeight:400,marginX:80,marginY:50},Jn=function(t,e){return t<=0?0:t>=e.maxDays?100:t/e.maxDays*100},Kn=function(t,e){return Math.max(0,Math.min(100,t))},Qn=function(t,e,r){var n=r.canvasWidth-2*r.marginX,i=r.canvasHeight-2*r.marginY;return{canvasX:r.marginX+t/100*n,canvasY:r.marginY+(100-e)/100*i}},ti=function(t,e,r,n){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Zn,a=[];return Object.entries(e).forEach((function(e){var n,o,s=(o=2,function(t){if(Array.isArray(t))return t}(n=e)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(n,o)||$n(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=s[0];s[1].forEach((function(e){var n=t[e]||[],o=function(t){return t&&0!==t.length&&t[t.length-1].nextDueDate||new Date}(n),s=function(t){var e=new Date;e.setHours(0,0,0,0);var r=new Date(t);r.setHours(0,0,0,0);var n=r.getTime()-e.getTime();return Math.ceil(n/864e5)}(o),c=r.indexOf(e),u=-1===c?50:(r.length-c)/r.length*100,h=0===n.length,f=s<0,p={uid:e,deckName:l,x:Kn(u),y:Jn(s,i),dueDate:o,daysToDue:s,priority:u,isOverdue:f,isNew:h};a.push(p)}))})),a},ei=function(t){var e=[];e.push({position:0,label:"今天"});for(var r=7;r<=t.maxDays;r+=7){var n=Jn(r,t);e.push({position:n,label:"".concat(r,"天")})}return e},ri=function(t){for(var e=[],r=0;r<=100;r+=25)e.push({position:r,label:"".concat(r,"%")});return e};function ni(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}function ii(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||ai(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ai(t,e){if(t){if("string"==typeof t)return oi(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?oi(t,e):void 0}}function oi(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var si=Dt.div(qn||(qn=ni(["\n  position: relative;\n  display: inline-block;\n  border: 1px solid #e1e8ed;\n  border-radius: 6px;\n  background: white;\n"]))),li=Dt.canvas(Wn||(Wn=ni(["\n  display: block;\n  cursor: crosshair;\n  \n  &:hover {\n    cursor: pointer;\n  }\n"]))),ci=Dt.div(Yn||(Yn=ni(["\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  pointer-events: none;\n  z-index: 1000;\n"]))),ui=Dt.div(Xn||(Xn=ni(["\n  background: rgba(0, 0, 0, 0.8);\n  color: white;\n  padding: 8px 12px;\n  border-radius: 4px;\n  font-size: 12px;\n  white-space: nowrap;\n  \n  .new-tag {\n    color: #2b95d6;\n    font-weight: 500;\n  }\n  \n  .overdue-tag {\n    color: #db3737;\n    font-weight: 500;\n  }\n"])));const hi=function(t){var e=t.dots,n=t.config,i=void 0===n?Zn:n,a=t.selectedDeck,o=t.onDotClick,s=t.onDotHover,l=r.useRef(null),c=r.useRef(null),u=ii(r.useState(null),2),h=u[0],f=u[1],p=ii(r.useState(!0),2),d=p[0],m=p[1],y=r.useCallback((function(t){t.strokeStyle="#e1e8ed",t.lineWidth=1,t.beginPath(),t.moveTo(i.marginX,i.canvasHeight-i.marginY),t.lineTo(i.canvasWidth-i.marginX,i.canvasHeight-i.marginY),t.stroke(),t.beginPath(),t.moveTo(i.marginX,i.marginY),t.lineTo(i.marginX,i.canvasHeight-i.marginY),t.stroke()}),[i]),v=r.useCallback((function(t){t.fillStyle="#5c7080",t.font='12px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',t.textAlign="center",ri().forEach((function(e){var r=e.position,n=e.label,a=Qn(r,0,i).canvasX;t.fillText(n,a,i.canvasHeight-i.marginY+20)}));var e=ei(i);t.textAlign="right",e.forEach((function(e){var r=e.position,n=e.label,a=Qn(0,r,i).canvasY;t.fillText(n,i.marginX-15,a+4)})),t.save(),t.textAlign="center",t.font='bold 13px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',t.fillStyle="#333",t.translate(20,i.canvasHeight/2),t.rotate(-Math.PI/2),t.fillText("到期时间",0,0),t.restore()}),[i]),g=r.useCallback((function(t){t.strokeStyle="#f5f8fa",t.lineWidth=1,ri().forEach((function(e){var r=e.position,n=Qn(r,0,i).canvasX;t.beginPath(),t.moveTo(n,i.marginY),t.lineTo(n,i.canvasHeight-i.marginY),t.stroke()})),ei(i).forEach((function(e){var r=e.position,n=Qn(0,r,i).canvasY;t.beginPath(),t.moveTo(i.marginX,n),t.lineTo(i.canvasWidth-i.marginX,n),t.stroke()}))}),[i]),b=r.useCallback((function(t){return arguments.length>1&&void 0!==arguments[1]&&arguments[1]?"#0f9960":t.isOverdue?"#db3737":t.isNew?"#2b95d6":a&&t.deckName===a?"#f29d49":"#5c7080"}),[a]),x=r.useCallback((function(t){e.forEach((function(e){var r=Qn(e.x,e.y,i),n=r.canvasX,a=r.canvasY,o=(null==h?void 0:h.uid)===e.uid,s=b(e,o);t.fillStyle=s,t.beginPath(),t.arc(n,a,o?i.dotSize+2:i.dotSize,0,2*Math.PI),t.fill(),e.isOverdue&&(t.strokeStyle="#a82a2a",t.lineWidth=1,t.stroke())}))}),[e,i,h,b]),w=r.useCallback((function(){c.current||(c.current=document.createElement("canvas"),c.current.width=i.canvasWidth,c.current.height=i.canvasHeight);var t=c.current.getContext("2d");t&&(t.clearRect(0,0,i.canvasWidth,i.canvasHeight),g(t),y(t),v(t),m(!1))}),[i,g,y,v]),E=r.useCallback((function(){var t=l.current;if(t){var e=t.getContext("2d");e&&(e.clearRect(0,0,i.canvasWidth,i.canvasHeight),d&&w(),c.current&&e.drawImage(c.current,0,0),x(e))}}),[i,w,x,d]),k=r.useCallback((function(t,r){var n=l.current;if(!n)return null;var a,o=n.getBoundingClientRect(),s=t-o.left,c=r-o.top,u=function(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=ai(t))){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){s=!0,a=t},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw a}}}}(e);try{for(u.s();!(a=u.n()).done;){var h=a.value,f=Qn(h.x,h.y,i),p=f.canvasX,d=f.canvasY;if(Math.sqrt(Math.pow(s-p,2)+Math.pow(c-d,2))<=i.dotSize+4)return h}}catch(t){u.e(t)}finally{u.f()}return null}),[e,i]),S=r.useCallback((function(t){var e=k(t.clientX,t.clientY);f(e),null==s||s(e)}),[k,s]),_=r.useCallback((function(t){var e=k(t.clientX,t.clientY);e&&(null==o||o(e))}),[k,o]),P=r.useCallback((function(){f(null),null==s||s(null)}),[s]);return r.useEffect((function(){m(!0)}),[i]),r.useEffect((function(){var t=setTimeout((function(){E()}),16);return function(){return clearTimeout(t)}}),[E]),r.createElement(si,null,r.createElement(li,{ref:l,width:i.canvasWidth,height:i.canvasHeight,onMouseMove:S,onClick:_,onMouseLeave:P}),h&&r.createElement(ci,null,r.createElement(ui,null,r.createElement("strong",null,h.deckName),r.createElement("div",null,"到期: ",h.daysToDue,"天后"),r.createElement("div",null,"优先级: ",h.priority.toFixed(1),"%"),h.isNew&&r.createElement("div",{className:"new-tag"},"新卡片"),h.isOverdue&&r.createElement("div",{className:"overdue-tag"},"已过期"))))};var fi;function pi(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var di={m:"margin",mt:"marginTop",mr:"marginRight",mb:"marginBottom",ml:"marginLeft",mx:"marginLeft,marginRight",my:"marginTop,marginBottom",p:"padding",pt:"paddingTop",pr:"paddingRight",pb:"paddingBottom",pl:"paddingLeft",px:"paddingLeft,paddingRight",py:"paddingTop,paddingBottom"},mi=function(t){return"number"==typeof t?"".concat(t,"px"):t},yi=Dt.div(fi||(fi=function(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}(["\n  box-sizing: border-box;\n\n  /* Generate CSS from style props */\n  ","\n  ","\n  ","\n  ","\n  ","\n  ","\n  ","\n  ","\n  ","\n  ","\n  ","\n  ","\n  ","\n  ","\n  ","\n\n  /* Generate CSS from spacing props */\n  ","\n"])),(function(t){return t.width&&"width: ".concat(mi(t.width),";")}),(function(t){return t.height&&"height: ".concat(mi(t.height),";")}),(function(t){return t.display&&"display: ".concat(t.display,";")}),(function(t){return t.flex&&"flex: ".concat(t.flex,";")}),(function(t){return t.flexGrow&&"flex-grow: ".concat(t.flexGrow,";")}),(function(t){return t.flexShrink&&"flex-shrink: ".concat(t.flexShrink,";")}),(function(t){return t.flexBasis&&"flex-basis: ".concat(t.flexBasis,";")}),(function(t){return t.alignItems&&"align-items: ".concat(t.alignItems,";")}),(function(t){return t.justifyContent&&"justify-content: ".concat(t.justifyContent,";")}),(function(t){return t.flexDirection&&"flex-direction: ".concat(t.flexDirection,";")}),(function(t){return t.flexWrap&&"flex-wrap: ".concat(t.flexWrap,";")}),(function(t){return t.gap&&"gap: ".concat(mi(t.gap),";")}),(function(t){return t.bg&&"background-color: ".concat(t.bg,";")}),(function(t){return t.borderRadius&&"border-radius: ".concat(mi(t.borderRadius),";")}),(function(t){return t.border&&"border: ".concat(t.border,";")}),(function(t){return Object.entries(di).map((function(e){var r,n,i=(n=2,function(t){if(Array.isArray(t))return t}(r=e)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(r,n)||function(t,e){if(t){if("string"==typeof t)return pi(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?pi(t,e):void 0}}(r,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],o=i[1],s=t[a];if(void 0!==s){var l=mi(s);return o.split(",").map((function(t){return"".concat(t,": ").concat(l,";")})).join("")}return""})).join("\n")}));const vi=yi;var gi=["direction","as"];function bi(){return bi=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},bi.apply(this,arguments)}var xi=n().forwardRef((function(t,e){var r=t.direction,i=void 0===r?"column":r,a=t.as,o=function(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}(t,gi);return n().createElement(vi,bi({ref:e,as:a,display:"flex",flexDirection:i},o))}));xi.displayName="Stack";const wi=xi;function Ei(t){return Ei="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ei(t)}var ki,Si,_i,Pi,Ci,Ai,Ti,Mi,Di,Li;function Oi(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}function Fi(){Fi=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Ei(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Ei(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Ii(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=Ri(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,o=!0,s=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return o=t.done,t},e:function(t){s=!0,a=t},f:function(){try{o||null==r.return||r.return()}finally{if(s)throw a}}}}function ji(t){return function(t){if(Array.isArray(t))return Gi(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||Ri(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ni(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Bi(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||Ri(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ri(t,e){if(t){if("string"==typeof t)return Gi(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Gi(t,e):void 0}}function Gi(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var Vi=Dt.div(ki||(ki=Oi(["\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  padding: 12px;\n  box-sizing: border-box;\n  flex: 1 1 auto;\n  overflow-y: auto;\n  background-color: #f0f4f8;\n"]))),zi=Dt.div(Si||(Si=Oi(["\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 20px;\n  background: #f8fafb;\n  border-radius: 6px;\n  border: 1px solid #e1e8ed;\n  min-height: 480px;\n"]))),Hi=Dt.div(_i||(_i=Oi(["\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 20px;\n  background: white;\n  border-radius: 6px;\n  border: 1px solid #e1e8ed;\n  box-shadow: 0 1px 2px rgba(16, 22, 26, 0.05);\n  width: 100%;\n  max-width: 840px;\n"]))),$i=Dt.div(Pi||(Pi=Oi(["\n  min-width: 200px;\n  max-width: 280px;\n  \n  .bp3-button {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    height: 30px;\n    padding: 0 10px;\n  }\n  \n  .deck-selector-popover .bp3-popover-content {\n    max-height: 300px;\n    overflow-y: auto;\n  }\n"]))),Ui=Dt.span(Ci||(Ci=Oi(["\n  font-size: 12px;\n  color: #8a9ba8;\n  font-weight: 500;\n  text-align: center;\n  margin-top: 4px;\n  padding: 2px 8px;\n"]))),qi=Dt.div(Ai||(Ai=Oi(["\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 4px;\n  padding: 10px 6px;\n  border-radius: 4px;\n  background: #f8fafc;\n  border: 1px solid #eaf0f6;\n  min-width: 75px;\n  flex: 1;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 2px 4px rgba(16, 22, 26, 0.1);\n  }\n  \n  ","\n  \n  ","\n"])),(function(t){return t.overdue&&"\n    border-color: #db3737;\n    background: #fff5f5;\n  "}),(function(t){return t.newCard&&"\n    border-color: #2b95d6;\n    background: #f5f9fc;\n  "})),Wi=Dt.span(Ti||(Ti=Oi(["\n  font-size: 11px;\n  color: #5c7080;\n  font-weight: 500;\n  text-align: center;\n  white-space: nowrap;\n"]))),Yi=Dt.span(Mi||(Mi=Oi(["\n  font-size: 18px;\n  font-weight: 600;\n  color: #182026;\n  line-height: 1.1;\n"]))),Xi=Dt.span(Di||(Di=Oi(["\n  font-weight: 600;\n  color: #2b95d6;\n  margin-left: 8px;\n  font-size: 13px;\n  background: rgba(43, 149, 214, 0.1);\n  padding: 2px 6px;\n  border-radius: 3px;\n"]))),Zi=function(t){var e,n=t.tagsList,o=t.selectedTag,s=t.cardUids,l=t.onTagChange,c=[""].concat(ji(n));return r.createElement(a.Select,{items:c,activeItem:o,filterable:!0,itemPredicate:function(t,e){return""===e?"显示所有牌组".includes(t.toLowerCase())||""===t:function(t,e){var r=t.toLowerCase();return e.toLowerCase().includes(r)}(t,e)},inputProps:{placeholder:"搜索牌组..."},itemRenderer:function(t,e){var n,i,a=e.handleClick,o=e.modifiers,l=e.query;if(""===t||"".concat(t," (").concat((null===(n=s[t])||void 0===n?void 0:n.length)||0,"张)"),""===t)return r.createElement(Ji,{key:"all-decks",active:o.active,onClick:a},r.createElement("span",{style:{fontStyle:"italic",color:"#5c7080"}},"显示所有牌组"));if(l){var c=t.toLowerCase().indexOf(l.toLowerCase());if(c>=0){var u,h=t.substring(0,c),f=t.substring(c,c+l.length),p=t.substring(c+l.length);return r.createElement(Ji,{key:t,active:o.active,onClick:a},r.createElement("span",null,h,r.createElement("strong",{style:{color:"#106ba3"}},f),p),r.createElement("span",{style:{color:"#5c7080",fontSize:"12px",marginLeft:"8px"}},"(",(null===(u=s[t])||void 0===u?void 0:u.length)||0,"张)"))}}return r.createElement(Ji,{key:t,active:o.active,onClick:a},r.createElement("span",null,t),r.createElement("span",{style:{color:"#5c7080",fontSize:"12px",marginLeft:"8px"}},"(",(null===(i=s[t])||void 0===i?void 0:i.length)||0,"张)"))},onItemSelect:l,popoverProps:{minimal:!0,fill:!0,popoverClassName:"deck-selector-popover"}},r.createElement(i.Button,{text:""===o?"显示所有牌组":"".concat(o," (").concat((null===(e=s[o])||void 0===e?void 0:e.length)||0,"张)"),rightIcon:"caret-down",fill:!0,style:{justifyContent:"space-between",textAlign:"left",overflow:"hidden",textOverflow:"ellipsis"}}))},Ji=Dt.div(Li||(Li=Oi(["\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 12px;\n  cursor: pointer;\n  min-height: 30px;\n  \n  ","\n  \n  &:hover {\n    background-color: ",";\n  }\n"])),(function(t){return t.active&&"\n    background-color: #137cbd;\n    color: white;\n    \n    span {\n      color: white !important;\n    }\n    \n    strong {\n      color: #ffd700 !important;\n    }\n  "}),(function(t){return t.active?"#137cbd":"#f5f8fa"}));const Ki=function(t){var e=t.isOpen,n=t.onClose,a=t.practiceData,o=t.cardUids,s=t.priorityOrder,l=t.today,c=t.tagsList,u=(t.selectedTag,t.onTagSelect,t.onPriorityUpdate),h=Bi(r.useState(Zn),2),f=h[0],p=(h[1],Bi(r.useState(""),2)),d=p[0],m=p[1],y=Bi(r.useState(0),2),v=y[0],g=y[1],b=Bi(r.useState(1),2),x=b[0],w=b[1],E=Bi(r.useState(null),2),k=(E[0],E[1]),S=r.useMemo((function(){return ti(a,o,s,l,f)}),[a,o,s,l,f]),_=r.useMemo((function(){return d?function(t,e,r){if(0===t.length)return t;var n=function(t){return 0===t.length?{minX:0,maxX:0,minY:0,maxY:0}:{minX:Math.min.apply(Math,Hn(t.map((function(t){return t.x})))),maxX:Math.max.apply(Math,Hn(t.map((function(t){return t.x})))),minY:Math.min.apply(Math,Hn(t.map((function(t){return t.y})))),maxY:Math.max.apply(Math,Hn(t.map((function(t){return t.y}))))}}(t),i=(n.minX+n.maxX)/2;return t.map((function(t){return zn(zn({},t),{},{x:Math.max(0,Math.min(100,i+(t.x-i)*r+e))})}))}((t=d,S.filter((function(e){return e.deckName===t}))),v,x):S;var t}),[S,d,v,x]),P=r.useMemo((function(){var t=_.length,e=_.filter((function(t){return t.isOverdue})).length,r=_.filter((function(t){return t.isNew})).length;return{total:t,overdue:e,newCards:r,regular:t-e-r}}),[_]),C=function(){g(0),w(1)},A=function(){var t,e=(t=Fi().mark((function t(){var e,r,n,i,a,l,c,h,f,p,m,y,g,b,w;return Fi().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(d&&(0!==v||1!==x)){t.next=2;break}return t.abrupt("return");case 2:if(t.prev=2,0!==(e=o[d]||[]).length){t.next=6;break}return t.abrupt("return");case 6:if(r=ji(s),n=r.length,0!==(i=e.map((function(t){return{uid:t,oldIndex:r.indexOf(t)}})).filter((function(t){return-1!==t.oldIndex})).sort((function(t,e){return t.oldIndex-e.oldIndex}))).length){t.next=11;break}return t.abrupt("return");case 11:a=(i[0].oldIndex+i[i.length-1].oldIndex)/2,l=(n-a)/n*100,c=Math.max(0,Math.min(100,l+v)),h=(100-c)/100*n,f=i[i.length-1].oldIndex-i[0].oldIndex,p=f*x,i.map((function(t){return t.uid})),m=i.map((function(t){return t.oldIndex})).sort((function(t,e){return e-t})),y=Ii(m);try{for(y.s();!(g=y.n()).done;)b=g.value,r.splice(b,1)}catch(t){y.e(t)}finally{y.f()}if((w=i.map((function(t,e){var n=i.length>1?e/(i.length-1):.5,a=h+(n-.5)*p,o=r.length,s=Math.max(0,Math.min(o,Math.round(a)));return{card:t.uid,targetPos:s}}))).sort((function(t,e){return t.targetPos-e.targetPos})),w.forEach((function(t){r.splice(t.targetPos,0,t.card)})),!u){t.next=28;break}return t.next=28,u(r);case 28:C(),t.next=34;break;case 31:t.prev=31,t.t0=t.catch(2),console.error("❌ 应用变换失败:",t.t0);case 34:case"end":return t.stop()}}),t,null,[[2,31]])})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Ni(a,n,i,o,s,"next",t)}function s(t){Ni(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(){return e.apply(this,arguments)}}();return r.createElement(i.Dialog,{isOpen:e,onClose:n,title:"卡片排期点阵图",style:{width:"960px",maxHeight:"95vh",overflow:"auto"}},r.createElement(Vi,{className:"bp3-dialog-body"},r.createElement(wi,{direction:"row",align:"flex-end",gap:24,p:"12px",bg:"#ffffff",borderRadius:"6px",border:"1px solid #e1e8ed",flexWrap:"wrap"},r.createElement(wi,{direction:"column",gap:4,flex:"1 1 200px",minWidth:"200px"},r.createElement(i.Label,null,"牌组选择"),r.createElement($i,null,r.createElement(Zi,{tagsList:c,selectedTag:d,cardUids:o,onTagChange:function(t){m(t),C()}}))),r.createElement(wi,{direction:"column",gap:4,flex:"1 1 150px",minWidth:"150px"},r.createElement(i.Label,null,"X轴偏移",r.createElement(Xi,null,v>0?"+":"",v)),r.createElement(i.Slider,{min:-50,max:50,stepSize:1,value:v,onChange:g,labelStepSize:25,disabled:!d,showTrackFill:!1})),r.createElement(wi,{direction:"column",gap:4,flex:"1 1 150px",minWidth:"150px"},r.createElement(i.Label,null,"X轴缩放",r.createElement(Xi,null,"×",x.toFixed(1))),r.createElement(i.Slider,{min:.1,max:3,stepSize:.1,value:x,onChange:w,labelStepSize:1,disabled:!d,showTrackFill:!1})),r.createElement(wi,{direction:"row",gap:8,align:"center",flexShrink:0,mt:"auto",pb:"4px"},r.createElement(i.Button,{text:"重置变换",onClick:C,disabled:!d}),r.createElement(i.Button,{text:"应用变换",intent:"primary",onClick:A,disabled:!d||0===v&&1===x}))),r.createElement(zi,null,r.createElement(Hi,null,r.createElement(hi,{dots:_,config:f,selectedDeck:d,onDotClick:function(t){},onDotHover:function(t){k(t)}}),r.createElement(Ui,null,"优先级"))),r.createElement(wi,{direction:"row",justify:"space-around",align:"stretch",gap:12,p:"12px",bg:"#ffffff",borderRadius:"6px",border:"1px solid #e1e8ed",mt:"8px"},r.createElement(qi,null,r.createElement(Wi,null,"总卡片数"),r.createElement(Yi,null,P.total)),r.createElement(qi,{overdue:!0},r.createElement(Wi,null,"过期卡片"),r.createElement(Yi,null,P.overdue)),r.createElement(qi,{newCard:!0},r.createElement(Wi,null,"新卡片"),r.createElement(Yi,null,P.newCards)),r.createElement(qi,null,r.createElement(Wi,null,"正常卡片"),r.createElement(Yi,null,P.regular)))),r.createElement("div",{className:"bp3-dialog-footer"},r.createElement("div",{className:"bp3-dialog-footer-actions"},r.createElement(i.Button,{onClick:n},"关闭"))))};function Qi(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return ta(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?ta(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ta(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var ea,ra,na,ia,aa,oa,sa,la,ca;function ua(t){return ua="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ua(t)}function ha(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}function fa(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function pa(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?fa(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=ua(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=ua(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==ua(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):fa(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function da(){da=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==ua(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(ua(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function ma(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function ya(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){ma(a,n,i,o,s,"next",t)}function s(t){ma(a,n,i,o,s,"throw",t)}o(void 0)}))}}function va(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||ba(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ga(t){return function(t){if(Array.isArray(t))return xa(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||ba(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ba(t,e){if(t){if("string"==typeof t)return xa(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?xa(t,e):void 0}}function xa(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var wa=r.createContext({}),Ea=Dt.div(ea||(ea=ha(["\n  display: grid;\n  grid-template-rows: 50px 1fr auto;\n  height: 100%;\n  width: 100%;\n"]))),ka=Dt.div(ra||(ra=ha(["\n  overflow-x: hidden; // because of tweaks we do in ContentWrapper container overflows\n  min-height: 200px;\n"]))),Sa=Dt.div(na||(na=ha(["\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  color: #5c7080;\n  background-color: #f6f9fd;\n  box-shadow: 0 1px 0 rgb(16 22 26 / 10%);\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  word-wrap: normal;\n  line-height: inherit;\n  margin: 0;\n  min-height: 50px;\n  padding: 0 16px;\n\n  /* Shortcut way to tag selector color */\n  & .bp3-button {\n    color: #5c7080;\n  }\n\n  /* 📱 Portrait: 转为两行布局，避免元素挤压 */\n  "," {\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n    gap: 0.25rem;\n    padding: 0.25rem 0.5rem;\n    min-height: auto;\n\n    & > div:first-of-type,\n    & > div:last-of-type {\n      width: 100%;\n      display: flex;\n      flex-wrap: nowrap;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    & span[data-testid='display-count-current'],\n    & span[data-testid='display-count-total'] {\n      font-size: 0.75rem;\n    }\n  }\n"])),dr),_a=function(t){var e=t.tagsList,n=t.selectedTag,o=t.onTagChange;return r.createElement(a.Select,{items:e,activeItem:n,filterable:!0,itemPredicate:function(t,e){var r=t.toLowerCase();return e.toLowerCase().includes(r)},inputProps:{placeholder:"搜索牌组..."},itemRenderer:function(t,n){var i=n.handleClick,a=n.modifiers,o=n.query,s=t.toLowerCase().indexOf(o.toLowerCase());if(o&&s>=0){var l=t.substring(0,s),c=t.substring(s,s+o.length),u=t.substring(s+o.length);return r.createElement(Aa,{text:r.createElement("span",null,l,r.createElement("strong",{style:{color:"#106ba3"}},c),u),originalText:t,tagsList:e,active:a.active,key:t,onClick:i})}return r.createElement(Aa,{text:t,originalText:t,tagsList:e,active:a.active,key:t,onClick:i})},onItemSelect:function(t){o(t)},popoverProps:{minimal:!0,popoverClassName:"tag-selector-popover",modifiers:{preventOverflow:{enabled:!0},flip:{enabled:!0}}},resetOnQuery:!0,resetOnSelect:!0},r.createElement(i.Button,{text:n,rightIcon:"caret-down",minimal:!0,"data-testid":"tag-selector-cta"}))},Pa=Dt.div(ia||(ia=ha(["\n  display: flex;\n  justify-content: space-between;\n  padding: 4px 6px;\n  background-color: ",";\n  user-select: none;\n\n  &:hover {\n    cursor: pointer;\n    background-color: ",";\n  }\n"])),(function(t){return t.active?"rgba(0, 0, 0, 0.05)":"transparent"}),(function(t){return t.active?"rgba(0, 0, 0, 0.05)":"rgba(0, 0, 0, 0.03)"})),Ca=Dt(i.Tag)(aa||(aa=ha(["\n  &.bp3-tag {\n    font-size: 11px;\n    padding: 1px 3px;\n    min-height: auto;\n    min-width: auto;\n  }\n"]))),Aa=function(t){var e,n,a,o=t.text,s=t.originalText,l=t.onClick,c=t.active,u=t.tagsList,h=r.useContext(wa),f=h.today,p=h.setRenderMode,d=s||o,m=(null===(e=f.tags[d])||void 0===e?void 0:e.due)||0,y=(null===(n=f.tags[d])||void 0===n?void 0:n.new)||0,v=(null===(a=f.tags[d])||void 0===a?void 0:a.renderMode)||Ht.Normal,g=va(r.useState(!1),2),b=g[0],x=g[1],w=u.indexOf(d)===u.length-1?"bottom":"top",E=r.createElement("div",{onClick:function(t){return t.stopPropagation()}},r.createElement(i.Menu,{className:"bg-transparent min-w-full text-sm"},r.createElement(i.MenuItem,{text:r.createElement("div",{className:"flex items-center justify-between"},r.createElement("span",{className:"text-xs"},"Swap Q/A"),r.createElement(i.Switch,{alignIndicator:i.Alignment.RIGHT,checked:v===Ht.AnswerFirst,onChange:function(){var t=v===Ht.Normal?Ht.AnswerFirst:Ht.Normal;p(d,t)},className:"mb-0"})),className:"hover:bg-transparent hover:no-underline"}),r.createElement(i.MenuDivider,null)));return r.createElement(Pa,{onClick:l,active:c,key:o,tabIndex:-1,"data-testid":"tag-selector-item",className:"flex-col"},r.createElement("div",{className:"flex"},r.createElement("div",{className:"flex items-center"},o),r.createElement("div",{className:"ml-2"},m>0&&r.createElement(hr,{content:"Due",placement:w},r.createElement(Ca,{active:!0,minimal:!0,intent:"primary",className:"text-center","data-testid":"tag-selector-due"},m)),y>0&&r.createElement(hr,{content:"New",placement:w},r.createElement(Ca,{active:!0,minimal:!0,intent:"success",className:"text-center ml-2","data-testid":"tag-selector-new"},y))),r.createElement("div",{onClick:function(t){return t.stopPropagation()},className:""},r.createElement(i.Button,{icon:r.createElement(i.Icon,{icon:b?"chevron-up":"cog",size:11}),className:"ml-1 bp3-small","data-testid":"tag-settings-button",minimal:!0,onClick:function(){x(!b)}}))),r.createElement(i.Collapse,{isOpen:b},E))},Ta=function(t){var e=t.status,n=t.nextDueDate;if(t.isCramming)return r.createElement(hr,{content:"Reviews don't affect scheduling",placement:"left"},r.createElement(i.Tag,{intent:"none"},"Cramming"));switch(e){case"new":return r.createElement(i.Tag,{intent:"success",minimal:!0},"New");case"dueToday":return r.createElement(i.Tag,{intent:"primary",minimal:!0},"Due Today");case"pastDue":var a=Ot.kM(n);return r.createElement(i.Tag,{intent:"warning",title:"Due ".concat(a),minimal:!0},"Past Due");default:return null}},Ma=Dt(i.Icon)(oa||(oa=ha(["\n  margin-right: 5px !important;\n"]))),Da=function(t){var e=t.showBreadcrumbs;return r.createElement("div",{className:"flex align-center"},"".concat(e?"Hide":"Show"," Breadcrumbs"),r.createElement("span",null,r.createElement(Qr,{kind:"light",className:"mx-2"},"B")))},La=function(t){var e=t.tagsList,n=t.onCloseCallback,a=t.onTagChange,o=t.className,s=t.status,l=t.isDone,c=t.nextDueDate,u=t.showBreadcrumbs,h=t.setShowBreadcrumbs,f=t.isCramming,p=t.practiceCardUids,d=t.onOpenDeckPriority,m=t.isGlobalMixedMode,y=t.setIsGlobalMixedMode,v=function(t){var e=(0,r.useContext)(t);if(void 0===e)throw new Error("Context Provider not found");return e}(wa),g=v.selectedTag,b=v.today,x=(v.currentIndex,b.tags[g]||{completed:0,due:0,new:0,dueUids:[],newUids:[]}),w=x.completed;return m&&b.combinedToday,p.length,r.createElement(Sa,{className:o,tabIndex:0},r.createElement("div",{className:"flex items-center"},r.createElement(Ma,{icon:"box",size:14}),r.createElement("div",{tabIndex:-1},r.createElement(_a,{tagsList:e,selectedTag:g,onTagChange:a})),r.createElement("div",{className:"mx-3"},r.createElement(Oa,{className:"flex items-center justify-center gap-1 bg-gray-50 px-2 py-1 rounded-md border border-gray-200",style:{minWidth:"80px"}},r.createElement("span",{className:"text-xs ".concat(m?"text-gray-400":"text-blue-600 font-medium")},"单组"),r.createElement(i.Switch,{className:"mb-0",style:{transform:"scale(0.8)"},checked:m,onChange:function(){return y(!m)},"data-testid":"global-mixed-mode-switch"}),r.createElement("span",{className:"text-xs ".concat(m?"text-blue-600 font-medium":"text-gray-400")},"混合")))),r.createElement(Fa,null,d&&r.createElement(hr,{content:"管理牌组优先级",placement:"left"},r.createElement(i.Button,{icon:"sort",minimal:!0,small:!0,onClick:d})),!l&&r.createElement("div",{onClick:function(){return h(!u)},className:"cursor-pointer"},r.createElement(hr,{content:r.createElement(Da,{showBreadcrumbs:u}),placement:"left"},r.createElement(i.Icon,{icon:u?"eye-open":"eye-off",className:u?"opacity-100":"opacity-60"}))),r.createElement("span",{"data-testid":"status-badge"},r.createElement(Ta,{status:s,nextDueDate:c,isCramming:f,"data-testid":"status-badge"})),r.createElement(Ia,null,r.createElement("span",{style:{color:"#28a745"},"data-testid":"count-new"},m?b.combinedToday.new:x.new),r.createElement("span",{className:"opacity-50"},"/"),r.createElement("span",{style:{color:"#007bff"},"data-testid":"count-due"},m?b.combinedToday.due:x.due),r.createElement("span",{className:"opacity-50"},"/"),r.createElement("span",{style:{color:"#000"},"data-testid":"count-completed"},m?b.combinedToday.completed:w)),r.createElement("button",{"aria-label":"Close",className:"bp3-dialog-close-button bp3-button bp3-minimal bp3-icon-cross",onClick:n})))},Oa=Dt.div(sa||(sa=ha(["\n  &:hover {\n    background-color: #e8f4f8;\n    border-color: #cce7f0;\n  }\n\n  transition: all 0.2s ease;\n"]))),Fa=Dt.div(la||(la=ha(["\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-left: auto;\n"]))),Ia=Dt.span(ca||(ca=ha(["\n  font-size: 14px;\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  margin-right: 8px;\n"])));const ja=function(t){var e,n=t.isOpen,a=t.tagsList,o=t.selectedTag,s=t.onCloseCallback,l=t.practiceData,c=t.today,u=t.handlePracticeClick,h=t.handleMemoTagChange,f=(t.handleReviewMoreClick,t.isCramming),p=t.setIsCramming,d=t.setRenderMode,m=t.dataPageTitle,y=t.onDataRefresh,v=(t.allCardsCount,t.priorityOrder),g=(t.allCardUids,t.cardUids),b=(t.defaultPriority,t.fsrsEnabled),x=t.isGlobalMixedMode,w=t.setIsGlobalMixedMode,E=t.priorityManager,k=t.moveCard,S=t.getCardPosition,_=t.getTotalCards,P=(t.getDeckPositions,t.moveDeck,c&&c.tags&&c.tags[o]||{completed:0,dueUids:[],newUids:[]}),C=(P.completed,r.useMemo((function(){var t=[];try{x&&a&&c&&c.tags?(t=a.flatMap((function(t){var e=c.tags[t];return e?[].concat(ga(e.dueUids||[]),ga(e.newUids||[])):[]})),t=ga(new Set(t))):t=[].concat(ga(P.dueUids||[]),ga(P.newUids||[]))}catch(e){console.error("生成练习卡片列表时出错:",e),t=[]}if(E)return E.getSortedUids().filter((function(e){return t.includes(e)}));if(v.length>0){var e=new Map(v.map((function(t,e){return[t,e]}))),r=function(t){var r;return null!==(r=e.get(t))&&void 0!==r?r:Number.MAX_SAFE_INTEGER};return t.sort((function(t,e){return r(t)-r(e)}))}return t}),[x,a,c.tags,P.dueUids,P.newUids,E,v])),A=P.renderMode,T=va(r.useState(0),2),M=T[0],D=T[1];r.useEffect((function(){D(0)}),[x,o]);var L=r.useRef(new Map),O=va(r.useState([]),2),F=O[0],I=O[1];r.useEffect((function(){I(C)}),[C.join(",")]);var j=r.useCallback((function(){L.current.forEach((function(t){return clearTimeout(t)})),L.current.clear()}),[]);r.useEffect((function(){return function(){j()}}),[j]),r.useEffect((function(){n||j()}),[n,j]);var N=r.useCallback((function(t){I((function(e){if(e.includes(t)){var r=e.filter((function(e){return e!==t})),n=Math.min(M+1,r.length),i=ga(r);return i.splice(n,0,t),i}var a=Math.min(M+1,e.length),o=ga(e);return o.splice(a,0,t),o}))}),[M]),B=F,R=0===M,G=B[M],V=r.useMemo((function(){return G&&l[G]||[]}),[G,l]),z=function(t){var e=t.currentCardRefUid,n=t.sessions,i=n[n.length-1],a=Qi(r.useState(i),2),o=a[0],s=a[1],l=Qi(r.useState(null==i?void 0:i.reviewMode),2),c=l[0],u=l[1],h=Qi(r.useState(),2),f=h[0],p=h[1];return r.useEffect((function(){if(e){if(f&&f!==(null==i?void 0:i.reviewMode)){var t=function(t){for(var e,r=t.sessions,n=t.reviewMode,i=r.length-1;i>=0;i--){var a=r[i];if(a.reviewMode===n){e=a;break}}return e||(0,Ut.cb)({reviewMode:n})}({sessions:n,reviewMode:f});return s(t),void u(t.reviewMode)}s(i),u(null==i?void 0:i.reviewMode)}else s(void 0)}),[c,n,e,i,f]),r.useEffect((function(){p(void 0),u(null==i?void 0:i.reviewMode)}),[e,i]),{currentCardData:o,reviewMode:c,setReviewModeOverride:p}}({currentCardRefUid:G,sessions:V}),H=z.currentCardData,$=z.reviewMode,U=z.setReviewModeOverride,q=(x?B.length:P.new+P.due)>0,W=(x?0===B.length:P.status===zt.Finished)||!H,Y=r.useMemo((function(){return(0,Ut.cb)({reviewMode:Gt.Z.FixedInterval})}),[]),X=va(r.useState((null==H?void 0:H.intervalMultiplier)||Y.intervalMultiplier),2),Z=X[0],J=X[1],K=va(r.useState((null==H?void 0:H.intervalMultiplierType)||Y.intervalMultiplierType),2),Q=K[0],tt=K[1],et=va(r.useState(!1),2),rt=et[0],nt=et[1],it=r.useCallback(function(){var t=ya(da().mark((function t(e){var r,n;return da().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,Promise.resolve().then(__webpack_require__.bind(__webpack_require__,3435));case 3:if(r=t.sent,"function"!=typeof(n=r.savePriorityOrder)){t.next=11;break}return t.next=8,n({dataPageTitle:m,priorityOrder:e});case 8:y(),t.next=12;break;case 11:throw new Error("savePriorityOrder函数不可用");case 12:t.next=17;break;case 14:t.prev=14,t.t0=t.catch(0),console.error("更新优先级失败:",t.t0);case 17:case"end":return t.stop()}}),t,null,[[0,14]])})));return function(e){return t.apply(this,arguments)}}(),[m,y]);r.useEffect((function(){H&&((null==H?void 0:H.reviewMode)===Gt.Z.FixedInterval?(J(H.intervalMultiplier),tt(H.intervalMultiplierType)):(J(Y.intervalMultiplier),tt(Y.intervalMultiplierType)))}),[H,Y]);var at=H&&"nextDueDate"in H,ot=H&&"isNew"in H&&H.isNew,st=at?H.nextDueDate:void 0,lt=0===Ot.YM(st,new Date),ct=ot?"new":lt?"dueToday":at?"pastDue":null,ut=er({refUid:G}),ht=ut.blockInfo,ft=ut.isLoading,pt=(ut.refreshBlockInfo,!!ht.children&&!!ht.children.length),dt=!!ht.childrenUids&&!!ht.childrenUids.length,mt=B[M+1],yt=(er({refUid:mt}).blockInfo,va(r.useState(!1),2)),vt=yt[0],gt=yt[1],bt=va(r.useState(!0),2),xt=bt[0],wt=bt[1],Et=A===Ht.AnswerFirst&&dt&&!vt;r.useEffect((function(){gt(!1)}),[G]),r.useEffect((function(){if(G&&!ft&&!pt&&!dt&&!xt&&!vt){var t=setTimeout((function(){return gt(!0)}),100);return function(){return clearTimeout(t)}}}),[G,pt,dt,xt,ft,vt]);var kt=function(){var t=ya(da().mark((function t(e){var r;return da().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return D(0),h(e),p(!1),x&&w(!1),t.next=6,nr(100);case 6:document.activeElement instanceof HTMLElement&&(null===(r=document)||void 0===r||r.activeElement.blur());case 7:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),St=r.useRef(B.length);r.useEffect((function(){B.length!==St.current&&(D(0),St.current=B.length)}),[B.length]);var _t=r.useCallback((function(t){if(!W){var e=pa(pa(pa({},H),t),{},{intervalMultiplier:Z,intervalMultiplierType:Q}),r=function(){var r=ya(da().mark((function r(){var n,i,a,o,s,l,c;return da().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.prev=0,r.next=3,u(e);case 3:if(!b||!G){r.next=15;break}return r.prev=4,r.next=7,Promise.resolve().then(__webpack_require__.bind(__webpack_require__,9153));case 7:n=r.sent,(i=n.fsrsAlgorithm(e,t.grade)).fsrsState&&i.fsrsState.due&&(a=new Date(i.fsrsState.due).getTime(),o=Date.now(),(s=a-o)>0&&s<864e5&&((l=L.current.get(G))&&clearTimeout(l),I((function(t){return t.filter((function(t){return t!==G}))})),c=setTimeout((function(){L.current.delete(G),N(G)}),s),L.current.set(G,c))),r.next=15;break;case 12:r.prev=12,r.t0=r.catch(4),console.error("倒计时设置失败:",r.t0);case 15:r.next=20;break;case 17:r.prev=17,r.t1=r.catch(0),console.error("练习数据保存失败:",r.t1);case 20:case"end":return r.stop()}}),r,null,[[0,17],[4,12]])})));return function(){return r.apply(this,arguments)}}();r(),D(M+1)}}),[u,W,M,H,Z,Q,b,G]),Pt=r.useCallback((function(){W||D(M+1)}),[M,W]),Ct=r.useCallback((function(){R||D(M-1)}),[M,R]),At={loop:!0,autoplay:!0,animationData:ar,rendererSettings:{preserveAspectRatio:"xMidYMid slice"}},Tt=va(r.useState(!0),2),Mt=Tt[0],Dt=Tt[1],Ft=r.useMemo((function(){return[{combo:"B",global:!0,label:"Show BreadCrumbs",onKeyDown:function(){return Dt(!Mt)}}]}),[Mt]);return i.useHotkeys(Ft),function(t){(0,r.useEffect)((function(){var e="roam-memo-zindex-fix";if(t){if(document.getElementById(e))return;var r=document.createElement("style");r.id=e,r.type="text/css",r.textContent="\n        /*\n         * Roam Research 图片悬浮窗口的层级提升\n         * 解决被 Memo 插件遮挡的问题\n         */\n        \n        /* 提升 Roam 图片浮层的 Z-index */\n        #rm-modal-portal {\n          z-index: 1002 !important; /* Roam 图片浮层整体的 z-index，最高 */\n        }\n        \n        #rm-modal-portal > div > div > div.bp3-dialog-container.bp3-overlay-content > div {\n          z-index: 1001 !important; /* 确保图片实际内容也高 */\n        }\n        \n        /* 提升 Roam 双链弹出菜单的 Z-index */\n        .rm-autocomplete__results {\n          z-index: 1000 !important; /* 使用一个非常高的值，确保显示在所有其他元素之上 */\n          width: auto !important; /* 调整为自适应宽度 */\n          max-width: unset !important; /* 取消最大宽度限制 */\n          min-width: 150px !important; /* 设置最小宽度，防止过窄 */\n        }\n        \n        /* 提升其他可能被遮挡的 Roam UI 元素 */\n        .bp3-popover {\n          z-index: 999 !important;\n        }\n        \n        .bp3-tooltip {\n          z-index: 998 !important;\n        }\n      ",document.head.appendChild(r)}else{var n=document.getElementById(e);n&&document.head.removeChild(n)}return function(){var t=document.getElementById(e);t&&document.head.removeChild(t)}}),[t])}(n),function(t){(0,r.useEffect)((function(){if(t){var e=function(t){var e=t.target;e&&e.matches&&e.matches("textarea.dont-unfocus-block")&&(t.preventDefault(),t.stopPropagation())};return document.addEventListener("blur",e,!0),function(){document.removeEventListener("blur",e,!0)}}}),[t])}(n),B&&B.length,r.createElement(wa.Provider,{value:{reviewMode:$,setReviewModeOverride:U,intervalMultiplier:Z,setIntervalMultiplier:J,intervalMultiplierType:Q,setIntervalMultiplierType:tt,onPracticeClick:_t,today:c,selectedTag:o,currentIndex:M,renderMode:A,setRenderMode:d}},r.createElement(Ea,null,r.createElement(La,{className:"bp3-dialog-header outline-none focus:outline-none focus-visible:outline-none",tagsList:a,onCloseCallback:s,onTagChange:kt,status:ct,isDone:W,nextDueDate:st,showBreadcrumbs:Mt,setShowBreadcrumbs:Dt,isCramming:f,practiceCardUids:B,onOpenDeckPriority:function(){return nt(!0)},isGlobalMixedMode:x,setIsGlobalMixedMode:w}),r.createElement(ka,{className:"bp3-dialog-body overflow-y-scroll m-0 pt-6 pb-8 px-4"},G?r.createElement(r.Fragment,null,Et?null===(e=ht.childrenUids)||void 0===e?void 0:e.map((function(t){return r.createElement(Rr,{key:t,refUid:t,showAnswers:vt,setHasCloze:wt,breadcrumbs:ht.breadcrumbs,showBreadcrumbs:!1})})):r.createElement(Rr,{refUid:G,showAnswers:vt,setHasCloze:wt,breadcrumbs:ht.breadcrumbs,showBreadcrumbs:Mt})):r.createElement("div",{"data-testid":"practice-overlay-done-state",className:"flex items-center flex-col"},r.createElement(ir.A,{options:At,style:{height:200,width:"auto"}}),r.createElement("div",null,"You're all caught up! 🌟"," ",P.completed>0?"Reviewed ".concat(P.completed," ").concat(Lt.td(P.completed,"card","cards")," today."):""))),r.createElement(Sn,{refUid:G,onPracticeClick:_t,onSkipClick:Pt,onPrevClick:Ct,setShowAnswers:gt,showAnswers:vt,isDone:W,hasCards:q,onCloseCallback:s,currentCardData:H,onStartCrammingClick:function(){y(),p(!0),D(0)},fsrsEnabled:b}),!W&&q&&G&&k&&S&&_&&r.createElement(Rn,{currentPosition:S(G),totalCards:_(),onPositionChange:function(){var t=ya(da().mark((function t(e){return da().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,k(G,e);case 2:y();case 3:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),disabled:!1})),r.createElement(Ki,{isOpen:rt,onClose:function(){return nt(!1)},practiceData:l,cardUids:g,priorityOrder:v,today:c,tagsList:a,selectedTag:o,onTagSelect:h,onPriorityUpdate:it}))};var Na,Ba,Ra,Ga,Va,za;function Ha(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}var $a=Dt.div(Na||(Na=Ha(["\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  color: #5c7080;\n  background-color: #f6f9fd;\n  box-shadow: 0 1px 0 rgb(16 22 26 / 10%);\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  word-wrap: normal;\n  line-height: inherit;\n  margin: 0;\n  min-height: 50px;\n  padding: 0 16px;\n  font-weight: 500;\n"]))),Ua=Dt.div(Ba||(Ba=Ha(["\n  overflow-x: hidden;\n  min-height: 200px;\n"]))),qa=Dt.div(Ra||(Ra=Ha(["\n  display: grid;\n  grid-template-rows: 50px 1fr;\n  height: 100%;\n  width: 100%;\n"]))),Wa=Dt.div(Ga||(Ga=Ha(["\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 1.5rem;\n  padding: 2rem;\n"]))),Ya=Dt.div(Va||(Va=Ha(["\n  font-size: 16px;\n  font-weight: 500;\n  color: #5c7080;\n"]))),Xa=Dt(i.Button)(za||(za=Ha(["\n  opacity: ",";\n  \n  &:hover {\n    opacity: 1;\n  }\n"])),(function(t){return t.showForceClose?.6:1}));const Za=function(t){var e=t.state,n=t.onClose,a=t.showForceClose,o=void 0!==a&&a,s={loading:{text:"正在准备复习...",buttonTitle:"Close"},saving:{text:"正在保存进度...",buttonTitle:"强制关闭"}}[e];return r.createElement(qa,null,r.createElement($a,null,r.createElement("span",null,"Roam Memo"),r.createElement(Xa,{icon:"cross",minimal:!0,onClick:n,title:s.buttonTitle,showForceClose:o})),r.createElement(Ua,{className:"bp3-dialog-body overflow-y-scroll m-0 pt-6 pb-8 px-4"},r.createElement(Wa,null,r.createElement(i.Spinner,{intent:"primary",size:40}),r.createElement(Ya,null,s.text))))};var Ja,Ka=Dt(i.Dialog)(Ja||(Ja=function(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}(["\n  max-height: 80vh;\n  width: 90vw;\n\n  "," {\n    width: 80vw;\n  }\n\n  "," {\n    width: 70vw;\n  }\n\n  /* 📱 Mobile portrait: full-screen vertical layout */\n  "," {\n    width: 100vw;\n    height: 100vh;\n    max-height: 100vh;\n    margin: 0;\n    border-radius: 0;\n  }\n\n  /* 确保内容背景是白色并移除默认内边距 */\n  .bp3-dialog {\n    background: white !important;\n    padding: 0 !important;\n    margin: 0 !important;\n  }\n"])),fr,pr,dr);const Qa=function(t){var e=t.isOpen,n=t.onClose,i=t.children,a=t.className;return r.createElement(Ka,{isOpen:e,onClose:n,className:"pb-0 bg-white ".concat(a||""),canEscapeKeyClose:!1},i)};var to,eo;function ro(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}var no=Dt.span(to||(to=ro(["\n  display: flex;\n"]))),io=Dt(i.Tag)(eo||(eo=ro(["\n  &.bp3-tag {\n    padding: 1px 3px;\n    min-height: auto;\n    min-width: auto;\n  }\n"])));const ao=function(t){var e=t.onClickCallback,r=t.today,n=r.combinedToday.status===zt.Finished,i=r.combinedToday,a=i.completed,o=i.new,s=i.due,l=n?"bp3-icon-confirm":"bp3-icon-box";return React.createElement(no,{"data-testid":"side-panel-wrapper",className:"w-full justify-between",onClick:e},React.createElement("div",null,React.createElement("div",{className:"flex items-center"},React.createElement("span",{className:"bp3-icon ".concat(l," icon bp3-icon-small mr-1")}),React.createElement("div",null,"Review"))),React.createElement("div",{className:"flex items-center ml-2"},o>0&&React.createElement(hr,{content:"New Cards",placement:"top"},React.createElement(io,{active:!0,minimal:!0,intent:"success",className:"text-center","data-testid":"new-tag"},o)),s>0&&React.createElement(hr,{content:"Due Cards",placement:"top"},React.createElement(io,{active:!0,minimal:!0,intent:"primary",className:"text-center mx-1","data-testid":"due-tag"},s)),a>0&&React.createElement(hr,{content:"Completed",placement:"top"},React.createElement(io,{active:!0,minimal:!0,intent:"none",className:"text-center mx-1","data-testid":"completed-tag",style:{color:"#000",backgroundColor:"#f5f5f5",borderColor:"#ccc"}},a))))};function oo(t){return oo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},oo(t)}function so(){so=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==oo(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(oo(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function lo(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function co(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return uo(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?uo(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function uo(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function ho(t){return ho="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ho(t)}function fo(){fo=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==ho(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(ho(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function po(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function mo(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?po(Object(r),!0).forEach((function(e){yo(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):po(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function yo(t,e,r){var n;return n=function(t,e){if("object"!=ho(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=ho(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e),(e="symbol"==ho(n)?n:String(n))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function vo(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function go(t){return go="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},go(t)}function bo(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function xo(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?bo(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=go(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=go(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==go(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):bo(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function wo(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var Eo={dataPageTitle:"roam/memo",dailyLimit:0,defaultPriority:70,fsrsEnabled:!0,isGlobalMixedMode:!1};const ko=function(){var t,e,r=(t=n().useState(Eo),e=2,function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return wo(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?wo(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[0],a=r[1];return n().useEffect((function(){window.roamMemo.extensionAPI.settings.panel.create(function(t){var e=t.settings,r=t.setSettings,n=function(){var t,e=(t=fo().mark((function t(e){var n,i;return fo().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=e.key,i=e.value,window.roamMemo.extensionAPI.settings.set(n,i),r((function(t){return mo(mo({},t),{},yo({},n,i))}));case 3:case"end":return t.stop()}}),t)})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){vo(a,n,i,o,s,"next",t)}function s(t){vo(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(t){return e.apply(this,arguments)}}(),i=function(t){var e,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:300;return function(){for(var n=arguments.length,i=new Array(n),a=0;a<n;a++)i[a]=arguments[a];clearTimeout(e),e=setTimeout((function(){t.apply(rr,i)}),r)}}((function(t){return n(t)}));return{tabTitle:"Memo Enhanced",settings:[{id:"fsrsEnabled",name:"Enable FSRS Algorithm/启用FSRS算法",description:"Enable the modern FSRS algorithm instead of SM2. FSRS provides better long-term retention prediction. \n默认启用更先进的FSRS算法，提供基于机器学习的记忆预测。若想切换回经典的SM2算法，可关闭此开关。",action:{type:"switch",checked:e.fsrsEnabled,onChange:function(t){i({key:"fsrsEnabled",value:t.target.checked})}}},{id:"dataPageTitle",name:"Data Page Title",description:"Name of page where we'll store all your data",action:{type:"input",placeholder:Eo.dataPageTitle,onChange:function(t){var e=t.target.value.trim();i({key:"dataPageTitle",value:e})}}},{id:"dailyLimit",name:"Daily Review Limit",description:"Number of cards to review each day. 0 means no limit.",action:{type:"input",placeholder:Eo.dailyLimit,onChange:function(t){var e=t.target.value.trim(),r=!isNaN(Number(e));i({key:"dailyLimit",value:r?Number(e):0})}}},{id:"defaultPriority",name:"Default Priority for New Cards",description:"Set the default priority (0-100) for new cards. Higher numbers = higher priority. New cards will be added to the ranking list with this priority.",action:{type:"input",placeholder:Eo.defaultPriority.toString(),onChange:function(t){var e=t.target.value.trim(),r=Number(e);!isNaN(r)&&r>=0&&r<=100?i({key:"defaultPriority",value:r}):""===e&&i({key:"defaultPriority",value:Eo.defaultPriority})}}}]}}({settings:i,setSettings:a}))}),[a,i.dataPageTitle]),n().useEffect((function(){var t=window.roamMemo.extensionAPI.settings.getAll()||{};"schedulingAlgorithm"in t&&!("fsrsEnabled"in t)&&(t.fsrsEnabled="FSRS"===t.schedulingAlgorithm),"fsrsEnabled"in t||(t.fsrsEnabled=Eo.fsrsEnabled);var e=xo(xo({},Eo),t);["dailyLimit","defaultPriority"].forEach((function(t){"string"==typeof e[t]&&(e[t]=Number(e[t]))})),a(e),Object.keys(Eo).forEach((function(e){e in t||window.roamMemo.extensionAPI.settings.set(e,Eo[e])}))}),[a]),[i,a]};var So=__webpack_require__(5207);__webpack_require__.n(So)();function _o(t){return _o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_o(t)}function Po(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Co(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Po(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=_o(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=_o(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==_o(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Po(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Ao(){Ao=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==_o(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(_o(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function To(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Mo(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){To(a,n,i,o,s,"next",t)}function s(t){To(a,n,i,o,s,"throw",t)}o(void 0)}))}}function Do(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Lo(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Lo(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Lo(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function Oo(t){return Oo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Oo(t)}function Fo(){Fo=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Oo(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Oo(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Io(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function jo(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){Io(a,n,i,o,s,"next",t)}function s(t){Io(a,n,i,o,s,"throw",t)}o(void 0)}))}}function No(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Bo(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Bo(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Bo(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function Ro(t){return Ro="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ro(t)}function Go(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function Vo(){Vo=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Ro(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Ro(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function zo(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}var Ho=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.defaultTtl,n=void 0===e?5e3:e,i=t.maxCacheSize,a=void 0===i?100:i,o=r.useRef(new Map),s=r.useCallback(function(){var t,e=(t=Vo().mark((function t(e,r){var i,s,l,c,u,h=arguments;return Vo().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(i=h.length>2&&void 0!==h[2]?h[2]:n,s=o.current,!((l=s.get(e))&&Date.now()-l.timestamp<i)){t.next=5;break}return t.abrupt("return",l.data);case 5:return t.next=7,r();case 7:return c=t.sent,s.size>=a&&(u=s.keys().next().value)&&s.delete(u),s.set(e,{data:c,timestamp:Date.now()}),t.abrupt("return",c);case 11:case"end":return t.stop()}}),t)})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){zo(a,n,i,o,s,"next",t)}function s(t){zo(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(t,r){return e.apply(this,arguments)}}(),[n,a]);return{queryWithCache:s,clearCache:r.useCallback((function(t){t?o.current.delete(t):o.current.clear()}),[]),getCacheStats:r.useCallback((function(){var t=o.current;return{size:t.size,keys:Array.from(t.keys()),entries:Array.from(t.entries()).map((function(t){var e,r,n=(r=2,function(t){if(Array.isArray(t))return t}(e=t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(e,r)||function(t,e){if(t){if("string"==typeof t)return Go(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Go(t,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=n[0],a=n[1];return{key:i,timestamp:a.timestamp,age:Date.now()-a.timestamp}}))}}),[])}};function $o(t){return $o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},$o(t)}function Uo(){Uo=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==$o(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError($o(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function qo(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function Wo(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){qo(a,n,i,o,s,"next",t)}function s(t){qo(a,n,i,o,s,"throw",t)}o(void 0)}))}}var Yo=function(t){return Wo(Uo().mark((function e(){var r,n,i,a,o=arguments;return Uo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(r=o.length,n=new Array(r),i=0;i<r;i++)n[i]=o[i];return e.prev=1,e.next=4,(a=window.roamAlphaAPI).q.apply(a,[t].concat(n));case 4:return e.abrupt("return",e.sent);case 7:throw e.prev=7,e.t0=e.catch(1),console.error("Roam API 查询失败:",{query:t,params:n,error:e.t0}),e.t0;case 11:case"end":return e.stop()}}),e,null,[[1,7]])})))},Xo=Yo("[:find ?title :where [?p :node/title ?title] [?p :block/uid ?uid]]"),Zo=(Yo("[:find ?uid :in $ ?title :where [?page :node/title ?title] [?page :block/uid ?uid]]"),Yo("[:find ?uid :in $ ?title :where [?page :node/title ?title] [?referencingBlock :block/refs ?page] [?referencingBlock :block/uid ?uid]]"),Yo("[:find ?uid :in $ ?title :where [?page :node/title ?title] [?child :block/page ?page] [?child :block/uid ?uid]]"),function(t){return t.map((function(t){return t[0]})).filter(Boolean)});function Jo(t){return Jo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Jo(t)}function Ko(){Ko=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Jo(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(Jo(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function Qo(t){return function(t){if(Array.isArray(t))return ns(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||rs(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ts(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function es(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){ts(a,n,i,o,s,"next",t)}function s(t){ts(a,n,i,o,s,"throw",t)}o(void 0)}))}}function rs(t,e){if(t){if("string"==typeof t)return ns(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?ns(t,e):void 0}}function ns(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}const is=function(t){var e,n,i=t.dataPageTitle,a=Ho({defaultTtl:1e4}).queryWithCache,o=(e=r.useState(0),n=2,function(t){if(Array.isArray(t))return t}(e)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(e,n)||rs(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=o[0],l=o[1],c=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=n.onError,a=n.onSuccess,o=n.debounceMs,s=void 0===o?0:o,l=n.immediate,c=void 0===l||l,u=No(r.useState(!1),2),h=u[0],f=u[1],p=No(r.useState(null),2),d=p[0],m=p[1],y=No(r.useState(null),2),v=y[0],g=y[1],b=r.useRef(!1),x=r.useRef(null),w=r.useCallback(jo(Fo().mark((function t(){return Fo().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!b.current){t.next=2;break}return t.abrupt("return");case 2:if(!(s>0)){t.next=5;break}return x.current&&clearTimeout(x.current),t.abrupt("return",new Promise((function(t){x.current=setTimeout(jo(Fo().mark((function e(){return Fo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,E();case 2:t();case 3:case"end":return e.stop()}}),e)}))),s)})));case 5:return t.next=7,E();case 7:case"end":return t.stop()}}),t)}))),e),E=function(){var e=jo(Fo().mark((function e(){var r,n;return Fo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return b.current=!0,f(!0),m(null),e.prev=3,e.next=6,t();case 6:r=e.sent,g(r),null==a||a(r),e.next=16;break;case 11:e.prev=11,e.t0=e.catch(3),n=e.t0 instanceof Error?e.t0:new Error(String(e.t0)),m(n),null==i||i(n);case 16:return e.prev=16,f(!1),b.current=!1,e.finish(16);case 20:case"end":return e.stop()}}),e,null,[[3,11,16,20]])})));return function(){return e.apply(this,arguments)}}(),k=r.useCallback((function(){g(null),m(null),f(!1),b.current=!1,x.current&&(clearTimeout(x.current),x.current=null)}),[]);return r.useEffect((function(){c&&w()}),[w,c]),r.useEffect((function(){return function(){x.current&&clearTimeout(x.current)}}),[]),{data:v,isLoading:h,error:d,execute:w,reset:k}}(es(Ko().mark((function t(){var e,r,n,o;return Ko().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,a("all-pages-".concat(s),Xo,1e4);case 2:return e=t.sent,r=Zo(e),n=/(January|February|March|April|May|June|July|August|September|October|November|December) \d{1,2}(st|nd|rd|th), \d{4}|^\d{4}-\d{2}-\d{2}$/,o=r.filter((function(t){return!n.test(t)&&t!==i})),t.abrupt("return",Qo(new Set(o)));case 7:case"end":return t.stop()}}),t)}))),[i,s],{onError:function(t){return console.error("获取页面列表失败:",t)}}),u=c.data,h=c.isLoading,f=(c.execute,r.useCallback((function(){l((function(t){return t+1}))}),[]));return{allPages:u||[],isLoading:h,refreshPages:f}};function as(t){return as="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},as(t)}function os(){os=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==as(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(as(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function ss(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function ls(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){ss(a,n,i,o,s,"next",t)}function s(t){ss(a,n,i,o,s,"throw",t)}o(void 0)}))}}function cs(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return us(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?us(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function us(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function hs(t){return hs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},hs(t)}var fs=["refUid"];function ps(){ps=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,i=Object.defineProperty||function(t,e,r){t[e]=r.value},a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var a=e&&e.prototype instanceof v?e:v,o=Object.create(a.prototype),s=new M(n||[]);return i(o,"_invoke",{value:P(t,r,s)}),o}function h(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",p="suspendedYield",d="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};c(x,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(D([])));E&&E!==r&&n.call(E,o)&&(x=E);var k=b.prototype=v.prototype=Object.create(x);function S(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(i,a,o,s){var l=h(t[i],t,a);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==hs(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,o,s)}),(function(t){r("throw",t,o,s)})):e.resolve(u).then((function(t){c.value=t,o(c)}),(function(t){return r("throw",t,o,s)}))}s(l.arg)}var a;i(this,"_invoke",{value:function(t,n){function i(){return new e((function(e,i){r(t,n,e,i)}))}return a=a?a.then(i,i):i()}})}function P(e,r,n){var i=f;return function(a,o){if(i===d)throw new Error("Generator is already running");if(i===m){if("throw"===a)throw o;return{value:t,done:!0}}for(n.method=a,n.arg=o;;){var s=n.delegate;if(s){var l=C(s,n);if(l){if(l===y)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===f)throw i=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=d;var c=h(e,r,n);if("normal"===c.type){if(i=n.done?m:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(i=m,n.method="throw",n.arg=c.arg)}}}function C(e,r){var n=r.method,i=e.iterator[n];if(i===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,C(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var a=h(i,e.iterator,r.arg);if("throw"===a.type)return r.method="throw",r.arg=a.arg,r.delegate=null,y;var o=a.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}throw new TypeError(hs(e)+" is not iterable")}return g.prototype=b,i(k,"constructor",{value:b,configurable:!0}),i(b,"constructor",{value:g,configurable:!0}),g.displayName=c(b,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,c(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},e.awrap=function(t){return{__await:t}},S(_.prototype),c(_.prototype,s,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new _(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},S(k),c(k,l,"Generator"),c(k,o,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=D,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),T(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;T(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function ds(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}function ms(t,e,r,n,i,a,o){try{var s=t[a](o),l=s.value}catch(t){return void r(t)}s.done?e(l):Promise.resolve(l).then(n,i)}function ys(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function vs(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ys(Object(r),!0).forEach((function(e){var n,i,a,o;n=t,i=e,a=r[e],o=function(t,e){if("object"!=hs(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=hs(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i),(i="symbol"==hs(o)?o:String(o))in n?Object.defineProperty(n,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[i]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ys(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function gs(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,i,a,o,s=[],l=!0,c=!1;try{if(a=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=r.return&&(o=r.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return bs(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?bs(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function bs(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}const xs=function(){var t=gs(r.useState("closed"),2),e=t[0],a=t[1],o=gs(r.useState(!1),2),s=o[0],l=o[1],c=gs(r.useState(""),2),u=c[0],h=c[1],f=gs(ko(),2),p=f[0],d=f[1],m=p.dataPageTitle,y=p.dailyLimit,v=p.defaultPriority,g=p.fsrsEnabled,b=p.isGlobalMixedMode,x=is({dataPageTitle:m}),w=x.allPages,E=(x.isLoading,x.refreshPages,r.useMemo((function(){return 0===w.length?"":w.includes(u)?u:w[0]}),[u,w]));r.useEffect((function(){!E||E===u&&u||h(E)}),[E,u,h]);var k,S=function(t){var e=t.dataPageTitle,r=t.selectedTag,i=Do(n().useState({}),2),a=i[0],o=i[1],s=Do(n().useState(0),2),l=s[0],c=s[1],u=function(){var t=Mo(Ao().mark((function t(n){return Ao().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Rt({dataPageTitle:e,selectedTag:r,toDeleteKeyId:n});case 2:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}();n().useEffect((function(){var t=function(){var t=Mo(Ao().mark((function t(){var r;return Ao().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,ze({dataPageTitle:e});case 2:r=t.sent,o(r);case 4:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}}();t()}),[l,e,r]);var h,f=n().useCallback((function(){return c((function(t){return t+1}))}),[c]);return{saveCacheData:(h=Mo(Ao().mark((function t(n,i){return Ao().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Bt(Co({dataPageTitle:e,data:n,selectedTag:r},i));case 2:c((function(t){return t+1}));case 3:case"end":return t.stop()}}),t)}))),function(t,e){return h.apply(this,arguments)}),deleteCacheDataKey:u,fetchCacheData:f,data:r?a[r]||{}:a}}({dataPageTitle:m}),_=S.fetchCacheData,P=S.saveCacheData,C=S.data,A=function(t){var e=t.tagsList,n=t.selectedTag,i=t.dataPageTitle,a=t.cachedData,o=t.isCramming,s=t.isGlobalMixedMode,l=t.dailyLimit,c=t.defaultPriority,u=r.useRef({}),h=r.useRef([]),f=r.useRef(null),p=r.useRef([]),d=r.useRef({}),m=co(r.useState(0),2),y=m[0],v=m[1],g=co(r.useState(!1),2),b=g[0],x=g[1],w=co(r.useState($t),2),E=w[0],k=w[1],S=co(r.useState(0),2),_=S[0],P=S[1],C=r.useMemo((function(){return"number"==typeof c?c:70}),[c]),A=r.useRef(!1);return r.useEffect((function(){var t;A.current||(t=so().mark((function t(){var r,c;return so().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n){t.next=2;break}return t.abrupt("return");case 2:return A.current=!0,t.prev=3,window.dispatchEvent(new CustomEvent("memoLoadingProgress",{detail:{status:"正在加载卡片信息...",progress:10}})),t.next=7,Me({tagsList:e,dataPageTitle:i,dailyLimit:l,isGlobalMixedMode:s});case 7:return r=t.sent,k(r.todayStats),P(r.allCardsCount),v((function(t){return t+1})),window.dispatchEvent(new CustomEvent("memoLoadingProgress",{detail:{status:"正在加载练习数据...",progress:40}})),t.next=14,De({tagsList:e,dataPageTitle:i,dailyLimit:l,isCramming:o,cachedData:a,defaultPriority:C,isGlobalMixedMode:s});case 14:c=t.sent,window.dispatchEvent(new CustomEvent("memoLoadingProgress",{detail:{status:"正在处理优先级...",progress:80}})),u.current=c.practiceData,h.current=c.priorityOrder,f.current=c.priorityManager,p.current=c.allCardUids,d.current=c.cardUids,k(c.todayStats),P(c.allCardsCount),v((function(t){return t+1})),window.dispatchEvent(new CustomEvent("memoLoadingProgress",{detail:{status:"准备完成",progress:100}})),t.next=31;break;case 27:t.prev=27,t.t0=t.catch(3),console.error("📊 [usePracticeData] 数据获取失败:",t.t0),window.dispatchEvent(new CustomEvent("memoLoadingProgress",{detail:{status:"加载失败",progress:0}}));case 31:return t.prev=31,A.current=!1,t.finish(31);case 34:case"end":return t.stop()}}),t,null,[[3,27,31,34]])})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){lo(a,n,i,o,s,"next",t)}function s(t){lo(a,n,i,o,s,"throw",t)}o(void 0)}))})()}),[n,i,b,o,s,l,e,a,C]),{get practiceData(){return u.current},get priorityOrder(){return h.current},get priorityManager(){return f.current},get allCardUids(){return p.current},get cardUids(){return d.current},fetchPracticeData:function(){return x((function(t){return!t}))},today:E,allCardsCount:_,dataVersion:y}}({tagsList:w,selectedTag:E,dataPageTitle:m,cachedData:C,isCramming:s,dailyLimit:y,isGlobalMixedMode:b,defaultPriority:v}),T=A.practiceData,M=A.today,D=A.fetchPracticeData,L=A.allCardsCount,O=A.priorityOrder,F=A.allCardUids,I=A.cardUids,j=function(t){var e=t.cardUids,n=t.dataPageTitle,i=t.isEnabled,a=cs(r.useState(null),2),o=a[0],s=a[1],l=cs(r.useState(!0),2),c=l[0],u=l[1];r.useEffect((function(){if(!i)return s(null),void u(!1);var t=function(){var t=ls(os().mark((function t(){var r,i,a,o,l,c;return os().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,u(!0),t.next=4,(0,le.loadPriorityOrder)({dataPageTitle:n});case 4:if(r=t.sent,i=Object.values(e).flat(),r&&Array.isArray(r)&&0!==r.length){t.next=10;break}return s(null),u(!1),t.abrupt("return");case 10:if(a=new ye(r),o=new Set(a.getSortedUids()),l=i.some((function(t){return!o.has(t)})),c=a.getSortedUids().some((function(t){return!i.includes(t)})),!l&&!c){t.next=21;break}if(a.addCards(i),a.removeCards(i),!(a.hasUnsavedChanges()&&a.getSortedUids().length>0)){t.next=21;break}return t.next=20,(0,le.savePriorityOrder)({dataPageTitle:n,priorityOrder:a.getSortedUids()});case 20:a.markAsSaved();case 21:s(a),t.next=28;break;case 24:t.prev=24,t.t0=t.catch(0),console.error("优先级管理器初始化失败:",t.t0),s(null);case 28:return t.prev=28,u(!1),t.finish(28);case 31:case"end":return t.stop()}}),t,null,[[0,24,28,31]])})));return function(){return t.apply(this,arguments)}}();t()}),[e,n,i]);var h=r.useCallback(ls(os().mark((function t(){return os().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(o){t.next=2;break}return t.abrupt("return");case 2:return t.prev=2,t.next=5,(0,le.savePriorityOrder)({dataPageTitle:n,priorityOrder:o.getSortedUids()});case 5:o.markAsSaved(),t.next=12;break;case 8:throw t.prev=8,t.t0=t.catch(2),console.error("保存优先级失败:",t.t0),t.t0;case 12:case"end":return t.stop()}}),t,null,[[2,8]])}))),[o,n]),f=r.useCallback(function(){var t=ls(os().mark((function t(r,n){var i,a,s,l;return os().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(o){t.next=2;break}return t.abrupt("return");case 2:if(0!==(i=e[r]||[]).length){t.next=5;break}return t.abrupt("return");case 5:if(-1!==(a=o.getSortedUids()).findIndex((function(t){return i.includes(t)}))){t.next=9;break}return t.abrupt("return");case 9:return s=i.map((function(t){return a.indexOf(t)})).filter((function(t){return-1!==t})).sort((function(t,e){return t-e})),l="up"===n?Math.max(0,s[0]-1):Math.min(a.length-i.length,s[s.length-1]+1),o.moveDeck(i,l),t.next=14,h();case 14:case"end":return t.stop()}}),t)})));return function(e,r){return t.apply(this,arguments)}}(),[o,e,h]),p=r.useCallback(function(){var t=ls(os().mark((function t(e,r){var n;return os().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(o){t.next=2;break}return t.abrupt("return");case 2:return n=Math.max(0,Math.min(o.getSortedUids().length-1,r-1)),o.moveCard(e,n),t.next=6,h();case 6:case"end":return t.stop()}}),t)})));return function(e,r){return t.apply(this,arguments)}}(),[o,h]),d=r.useCallback((function(){return o?o.getDeckPositions(e):[]}),[o,e]),m=r.useCallback((function(t){return o?o.getCardPosition(t):1}),[o]),y=r.useCallback((function(){return o?o.getSortedUids().length:0}),[o]);return{priorityManager:o,isLoading:c,savePriority:h,moveDeck:f,moveCard:p,getDeckPositions:d,getCardPosition:m,getTotalCards:y}}({cardUids:I,dataPageTitle:m,isEnabled:"closed"!==e}),N=j.priorityManager,B=(j.isLoading,j.moveDeck),R=j.moveCard,G=j.getDeckPositions,V=j.getCardPosition,z=j.getTotalCards,H=r.useMemo((function(){if(!w||0===w.length||!N)return w;var t=G();return 0===t.length?w:t.map((function(t){return t.deckName}))}),[w,N,G]),$=function(){var t,e=(t=ps().mark((function t(e){var r,n,i;return ps().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=e.refUid,n=ds(e,fs),r){t.next=4;break}return console.error("HandlePracticeFn Error: No refUid provided"),t.abrupt("return");case 4:return t.prev=4,i=vs(vs({},n),{},{dataPageTitle:m,dateCreated:new Date,refUid:r,isCramming:s,fsrsEnabled:g}),t.next=8,Zr(i);case 8:t.next=13;break;case 10:t.prev=10,t.t0=t.catch(4),console.error("Error Saving Practice Data",t.t0);case 13:case"end":return t.stop()}}),t,null,[[4,10]])})),function(){var e=this,r=arguments;return new Promise((function(n,i){var a=t.apply(e,r);function o(t){ms(a,n,i,o,s,"next",t)}function s(t){ms(a,n,i,o,s,"throw",t)}o(void 0)}))});return function(t){return e.apply(this,arguments)}}(),U=function(){_(),D()};k=function(){"closed"!==e&&"practice"!==e&&U()},r.useEffect((function(){var t=function(){"visible"===document.visibilityState&&k()};return document.addEventListener("visibilitychange",t),function(){document.removeEventListener("visibilitychange",t)}}),[k]);var q,W,Y,X,Z,J=function(){a("loading"),l(!1),setTimeout((function(){U(),a("practice")}),0)},K=function(){a("saving"),l(!1),setTimeout((function(){U(),a("closed")}),500)},Q=gs(r.useState([]),2),tt=Q[0],et=Q[1];return W=(q={onEnterCallback:function(t){var e=w.filter((function(e){return t.value.includes(e)}));et(e)},onLeaveCallback:function(t){if("practice"!==e){var r=w.filter((function(e){return t.value.includes(e)}));tt.length!==r.length&&D()}},enabled:"practice"===e}).onEnterCallback,Y=q.onLeaveCallback,X=q.enabled,Z=void 0===X||X,n().useEffect((function(){return Z?(document.leave("textarea.rm-block-input",Y),document.arrive("textarea.rm-block-input",W),function(){document.unbindLeave("textarea.rm-block-input",Y),document.unbindArrive("textarea.rm-block-input",W)}):(document.unbindLeave("textarea.rm-block-input",Y),void document.unbindArrive("textarea.rm-block-input",W))}),[W,Y,Z]),function(t){var e=t.onShowPracticeOverlay;n().useEffect((function(){var t="Memo: Start Review Session";return window.roamAlphaAPI.ui.commandPalette.addCommand({label:t,callback:function(){return e()}}),function(){window.roamAlphaAPI.ui.commandPalette.removeCommand({label:t})}}),[e])}({onShowPracticeOverlay:J}),r.createElement(i.HotkeysProvider,null,r.createElement(r.Fragment,null,r.createElement(ao,{onClickCallback:J,today:M}),r.createElement(Qa,{isOpen:"closed"!==e,onClose:K},"loading"===e&&r.createElement(Za,{state:"loading",onClose:K}),"saving"===e&&r.createElement(Za,{state:"saving",onClose:function(){return a("closed")},showForceClose:!0}),"practice"===e&&r.createElement(ja,{isOpen:"practice"===e,onCloseCallback:K,practiceData:T,today:M,handlePracticeClick:$,tagsList:H,selectedTag:E,handleMemoTagChange:h,handleReviewMoreClick:function(){},isCramming:s,setIsCramming:l,setRenderMode:function(t,e){P({renderMode:e},{selectedTag:t}),_()},dataPageTitle:m,onDataRefresh:U,allCardsCount:L,priorityOrder:O,allCardUids:F,cardUids:I,defaultPriority:v,fsrsEnabled:g,isGlobalMixedMode:b,setIsGlobalMixedMode:function(t){d((function(e){return vs(vs({},e),{},{isGlobalMixedMode:t})})),window.roamMemo.extensionAPI.settings.set("isGlobalMixedMode",t)},priorityManager:N,moveCard:R,getCardPosition:V,getTotalCards:z,getDeckPositions:G,moveDeck:B}))))};var ws="roam-memo-wrapper";const Es={onload:function(t){var r=t.extensionAPI;window.roamMemo={extensionAPI:r},i.FocusStyleManager.onlyShowFocusOnTabs();var n=function(){var t=document.querySelectorAll("#".concat(ws));if(t.length>0)return t.forEach((function(t,e){e>0&&t.parentNode&&t.parentNode.removeChild(t)})),t[0];var e=document.querySelector(".rm-left-sidebar__daily-notes"),r=document.createElement("div");return r.id=ws,r.classList.add("log-button"),e&&e.parentNode?e.parentNode.insertBefore(r,e.nextSibling):document.body.appendChild(r),r}();e().render(React.createElement(xs,null),n)},onunload:function(){var t=document.getElementById(ws);try{__webpack_require__(8667).roamFocusManager.forceCleanup()}catch(t){console.error("🎯 Memo Enhanced: 清理焦点管理器失败:",t)}try{__webpack_require__(1419).roamZIndexManager.removeZIndexFix()}catch(t){console.error("🔧 Memo Enhanced: 清理层级管理器失败:",t)}t&&(e().unmountComponentAtNode(t),t.remove())}}})();var __webpack_exports__default=__webpack_exports__.A;export{__webpack_exports__default as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,